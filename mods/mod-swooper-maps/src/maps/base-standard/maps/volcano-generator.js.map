{"version":3,"file":"volcano-generator.js","sources":["../../../modules/base-standard/maps/volcano-generator.ts"],"sourcesContent":["import * as globals from \"#base/maps/map-globals.js\";\r\n\r\nfunction getContinentBoundaryPlotCount(iWidth: number, iHeight: number) {\r\n\tlet iContinentBoundaryPlots = 0;\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (GameplayMap.findSecondContinent(iX, iY, 3)) {\r\n\t\t\t\tiContinentBoundaryPlots = iContinentBoundaryPlots + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn iContinentBoundaryPlots;\r\n}\r\n\r\nfunction getNumberAdjacentMountains(iX: number, iY: number) {\r\n\tlet iCount = 0;\r\n\r\n\tfor (let iDirection = 0; iDirection < DirectionTypes.NUM_DIRECTION_TYPES; iDirection++) {\r\n\t\tconst iIndex = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\tconst iLocation = GameplayMap.getLocationFromIndex(iIndex);\r\n\t\tconst pAdjacentPlot = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection);\r\n\t\tif (GameplayMap.isMountain(pAdjacentPlot.x, pAdjacentPlot.y)) {\r\n\t\t\tiCount = iCount + 1;\r\n\t\t}\r\n\t}\r\n\treturn iCount;\r\n}\r\n\r\nfunction getNumberAdjacentVolcanoes(iX: number, iY: number) {\r\n\tlet iCount = 0;\r\n\r\n\tfor (let iDirection = 0; iDirection < DirectionTypes.NUM_DIRECTION_TYPES; iDirection++) {\r\n\t\tconst iIndex = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\tconst iLocation = GameplayMap.getLocationFromIndex(iIndex);\r\n\t\tconst pAdjacentPlot = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection);\r\n\t\tif (GameplayMap.getFeatureType(pAdjacentPlot.x, pAdjacentPlot.y) == globals.g_VolcanoFeature) {\r\n\t\t\tiCount = iCount + 1;\r\n\t\t}\r\n\t}\r\n\treturn iCount;\r\n}\r\n\r\nexport function addVolcanoes(iWidth: number, iHeight: number, spacing = 2) {\r\n\tconsole.log(\"Volcanoes\");\r\n\r\n\tconst iMountainPercentByDistance: number[] = [30, 18, 6];\r\n\r\n\tlet iCountVolcanoesPlaced = 0;\r\n\tconst placedVolcanoes: { x: number; y: number }[] = [];\r\n\tconst minDistanceBetweenVolcanoes = spacing;\r\n\r\n\t// Compute target number of volcanoes\r\n\tlet iTotalLandPlots = 0;\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (!GameplayMap.isWater(iX, iY)) {\r\n\t\t\t\tiTotalLandPlots = iTotalLandPlots + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// TODO: modify the 150 divisor by World Age or Realism Setting\r\n\tconst iDesiredVolcanoes = iTotalLandPlots / 150;\r\n\tconsole.log(\"Desired Volcanoes: \" + iDesiredVolcanoes);\r\n\r\n\t// 2/3rds of Earth's volcanoes are near continent boundaries\r\n\tconst iContinentBoundaryPlots = getContinentBoundaryPlotCount(iWidth, iHeight);\r\n\tconsole.log(\"Continent Boundary Plots: \" + iContinentBoundaryPlots);\r\n\tconst iDesiredNearBoundaries = (iDesiredVolcanoes * 2) / 3;\r\n\tconsole.log(\"Desired Boundary Volcanoes: \" + iDesiredNearBoundaries);\r\n\r\n\tif (iDesiredNearBoundaries > 0) {\r\n\t\tconst iBoundaryPlotsPerVolcano = iContinentBoundaryPlots / iDesiredNearBoundaries;\r\n\r\n\t\tconsole.log(\"Boundary Plots Per Volcano: \" + iBoundaryPlotsPerVolcano);\r\n\r\n\t\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\t\tif (!GameplayMap.isWater(iX, iY)) {\r\n\t\t\t\t\tlet iPlotsFromBoundary = -1;\r\n\t\t\t\t\tlet bVolcanoHere = false;\r\n\t\t\t\t\tconst iNumAdjacentMountains = getNumberAdjacentMountains(iX, iY);\r\n\r\n\t\t\t\t\t// \tDo not place inaccessible volcanoes\r\n\t\t\t\t\tif (iNumAdjacentMountains != 6) {\r\n\t\t\t\t\t\t// \tif (iNumAdjacentMountains ~= 6 and GetNumberNearbyVolcanoes(iX, iY, 3, aPlacedVolcanoes) == 0) then\r\n\r\n\t\t\t\t\t\tif (GameplayMap.findSecondContinent(iX, iY, 1)) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tTerrainBuilder.getRandomNumber(iBoundaryPlotsPerVolcano * 0.7, \"Volcano on boundary\") ==\r\n\t\t\t\t\t\t\t\t0\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tbVolcanoHere = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tiPlotsFromBoundary = 1;\r\n\t\t\t\t\t\t} else if (GameplayMap.findSecondContinent(iX, iY, 2)) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tTerrainBuilder.getRandomNumber(iBoundaryPlotsPerVolcano, \"Volcano 1 from boundary\") == 0\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tbVolcanoHere = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tiPlotsFromBoundary = 2;\r\n\t\t\t\t\t\t} else if (GameplayMap.findSecondContinent(iX, iY, 3)) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tTerrainBuilder.getRandomNumber(\r\n\t\t\t\t\t\t\t\t\tiBoundaryPlotsPerVolcano * 1.5,\r\n\t\t\t\t\t\t\t\t\t\"Volcano 2 from boundary\",\r\n\t\t\t\t\t\t\t\t) == 0\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tbVolcanoHere = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tiPlotsFromBoundary = 3;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tbVolcanoHere &&\r\n\t\t\t\t\t\t!isTooCloseToExistingVolcanoes(iX, iY, placedVolcanoes, minDistanceBetweenVolcanoes)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_MountainTerrain);\r\n\t\t\t\t\t\tTerrainBuilder.setFeatureType(iX, iY, {\r\n\t\t\t\t\t\t\tFeature: globals.g_VolcanoFeature,\r\n\t\t\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\t\t\tElevation: 0,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tplacedVolcanoes.push({ x: iX, y: iY });\r\n\t\t\t\t\t\tiCountVolcanoesPlaced++;\r\n\t\t\t\t\t} else if (iPlotsFromBoundary > 0) {\r\n\t\t\t\t\t\tlet iMountainChance = iMountainPercentByDistance[iPlotsFromBoundary - 1];\r\n\t\t\t\t\t\tif (getNumberAdjacentVolcanoes(iX, iY) > 0) {\r\n\t\t\t\t\t\t\tiMountainChance = iMountainChance / 2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Mountain?\r\n\t\t\t\t\t\tif (TerrainBuilder.getRandomNumber(100, \"Mountain near boundary\") < iMountainChance) {\r\n\t\t\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_MountainTerrain);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"Continent Edge Volcanoes Placed: \" + iCountVolcanoesPlaced);\r\n}\r\n\r\nexport function isTooCloseToExistingVolcanoes(\r\n\tiX: number,\r\n\tiY: number,\r\n\texistingVolcanoes: { x: number; y: number }[],\r\n\tminDistance: number,\r\n): boolean {\r\n\tfor (const volcano of existingVolcanoes) {\r\n\t\tconst dx = volcano.x - iX;\r\n\t\tconst dy = volcano.y - iY;\r\n\t\tconst dist = Math.sqrt(dx * dx + dy * dy);\r\n\t\tif (dist < minDistance) return true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport function addTundraVolcanoes(iWidth: number, iHeight: number, spacing = 3) {\r\n\tconsole.log(`Adding tundra volcanoes`);\r\n\r\n\t// Count land tiles to scale volcano target\r\n\tlet iTotalLandPlots = 0;\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (!GameplayMap.isWater(iX, iY)) {\r\n\t\t\t\tiTotalLandPlots++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//TODO: Do not place volcanoes along continent boundaries too near each other(keep an array of where placed and check distance)\r\n\tlet tundraVolcanoesPlaced = 0;\r\n\tconst iDesiredVolcanoes = Math.floor(iTotalLandPlots / 300);\r\n\tconsole.log(\"Desired Tundra Volcanoes: \" + iDesiredVolcanoes);\r\n\r\n\tconst placedVolcanoes: { x: number; y: number }[] = [];\r\n\r\n\t// Gather tundra candidates - has a tundra biome, is not a river or water tile and is not already a volcano or mountain\r\n\tconst tundraCandidates: { x: number; y: number; isInland: boolean }[] = [];\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst biome = GameplayMap.getBiomeType(iX, iY);\r\n\t\t\tif (biome === globals.g_TundraBiome && GameplayMap.isMountain(iX, iY)) {\r\n\t\t\t\tconst isInland = !GameplayMap.isCoastalLand(iX, iY);\r\n\t\t\t\ttundraCandidates.push({ x: iX, y: iY, isInland });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Shuffle candidates for randomness prioritizing noncoastal tiles\r\n\tshuffleCandidates(tundraCandidates);\r\n\r\n\ttundraCandidates.sort((a, b) => {\r\n\t\tif (a.isInland === b.isInland) return 0;\r\n\t\treturn a.isInland ? -1 : 1;\r\n\t});\r\n\r\n\tconst baseChance = 20;\r\n\tconst falloffPerVolcano = 5;\r\n\r\n\tfor (const { x, y } of tundraCandidates) {\r\n\t\tif (tundraVolcanoesPlaced >= iDesiredVolcanoes) break;\r\n\r\n\t\tif (!isTooCloseToExistingVolcanoes(x, y, placedVolcanoes, spacing)) {\r\n\t\t\tconst currentChance = Math.max(1, baseChance - tundraVolcanoesPlaced * falloffPerVolcano);\r\n\r\n\t\t\tif (TerrainBuilder.getRandomNumber(100, \"Tundra Volcano Roll\") < currentChance) {\r\n\t\t\t\tTerrainBuilder.setTerrainType(x, y, globals.g_MountainTerrain);\r\n\t\t\t\tTerrainBuilder.setFeatureType(x, y, {\r\n\t\t\t\t\tFeature: globals.g_VolcanoFeature,\r\n\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\tElevation: 0,\r\n\t\t\t\t});\r\n\t\t\t\tplacedVolcanoes.push({ x, y });\r\n\t\t\t\ttundraVolcanoesPlaced++;\r\n\t\t\t\tconsole.log(`Tundra Volcano Placed at (${x}, ${y}) â€” chance was ${currentChance}%`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(`Total Tundra Volcanoes Placed: ${tundraVolcanoesPlaced}`);\r\n\r\n\tfunction shuffleCandidates<T>(array: T[]): void {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tconst j = TerrainBuilder.getRandomNumber(i + 1, \"Shuffle\");\r\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["globals.g_VolcanoFeature","globals.g_MountainTerrain","globals.g_TundraBiome"],"mappings":"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"}