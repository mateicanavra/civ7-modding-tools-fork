{"version":3,"file":"terra-incognita.js","sources":["../../../modules/base-standard/maps/terra-incognita.ts"],"sourcesContent":["// terra-incognita.ts\r\n/**\r\n * Base game map script - Produces widely varied continents.\r\n * @packageDocumentation\r\n */\r\nconsole.log(\"Generating using script terra-incognita.ts\");\r\n\r\nimport { assignAdvancedStartRegions } from \"#base/maps/assign-advanced-start-region.js\";\r\nimport { assignStartPositions, chooseStartSectors } from \"#base/maps/assign-starting-plots.js\";\r\nimport { generateDiscoveries } from \"#base/maps/discovery-generator.js\";\r\nimport { addHills, addMountains, buildRainfallMap, generateLakes } from \"#base/maps/elevation-terrain-generator.js\";\r\nimport { addFeatures, designateBiomes } from \"#base/maps/feature-biome-generator.js\";\r\nimport {\r\n\tdumpBiomes,\r\n\tdumpContinents,\r\n\tdumpElevation,\r\n\tdumpFeatures,\r\n\tdumpNoisePredicate,\r\n\tdumpRainfall,\r\n\tdumpResources,\r\n\tdumpStartSectors,\r\n\tdumpTerrain,\r\n} from \"#base/maps/map-debug-helpers.js\";\r\nimport * as globals from \"#base/maps/map-globals.js\";\r\nimport * as utilities from \"#base/maps/map-utilities.js\";\r\nimport { addNaturalWonders } from \"#base/maps/natural-wonder-generator.js\";\r\nimport { generateResources } from \"#base/maps/resource-generator.js\";\r\nimport { dumpPermanentSnow, generateSnow } from \"#base/maps/snow-generator.js\";\r\nimport { addTundraVolcanoes, addVolcanoes } from \"#base/maps/volcano-generator.js\";\r\n\r\nfunction requestMapData(initParams: MapInitializationParams) {\r\n\tconsole.log(initParams.width);\r\n\tconsole.log(initParams.height);\r\n\tconsole.log(initParams.topLatitude);\r\n\tconsole.log(initParams.bottomLatitude);\r\n\tconsole.log(initParams.wrapX);\r\n\tconsole.log(initParams.wrapY);\r\n\tconsole.log(initParams.mapSize);\r\n\r\n\tengine.call(\"SetMapInitData\", initParams);\r\n}\r\n\r\nfunction generateMap() {\r\n\tconsole.log(\"Generating a map!\");\r\n\tconsole.log(`Age - ${GameInfo.Ages.lookup(Game.age)!.AgeType}`);\r\n\r\n\tconst iWidth = GameplayMap.getGridWidth();\r\n\tconst iHeight = GameplayMap.getGridHeight();\r\n\tconst uiMapSize = GameplayMap.getMapSize();\r\n\tlet startPositions = [];\r\n\r\n\tconst mapInfo = GameInfo.Maps.lookup(uiMapSize);\r\n\tif (mapInfo == null) return;\r\n\r\n\tconst iNumNaturalWonders: number = mapInfo.NumNaturalWonders;\r\n\tconst iTilesPerLake: number = mapInfo.LakeGenerationFrequency;\r\n\tlet iNumPlayers1: number = mapInfo.PlayersLandmass1;\r\n\tlet iNumPlayers2: number = mapInfo.PlayersLandmass2;\r\n\t// Establish continent boundaries\r\n\tconst iOceanWaterColumns = (globals.g_OceanWaterColumns + mapInfo.OceanWidth) * 1.75;\r\n\tconst westContinent: ContinentBoundary = {\r\n\t\twest: 3 * globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\teast: iWidth / 2 - globals.g_AvoidSeamOffset,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\tconst eastContinent: ContinentBoundary = {\r\n\t\twest: westContinent.east + 4 * globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\teast: iWidth - globals.g_AvoidSeamOffset,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\r\n\tconst westContinent2: ContinentBoundary = {\r\n\t\twest: globals.g_AvoidSeamOffset,\r\n\t\teast: globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\tconst eastContinent2: ContinentBoundary = {\r\n\t\twest: iWidth / 2 + globals.g_AvoidSeamOffset,\r\n\t\teast: iWidth / 2 + globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\r\n\tlet startSectors: boolean[] = [];\r\n\tlet iStartSectorRows = 0;\r\n\tlet iStartSectorCols = 0;\r\n\r\n\tlet startPosition: number = Configuration.getMapValue(\"StartPosition\");\r\n\tif (startPosition == null) {\r\n\t\tstartPosition = Database.makeHash(\"START_POSITION_STANDARD\");\r\n\t}\r\n\tstartPosition = Number(BigInt.asIntN(32, BigInt(startPosition))); // Convert to signed int32.\r\n\tconst startPositionHash: number = Database.makeHash(\"START_POSITION_BALANCED\");\r\n\r\n\tconst bIsBalanced: boolean = startPosition == startPositionHash;\r\n\tif (bIsBalanced) {\r\n\t\tconsole.log(\"Balanced Map\");\r\n\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(2, \"East or West\");\r\n\t\tconsole.log(\"Random Hemisphere: \" + iRandom);\r\n\t\tif (iRandom == 1) {\r\n\t\t\tconst iNum1: number = iNumPlayers1;\r\n\t\t\tconst iNum2: number = iNumPlayers2;\r\n\r\n\t\t\tiNumPlayers1 = iNum2;\r\n\t\t\tiNumPlayers2 = iNum1;\r\n\t\t}\r\n\r\n\t\tconst bHumanNearEquator: boolean = utilities.needHumanNearEquator();\r\n\t\tiStartSectorRows = mapInfo.StartSectorRows;\r\n\t\tiStartSectorCols = mapInfo.StartSectorCols;\r\n\t\tstartSectors = chooseStartSectors(\r\n\t\t\tiNumPlayers1,\r\n\t\t\tiNumPlayers2,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tbHumanNearEquator,\r\n\t\t);\r\n\t\tdumpStartSectors(startSectors);\r\n\t\tcreatePrimaryLandmass(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t\tiNumPlayers1 > iNumPlayers2,\r\n\t\t\tiOceanWaterColumns,\r\n\t\t);\r\n\t\tcreateSecondaryLandmassBalanced(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t\tiNumPlayers1 > iNumPlayers2,\r\n\t\t\tiOceanWaterColumns,\r\n\t\t);\r\n\r\n\t\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 4);\r\n\t\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 5);\r\n\t\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 6);\r\n\r\n\t\tutilities.applyCoastalErosionAdjustingForStartSectors(\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\t0.02,\r\n\t\t\t1.5,\r\n\t\t\t0.8,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t);\r\n\t\tutilities.applyCoastalErosionAdjustingForStartSectors(\r\n\t\t\teastContinent,\r\n\t\t\teastContinent,\r\n\t\t\t0.02,\r\n\t\t\t1.5,\r\n\t\t\t0.8,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t);\r\n\t\tutilities.applyCoastalErosion(westContinent2, 0.02, 1.5, 0.8, true);\r\n\t\tutilities.applyCoastalErosion(eastContinent2, 0.02, 1.5, 0.8, true);\r\n\t} else {\r\n\t\tconsole.log(\"Standard Map\");\r\n\t\tconst iFractalGrain = 2;\r\n\t\tconst iWaterPercent = globals.g_WaterPercent * globals.g_Cutoff;\r\n\t\tconst iLargestContinentPercent = 15;\r\n\t\tutilities.createOrganicLandmasses(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\tiFractalGrain,\r\n\t\t\tiWaterPercent,\r\n\t\t\tiLargestContinentPercent,\r\n\t\t);\r\n\r\n\t\t// Is biggest area in west or east?\r\n\t\tconst iAreaID = AreaBuilder.findBiggestArea(false);\r\n\t\tconst kBoundaries = AreaBuilder.getAreaBoundary(iAreaID);\r\n\t\tif (kBoundaries.west > iWidth / 2) {\r\n\t\t\tconst iNum1: number = iNumPlayers1;\r\n\t\t\tconst iNum2: number = iNumPlayers2;\r\n\t\t\tiNumPlayers1 = iNum2;\r\n\t\t\tiNumPlayers2 = iNum1;\r\n\t\t\tutilities.clearContinent(westContinent);\r\n\t\t\tcreateSecondaryLandmassStandard(westContinent);\r\n\t\t} else {\r\n\t\t\tutilities.clearContinent(eastContinent);\r\n\t\t\tcreateSecondaryLandmassStandard(eastContinent);\r\n\t\t}\r\n\t\tutilities.addPlotTags(iHeight, iWidth, eastContinent.west);\r\n\r\n\t\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 5);\r\n\t\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 6);\r\n\r\n\t\tutilities.applyCoastalErosion(westContinent, 0.02, 1.5, 0.8, false);\r\n\t\tutilities.applyCoastalErosion(eastContinent, 0.02, 1.5, 0.8, false);\r\n\t\tutilities.applyCoastalErosion(westContinent2, 0.1, 1.5, 0.8, true);\r\n\t\tutilities.applyCoastalErosion(eastContinent2, 0.1, 1.5, 0.8, true);\r\n\t}\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\texpandCoastsPlus(westContinent.west, westContinent.east, iHeight);\r\n\texpandCoastsPlus(eastContinent.west, eastContinent.east, iHeight);\r\n\r\n\texpandCoastsPlus(0, westContinent.west - globals.g_OceanWaterColumns, iHeight);\r\n\texpandCoastsPlus(\r\n\t\twestContinent.east + globals.g_OceanWaterColumns,\r\n\t\teastContinent.west - globals.g_OceanWaterColumns,\r\n\t\tiHeight,\r\n\t);\r\n\texpandCoastsPlus(eastContinent.east + globals.g_OceanWaterColumns, 0, iHeight);\r\n\tutilities.adjustOceanPlotTags(iNumPlayers1 > iNumPlayers2);\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.stampContinents();\r\n\taddMountains(iWidth, iHeight);\r\n\taddVolcanoes(iWidth, iHeight);\r\n\tgenerateLakes(iWidth, iHeight, iTilesPerLake);\r\n\tutilities.adjustLakePlotTags(westContinent, true);\r\n\tutilities.adjustLakePlotTags(westContinent2, true);\r\n\tutilities.adjustLakePlotTags(eastContinent, false);\r\n\tutilities.adjustLakePlotTags(eastContinent2, false);\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.buildElevation();\r\n\taddHills(iWidth, iHeight);\r\n\tbuildRainfallMap(iWidth, iHeight);\r\n\tTerrainBuilder.modelRivers(5, 15, globals.g_NavigableRiverTerrain);\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\tTerrainBuilder.defineNamedRivers();\r\n\tdesignateBiomes(iWidth, iHeight);\r\n\taddTundraVolcanoes(iWidth, iHeight);\r\n\taddNaturalWonders(iWidth, iHeight, iNumNaturalWonders);\r\n\tTerrainBuilder.addFloodplains(4, 10);\r\n\taddFeatures(iWidth, iHeight);\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.storeWaterData();\r\n\tgenerateSnow(iWidth, iHeight);\r\n\r\n\tdumpStartSectors(startSectors);\r\n\tdumpContinents(iWidth, iHeight);\r\n\tdumpTerrain(iWidth, iHeight);\r\n\tdumpElevation(iWidth, iHeight);\r\n\tdumpRainfall(iWidth, iHeight);\r\n\tdumpBiomes(iWidth, iHeight);\r\n\tdumpFeatures(iWidth, iHeight);\r\n\tdumpPermanentSnow(iWidth, iHeight);\r\n\r\n\tgenerateResources(iWidth, iHeight);\r\n\tstartPositions = assignStartPositions(\r\n\t\tiNumPlayers1,\r\n\t\tiNumPlayers2,\r\n\t\twestContinent,\r\n\t\teastContinent,\r\n\t\tiStartSectorRows,\r\n\t\tiStartSectorCols,\r\n\t\tstartSectors,\r\n\t);\r\n\tgenerateDiscoveries(iWidth, iHeight, startPositions);\r\n\r\n\tdumpResources(iWidth, iHeight);\r\n\r\n\tFertilityBuilder.recalculate(); // Must be after features are added.\r\n\r\n\tconst seed = GameplayMap.getRandomSeed(); // can use any seed you want for different noises\r\n\tconst avgDistanceBetweenPoints = 3;\r\n\tconst normalizedRangeSmoothing = 2;\r\n\tconst poisson = TerrainBuilder.generatePoissonMap(seed, avgDistanceBetweenPoints, normalizedRangeSmoothing);\r\n\tconst poissonPred = (val: number): string => {\r\n\t\treturn val >= 1 ? \"*\" : \" \";\r\n\t};\r\n\tdumpNoisePredicate(iWidth, iHeight, poisson, poissonPred);\r\n\r\n\tassignAdvancedStartRegions();\r\n}\r\n\r\n// Register listeners.\r\nengine.on(\"RequestMapInitData\", requestMapData);\r\nengine.on(\"GenerateMap\", generateMap);\r\n\r\nconsole.log(\"Loaded terra-incognita.ts\");\r\n\r\nfunction createPrimaryLandmass(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n\tbWestSide: boolean,\r\n\tiOceanWaterColumns: number,\r\n) {\r\n\tFractalBuilder.create(globals.g_LandmassFractal, iWidth, iHeight, 2, 0);\r\n\tconst iWaterHeight: number = FractalBuilder.getHeightFromPercent(globals.g_LandmassFractal, globals.g_WaterPercent);\r\n\r\n\tconst iBuffer: number = Math.floor(iHeight / 18.0);\r\n\tconst iBuffer2: number = Math.floor(iWidth / 28.0);\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrain: TerrainType = globals.g_FlatTerrain;\r\n\r\n\t\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(iBuffer, \"Random Top/Bottom Edges\");\r\n\t\t\tconst iRandom2: number = TerrainBuilder.getRandomNumber(iBuffer2, \"Random Left/Right Edges\");\r\n\r\n\t\t\t// Initialize plot tag\r\n\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\r\n\t\t\t//  Must be water if at the poles\r\n\t\t\tif (iY < continent1.south + iRandom || iY >= continent1.north - iRandom) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t}\r\n\t\t\t// Of if between the continents\r\n\t\t\telse if (\r\n\t\t\t\tiX < continent1.west + iRandom2 ||\r\n\t\t\t\tiX >= continent2.east - iRandom2 ||\r\n\t\t\t\t(iX >= continent1.east - iRandom2 && iX < continent2.west + iRandom2)\r\n\t\t\t) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t} else if (\r\n\t\t\t\t(bWestSide && iX > continent1.east + iOceanWaterColumns) ||\r\n\t\t\t\t(bWestSide == false && iX < continent2.west - iOceanWaterColumns)\r\n\t\t\t) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t} else {\r\n\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\tiX,\r\n\t\t\t\t\tiY,\r\n\t\t\t\t\tiWaterHeight,\r\n\t\t\t\t\tglobals.g_FractalWeight,\r\n\t\t\t\t\tglobals.g_CenterWeight,\r\n\t\t\t\t\tglobals.g_StartSectorWeight,\r\n\t\t\t\t\tcontinent1,\r\n\t\t\t\t\tcontinent2,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tstartSectors,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\tif (iPlotHeight < iWaterHeight * globals.g_Cutoff) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Add plot tag if applicable\r\n\t\t\tif (terrain != globals.g_OceanTerrain && terrain != globals.g_CoastTerrain) {\r\n\t\t\t\tutilities.addLandmassPlotTags(iX, iY, continent2.west);\r\n\t\t\t} else {\r\n\t\t\t\tutilities.addWaterPlotTags(iX, iY, continent2.west);\r\n\t\t\t}\r\n\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction createSecondaryLandmassBalanced(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n\tbWestSide: boolean,\r\n\tiOceanWaterColumns: number,\r\n) {\r\n\tconst iSize: number = TerrainBuilder.getRandomNumber(6, \"Random Land Size\");\r\n\tconsole.log(\"Random Land Size \" + iSize);\r\n\tFractalBuilder.create(globals.g_LandmassFractal, iWidth, iHeight, iSize, 0);\r\n\tconst iRanHeight: number = 130 - iSize * 10;\r\n\tconst iWaterHeight: number = FractalBuilder.getHeightFromPercent(\r\n\t\tglobals.g_LandmassFractal,\r\n\t\t(globals.g_WaterPercent * iRanHeight) / 100,\r\n\t);\r\n\r\n\tconst iBuffer: number = Math.floor(iHeight / 18.0);\r\n\tconst iBuffer2: number = Math.floor(iWidth / 28.0);\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrain: TerrainType = globals.g_FlatTerrain;\r\n\r\n\t\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(iBuffer, \"Random Top/Bottom Edges\");\r\n\t\t\tconst iRandom2: number = TerrainBuilder.getRandomNumber(iBuffer2, \"Random Left/Right Edges\");\r\n\r\n\t\t\t//  Must be water if at the poles\r\n\t\t\tif (iY < continent1.south + iRandom || iY >= continent1.north - iRandom) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t// Initialize plot tag\r\n\t\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\t\t\t\t// Add plot tag if applicable\r\n\t\t\t\tif (terrain != globals.g_OceanTerrain && terrain != globals.g_CoastTerrain) {\r\n\t\t\t\t\tutilities.addLandmassPlotTags(iX, iY, continent2.west);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tutilities.addWaterPlotTags(iX, iY, continent2.west);\r\n\t\t\t\t}\r\n\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t}\r\n\t\t\t// Of if between the continents\r\n\t\t\telse if (\r\n\t\t\t\tiX < continent1.west + iRandom2 ||\r\n\t\t\t\tiX >= continent2.east - iRandom2 ||\r\n\t\t\t\t(iX >= continent1.east - iRandom2 && iX < continent2.west + iRandom2)\r\n\t\t\t) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t// Initialize plot tag\r\n\t\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\t\t\t\t// Add plot tag if applicable\r\n\t\t\t\tif (terrain != globals.g_OceanTerrain && terrain != globals.g_CoastTerrain) {\r\n\t\t\t\t\tutilities.addLandmassPlotTags(iX, iY, continent2.west);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tutilities.addWaterPlotTags(iX, iY, continent2.west);\r\n\t\t\t\t}\r\n\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t} else if (\r\n\t\t\t\t(bWestSide && iX > continent1.east + iOceanWaterColumns) ||\r\n\t\t\t\t(bWestSide == false && iX < continent2.west - iOceanWaterColumns)\r\n\t\t\t) {\r\n\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\tiX,\r\n\t\t\t\t\tiY,\r\n\t\t\t\t\tiWaterHeight,\r\n\t\t\t\t\tglobals.g_FractalWeight,\r\n\t\t\t\t\tglobals.g_CenterWeight,\r\n\t\t\t\t\tglobals.g_StartSectorWeight,\r\n\t\t\t\t\tcontinent1,\r\n\t\t\t\t\tcontinent2,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tstartSectors,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\tif (iPlotHeight < iWaterHeight * globals.g_Cutoff) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add plot tag if applicable\r\n\t\t\t\tif (terrain != globals.g_OceanTerrain && terrain != globals.g_CoastTerrain) {\r\n\t\t\t\t\tutilities.addLandmassPlotTags(iX, iY, continent2.west);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tutilities.addWaterPlotTags(iX, iY, continent2.west);\r\n\t\t\t\t}\r\n\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction createSecondaryLandmassStandard(continent1: ContinentBoundary) {\r\n\tconsole.log(\"Creating new landmass in this box\");\r\n\tconsole.log(\"  North: \" + continent1.north);\r\n\tconsole.log(\"  South: \" + continent1.south);\r\n\tconsole.log(\"  East:  \" + continent1.east);\r\n\tconsole.log(\"  West:  \" + continent1.west);\r\n\r\n\tconst iGrain: number = TerrainBuilder.getRandomNumber(3, \"Secondary Landmass Fractal Grain\") + 2; // Min of 2\r\n\tconsole.log(\"Secondary Landmass Fractal Grain: \" + iGrain);\r\n\tFractalBuilder.create(\r\n\t\tglobals.g_LandmassFractal,\r\n\t\tcontinent1.east - continent1.west + 1,\r\n\t\tcontinent1.north - continent1.south + 1,\r\n\t\tiGrain,\r\n\t\t0,\r\n\t);\r\n\tconst iWaterHeightRange = 30;\r\n\tconst iRanHeight: number = TerrainBuilder.getRandomNumber(iWaterHeightRange, \"Random Water Height\");\r\n\tconsole.log(\"Random Water Height: \" + iRanHeight);\r\n\r\n\t// Normally we use water height of 40, let's increase that a bit on average and use a range from 35 to 65\r\n\tconst iWaterHeight: number = FractalBuilder.getHeightFromPercent(\r\n\t\tglobals.g_LandmassFractal,\r\n\t\tglobals.g_WaterPercent * globals.g_Cutoff + iRanHeight - 5,\r\n\t);\r\n\r\n\tfor (let iY: number = continent1.south; iY <= continent1.north; iY++) {\r\n\t\tfor (let iX: number = continent1.west; iX <= continent1.east; iX++) {\r\n\t\t\tconst terrain: TerrainType = globals.g_FlatTerrain;\r\n\t\t\tconst iPlotHeight: number = FractalBuilder.getHeight(\r\n\t\t\t\tglobals.g_LandmassFractal,\r\n\t\t\t\tiX - continent1.west,\r\n\t\t\t\tiY - continent1.south,\r\n\t\t\t);\r\n\t\t\tif (iPlotHeight >= iWaterHeight) {\r\n\t\t\t\t// Apply random feathering if along an edge\r\n\t\t\t\tif (\r\n\t\t\t\t\tiY == continent1.south ||\r\n\t\t\t\t\tiY == continent1.north ||\r\n\t\t\t\t\tiX == continent1.west ||\r\n\t\t\t\t\tiX == continent1.east\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (TerrainBuilder.getRandomNumber(2, \"Feather hard edges\") == 0) {\r\n\t\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Not along an edge, so always change to land if above the water height\r\n\t\t\t\telse {\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function expandCoastsPlus(iWest: number, iEast: number, iHeight: number) {\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX: number = iWest; iX < iEast; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tif (terrain == globals.g_OceanTerrain) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tGameplayMap.isAdjacentToShallowWater(iX, iY) &&\r\n\t\t\t\t\tTerrainBuilder.getRandomNumber(2, \"Shallow Water Scater Scatter\") == 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_CoastTerrain);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["globals.g_OceanWaterColumns","globals.g_AvoidSeamOffset","globals.g_IslandWidth","globals.g_PolarWaterRows","utilities.needHumanNearEquator","utilities.createIslands","utilities.applyCoastalErosionAdjustingForStartSectors","utilities.applyCoastalErosion","globals.g_WaterPercent","globals.g_Cutoff","utilities.createOrganicLandmasses","utilities.clearContinent","utilities.addPlotTags","utilities.adjustOceanPlotTags","utilities.adjustLakePlotTags","globals.g_NavigableRiverTerrain","globals.g_LandmassFractal","globals.g_FlatTerrain","globals.g_OceanTerrain","utilities.getHeightAdjustingForStartSector","globals.g_FractalWeight","globals.g_CenterWeight","globals.g_StartSectorWeight","globals.g_CoastTerrain","utilities.addLandmassPlotTags","utilities.addWaterPlotTags"],"mappings":"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"}