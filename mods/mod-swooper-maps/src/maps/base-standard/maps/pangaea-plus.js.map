{"version":3,"file":"pangaea-plus.js","sources":["../../../modules/base-standard/maps/pangaea-plus.ts"],"sourcesContent":["// pangaea-plus.ts\r\n/**\r\n * Base game map script - Produces widely varied continents.\r\n * @packageDocumentation\r\n */\r\nconsole.log(\"Generating using script pangea-plus.ts\");\r\n\r\nimport { assignAdvancedStartRegions } from \"#base/maps/assign-advanced-start-region.js\";\r\nimport { assignSingleContinentStartPositions, chooseStartSectors } from \"#base/maps/assign-starting-plots.js\";\r\nimport { generateDiscoveries } from \"#base/maps/discovery-generator.js\";\r\nimport { addHills, addMountains, buildRainfallMap, generateLakes } from \"#base/maps/elevation-terrain-generator.js\";\r\nimport { addFeatures, designateBiomes } from \"#base/maps/feature-biome-generator.js\";\r\nimport {\r\n\tdumpBiomes,\r\n\tdumpContinents,\r\n\tdumpElevation,\r\n\tdumpFeatures,\r\n\tdumpNoisePredicate,\r\n\tdumpRainfall,\r\n\tdumpResources,\r\n\tdumpStartSectors,\r\n\tdumpTerrain,\r\n} from \"#base/maps/map-debug-helpers.js\";\r\nimport * as globals from \"#base/maps/map-globals.js\";\r\nimport * as utilities from \"#base/maps/map-utilities.js\";\r\nimport { addNaturalWonders } from \"#base/maps/natural-wonder-generator.js\";\r\nimport { generateResources } from \"#base/maps/resource-generator.js\";\r\nimport { dumpPermanentSnow, generateSnow } from \"#base/maps/snow-generator.js\";\r\nimport { addTundraVolcanoes, addVolcanoes } from \"#base/maps/volcano-generator.js\";\r\n\r\nfunction requestMapData(initParams: MapInitializationParams) {\r\n\tconsole.log(initParams.width);\r\n\tconsole.log(initParams.height);\r\n\tconsole.log(initParams.topLatitude);\r\n\tconsole.log(initParams.bottomLatitude);\r\n\tconsole.log(initParams.wrapX);\r\n\tconsole.log(initParams.wrapY);\r\n\tconsole.log(initParams.mapSize);\r\n\r\n\tengine.call(\"SetMapInitData\", initParams);\r\n}\r\n\r\nfunction generateMap() {\r\n\tconsole.log(\"Generating a map!\");\r\n\tconsole.log(`Age - ${GameInfo.Ages.lookup(Game.age)!.AgeType}`);\r\n\r\n\tconst iWidth = GameplayMap.getGridWidth();\r\n\tconst iHeight = GameplayMap.getGridHeight();\r\n\tconst uiMapSize = GameplayMap.getMapSize();\r\n\tlet startPositions = [];\r\n\r\n\tconst mapInfo = GameInfo.Maps.lookup(uiMapSize);\r\n\tif (mapInfo == null) return;\r\n\r\n\tconst iNumNaturalWonders: number = mapInfo.NumNaturalWonders;\r\n\tconst iTilesPerLake: number = mapInfo.LakeGenerationFrequency;\r\n\tconst iNumPlayers1: number = mapInfo.PlayersLandmass1;\r\n\tconst iNumPlayers2: number = mapInfo.PlayersLandmass2;\r\n\r\n\t// Decide which side will be the dominant landmass (80%)\r\n\tconst bWestDominant = TerrainBuilder.getRandomNumber(2, \"Choose Dominant Hemisphere\") === 0; // Randomly pick West or East\r\n\r\n\tconsole.log(`Dominant Landmass: ${bWestDominant ? \"West (80%)\" : \"East (80%)\"}`);\r\n\r\n\tlet westContinent: ContinentBoundary;\r\n\tlet westContinent2: ContinentBoundary;\r\n\tlet eastContinent: ContinentBoundary;\r\n\tlet eastContinent2: ContinentBoundary;\r\n\tconst iOceanWaterColumns = (globals.g_OceanWaterColumns + mapInfo.OceanWidth) * 1.75;\r\n\r\n\tif (bWestDominant) {\r\n\t\t// West small islands\r\n\t\twestContinent2 = {\r\n\t\t\twest: globals.g_AvoidSeamOffset * 2,\r\n\t\t\teast: Math.floor(iWidth * 0.1),\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\t\t// Main Continent\r\n\t\twestContinent = {\r\n\t\t\twest: westContinent2.east + globals.g_AvoidSeamOffset * 2,\r\n\t\t\teast: Math.floor(iWidth * 0.8) - globals.g_AvoidSeamOffset,\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\r\n\t\t// East Islands\r\n\t\teastContinent = {\r\n\t\t\twest: westContinent.east + globals.g_AvoidSeamOffset * 2,\r\n\t\t\teast: Math.floor(iWidth * 0.9),\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\r\n\t\t// More East Islands\r\n\t\teastContinent2 = {\r\n\t\t\twest: eastContinent.east,\r\n\t\t\teast: iWidth - globals.g_AvoidSeamOffset * 2,\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\t} else {\r\n\t\t// West islands\r\n\t\twestContinent2 = {\r\n\t\t\twest: globals.g_AvoidSeamOffset * 2,\r\n\t\t\teast: Math.floor(iWidth * 0.1),\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\r\n\t\t// More West Islands\r\n\t\twestContinent = {\r\n\t\t\twest: westContinent2.east,\r\n\t\t\teast: Math.floor(iWidth * 0.2) - globals.g_AvoidSeamOffset * 2,\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\r\n\t\t// Main Continent\r\n\t\teastContinent = {\r\n\t\t\twest: westContinent.east + globals.g_AvoidSeamOffset * 2,\r\n\t\t\teast: Math.floor(iWidth * 0.8),\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\r\n\t\t// Small East Islands\r\n\t\teastContinent2 = {\r\n\t\t\twest: eastContinent.east + globals.g_AvoidSeamOffset * 2,\r\n\t\t\teast: iWidth - globals.g_AvoidSeamOffset * 2,\r\n\t\t\tsouth: globals.g_PolarWaterRows,\r\n\t\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\t\tcontinent: 0,\r\n\t\t};\r\n\t}\r\n\r\n\tlet startSectors: boolean[] = [];\r\n\tlet iStartSectorRows = 0;\r\n\tlet iStartSectorCols = 0;\r\n\r\n\tlet startPosition: number = Configuration.getMapValue(\"StartPosition\");\r\n\tif (startPosition == null) {\r\n\t\tstartPosition = Database.makeHash(\"START_POSITION_STANDARD\");\r\n\t}\r\n\tstartPosition = Number(BigInt.asIntN(32, BigInt(startPosition)));\r\n\tconst startPositionHash: number = Database.makeHash(\"START_POSITION_BALANCED\");\r\n\r\n\tconst ISLAND_COVERAGE_TARGET = 0.04; // ~4% of the map should be islands\r\n\tconst totalTiles = iWidth * iHeight;\r\n\r\n\tconst bIsBalanced: boolean = startPosition == startPositionHash;\r\n\tif (bIsBalanced && totalTiles != 0) {\r\n\t\tconsole.log(\"Balanced Map\");\r\n\r\n\t\tconst bHumanNearEquator: boolean = utilities.needHumanNearEquator();\r\n\t\tiStartSectorRows = mapInfo.StartSectorRows;\r\n\t\tiStartSectorCols = mapInfo.StartSectorCols;\r\n\t\tstartSectors = chooseStartSectors(\r\n\t\t\tiNumPlayers1,\r\n\t\t\tiNumPlayers2,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tbHumanNearEquator,\r\n\t\t);\r\n\t\tdumpStartSectors(startSectors);\r\n\t\tcreatePrimaryLandmass(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t\tbWestDominant,\r\n\t\t\tiOceanWaterColumns,\r\n\t\t);\r\n\r\n\t\t// Generate only islands in the smaller\r\n\t\tif (bWestDominant) {\r\n\t\t\tcreateSecondaryLandmass(iWidth, iHeight, eastContinent, eastContinent2);\r\n\t\t\t// add small islands to western ocean\r\n\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, westContinent2, 4);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, westContinent2, 5);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, westContinent2, 6);\r\n\r\n\t\t\tutilities.applyCoastalErosionAdjustingForStartSectors(\r\n\t\t\t\twestContinent,\r\n\t\t\t\teastContinent,\r\n\t\t\t\t0.1,\r\n\t\t\t\t1.5,\r\n\t\t\t\t0.8,\r\n\t\t\t\tiStartSectorRows,\r\n\t\t\t\tiStartSectorCols,\r\n\t\t\t\tstartSectors,\r\n\t\t\t);\r\n\r\n\t\t\tlet islandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\tlet islandRatio = islandTiles / totalTiles;\r\n\t\t\tlet attempts = 0;\r\n\t\t\twhile (islandRatio < ISLAND_COVERAGE_TARGET && attempts < 3) {\r\n\t\t\t\tconsole.log(\"Island coverage too low: \" + (islandRatio * 100).toFixed(2) + \"%. Adding more islands.\");\r\n\t\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 6);\r\n\t\t\t\tislandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\t\tislandRatio = islandTiles / totalTiles;\r\n\t\t\t\tattempts++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcreateSecondaryLandmass(iWidth, iHeight, westContinent, westContinent2);\r\n\t\t\t// add small islands to eastern ocean\r\n\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 4);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 5);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 6);\r\n\r\n\t\t\tutilities.applyCoastalErosionAdjustingForStartSectors(\r\n\t\t\t\teastContinent,\r\n\t\t\t\twestContinent,\r\n\t\t\t\t0.1,\r\n\t\t\t\t1.5,\r\n\t\t\t\t0.8,\r\n\t\t\t\tiStartSectorRows,\r\n\t\t\t\tiStartSectorCols,\r\n\t\t\t\tstartSectors,\r\n\t\t\t);\r\n\r\n\t\t\tlet islandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\tlet islandRatio = islandTiles / totalTiles;\r\n\t\t\tlet attempts = 0;\r\n\t\t\twhile (islandRatio < ISLAND_COVERAGE_TARGET && attempts < 3) {\r\n\t\t\t\tconsole.log(\"Island coverage too low: \" + (islandRatio * 100).toFixed(2) + \"%. Adding more islands.\");\r\n\t\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 6);\r\n\t\t\t\tislandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\t\tislandRatio = islandTiles / totalTiles;\r\n\t\t\t\tattempts++;\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (totalTiles != 0) {\r\n\t\tconsole.log(\"Standard Map\");\r\n\t\tconst iFractalGrain = 2;\r\n\t\tconst iWaterPercent = globals.g_WaterPercent * globals.g_Cutoff;\r\n\t\tconst iLargestContinentPercent = 30;\r\n\t\tutilities.createOrganicLandmasses(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\tiFractalGrain,\r\n\t\t\tiWaterPercent,\r\n\t\t\tiLargestContinentPercent,\r\n\t\t);\r\n\t\tutilities.addPlotTags(iHeight, iWidth, eastContinent.west);\r\n\r\n\t\tif (bWestDominant) {\r\n\t\t\tcreateSecondaryLandmass(iWidth, iHeight, eastContinent, eastContinent2);\r\n\t\t\t// add small islands to western ocean\r\n\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, westContinent2, 4);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, westContinent2, 6);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, westContinent2, 6);\r\n\r\n\t\t\tutilities.applyCoastalErosion(westContinent, 0.15, 1.5, 0.8, false);\r\n\t\t\tutilities.applyCoastalErosion(eastContinent, 0.01, 1.5, 0.8, true);\r\n\r\n\t\t\tlet islandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\tlet islandRatio = islandTiles / totalTiles;\r\n\t\t\tlet attempts = 0;\r\n\t\t\twhile (islandRatio < ISLAND_COVERAGE_TARGET && attempts < 3) {\r\n\t\t\t\tconsole.log(\"Island coverage too low: \" + (islandRatio * 100).toFixed(2) + \"%. Adding more islands.\");\r\n\t\t\t\tutilities.createIslands(iWidth, iHeight, westContinent2, westContinent2, 6);\r\n\t\t\t\tislandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\t\tislandRatio = islandTiles / totalTiles;\r\n\t\t\t\tattempts++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcreateSecondaryLandmass(iWidth, iHeight, westContinent, westContinent2);\r\n\t\t\t// add small islands to eastern ocean\r\n\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 4);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 6);\r\n\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 6);\r\n\r\n\t\t\tutilities.applyCoastalErosion(westContinent, 0.01, 1.5, 0.8, true);\r\n\t\t\tutilities.applyCoastalErosion(eastContinent, 0.15, 1.5, 0.8, false);\r\n\r\n\t\t\tlet islandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\tlet islandRatio = islandTiles / totalTiles;\r\n\t\t\tlet attempts = 0;\r\n\t\t\twhile (islandRatio < ISLAND_COVERAGE_TARGET && attempts < 3) {\r\n\t\t\t\tconsole.log(\"Island coverage too low: \" + (islandRatio * 100).toFixed(2) + \"%. Adding more islands.\");\r\n\t\t\t\tutilities.createIslands(iWidth, iHeight, eastContinent2, eastContinent2, 6);\r\n\t\t\t\tislandTiles = countIslandTiles(iWidth, iHeight);\r\n\t\t\t\tislandRatio = islandTiles / totalTiles;\r\n\t\t\t\tattempts++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tutilities.applyCoastalErosion(westContinent2, 0.01, 1.5, 0.8, true);\r\n\t\tutilities.applyCoastalErosion(eastContinent2, 0.01, 1.5, 0.8, true);\r\n\t}\r\n\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\texpandCoastsPlus(westContinent.west, westContinent.east, iHeight);\r\n\texpandCoastsPlus(eastContinent.west, eastContinent.east, iHeight);\r\n\r\n\texpandCoastsPlus(0, westContinent.west - globals.g_OceanWaterColumns, iHeight);\r\n\texpandCoastsPlus(\r\n\t\twestContinent.east + globals.g_OceanWaterColumns,\r\n\t\teastContinent.west - globals.g_OceanWaterColumns,\r\n\t\tiHeight,\r\n\t);\r\n\texpandCoastsPlus(eastContinent.east + globals.g_OceanWaterColumns, 0, iHeight);\r\n\tutilities.adjustOceanPlotTags(bWestDominant);\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.stampContinents();\r\n\taddMountains(iWidth, iHeight);\r\n\taddVolcanoes(iWidth, iHeight);\r\n\tgenerateLakes(iWidth, iHeight, iTilesPerLake);\r\n\tutilities.adjustLakePlotTags(westContinent, true);\r\n\tutilities.adjustLakePlotTags(westContinent2, true);\r\n\tutilities.adjustLakePlotTags(eastContinent, false);\r\n\tutilities.adjustLakePlotTags(eastContinent2, false);\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.buildElevation();\r\n\taddHills(iWidth, iHeight);\r\n\tbuildRainfallMap(iWidth, iHeight);\r\n\tTerrainBuilder.modelRivers(5, 15, globals.g_NavigableRiverTerrain);\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\tTerrainBuilder.defineNamedRivers();\r\n\tdesignateBiomes(iWidth, iHeight);\r\n\taddTundraVolcanoes(iWidth, iHeight);\r\n\taddNaturalWonders(iWidth, iHeight, iNumNaturalWonders);\r\n\tTerrainBuilder.addFloodplains(4, 10);\r\n\taddFeatures(iWidth, iHeight);\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.storeWaterData();\r\n\tgenerateSnow(iWidth, iHeight);\r\n\r\n\tdumpStartSectors(startSectors);\r\n\tdumpContinents(iWidth, iHeight);\r\n\tdumpTerrain(iWidth, iHeight);\r\n\tdumpElevation(iWidth, iHeight);\r\n\tdumpRainfall(iWidth, iHeight);\r\n\tdumpBiomes(iWidth, iHeight);\r\n\tdumpFeatures(iWidth, iHeight);\r\n\tdumpPermanentSnow(iWidth, iHeight);\r\n\r\n\t//check which hemisphere was the primary landmass and start all players on it\r\n\tif (bWestDominant) {\r\n\t\tgenerateResources(iWidth, iHeight);\r\n\t\tstartPositions = assignSingleContinentStartPositions(\r\n\t\t\tiNumPlayers1 + iNumPlayers2,\r\n\t\t\twestContinent,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t);\r\n\t\tutilities.replaceIslandResources(iWidth, iHeight, \"RESOURCECLASS_TREASURE\");\r\n\t} else {\r\n\t\tgenerateResources(iWidth, iHeight);\r\n\t\tstartPositions = assignSingleContinentStartPositions(\r\n\t\t\tiNumPlayers1 + iNumPlayers2,\r\n\t\t\teastContinent,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t);\r\n\t\tutilities.replaceIslandResources(iWidth, iHeight, \"RESOURCECLASS_TREASURE\");\r\n\t}\r\n\r\n\tgenerateDiscoveries(iWidth, iHeight, startPositions);\r\n\r\n\tdumpResources(iWidth, iHeight);\r\n\r\n\tFertilityBuilder.recalculate(); // Must be after features are added.\r\n\r\n\tconst seed = GameplayMap.getRandomSeed(); // can use any seed you want for different noises\r\n\tconst avgDistanceBetweenPoints = 3;\r\n\tconst normalizedRangeSmoothing = 2;\r\n\tconst poisson = TerrainBuilder.generatePoissonMap(seed, avgDistanceBetweenPoints, normalizedRangeSmoothing);\r\n\tconst poissonPred = (val: number): string => {\r\n\t\treturn val >= 1 ? \"*\" : \" \";\r\n\t};\r\n\tdumpNoisePredicate(iWidth, iHeight, poisson, poissonPred);\r\n\r\n\tassignAdvancedStartRegions();\r\n}\r\n\r\n// Register listeners.\r\nengine.on(\"RequestMapInitData\", requestMapData);\r\nengine.on(\"GenerateMap\", generateMap);\r\n\r\nconsole.log(\"Loaded pangaea-plus.ts\");\r\n\r\nfunction createPrimaryLandmass(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n\tbWestSide: boolean,\r\n\tiOceanWaterColumns: number,\r\n) {\r\n\tFractalBuilder.create(globals.g_LandmassFractal, iWidth, iHeight, 2, 0);\r\n\tconst iWaterHeight: number = FractalBuilder.getHeightFromPercent(globals.g_LandmassFractal, globals.g_WaterPercent);\r\n\r\n\tconst iBuffer: number = Math.floor(iHeight / 18.0);\r\n\tconst iBuffer2: number = Math.floor(iWidth / 28.0);\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrain: TerrainType = globals.g_FlatTerrain;\r\n\r\n\t\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(iBuffer, \"Random Top/Bottom Edges\");\r\n\t\t\tconst iRandom2: number = TerrainBuilder.getRandomNumber(iBuffer2, \"Random Left/Right Edges\");\r\n\r\n\t\t\t// Initialize plot tag\r\n\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\r\n\t\t\t//  Must be water if at the poles\r\n\t\t\tif (iY < continent1.south + iRandom || iY >= continent1.north - iRandom) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t}\r\n\t\t\t// Of if between the continents\r\n\t\t\telse if (\r\n\t\t\t\tiX < continent1.west + iRandom2 ||\r\n\t\t\t\tiX >= continent2.east - iRandom2 ||\r\n\t\t\t\t(iX >= continent1.east - iRandom2 && iX < continent2.west + iRandom2)\r\n\t\t\t) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t} else if (\r\n\t\t\t\t(bWestSide && iX > continent1.east + iOceanWaterColumns) ||\r\n\t\t\t\t(bWestSide == false && iX < continent2.west - iOceanWaterColumns)\r\n\t\t\t) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t} else {\r\n\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\tiX,\r\n\t\t\t\t\tiY,\r\n\t\t\t\t\tiWaterHeight,\r\n\t\t\t\t\tglobals.g_FractalWeight,\r\n\t\t\t\t\tglobals.g_CenterWeight,\r\n\t\t\t\t\tglobals.g_StartSectorWeight,\r\n\t\t\t\t\tcontinent1,\r\n\t\t\t\t\tcontinent2,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tstartSectors,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\tif (iPlotHeight < iWaterHeight * globals.g_Cutoff) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Add plot tag if applicable\r\n\t\t\tif (terrain != globals.g_OceanTerrain && terrain != globals.g_CoastTerrain) {\r\n\t\t\t\tutilities.addLandmassPlotTags(iX, iY, continent2.west);\r\n\t\t\t} else {\r\n\t\t\t\tutilities.addWaterPlotTags(iX, iY, continent2.west);\r\n\t\t\t}\r\n\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction createSecondaryLandmass(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n) {\r\n\tconsole.log(\"Generating secondary landmass as small islands...\");\r\n\r\n\t// Clear any existing landmass in the region\r\n\tutilities.clearContinent(continent1);\r\n\tutilities.clearContinent(continent2);\r\n\r\n\t// Generate multiple groups of islands\r\n\tutilities.createIslands(iWidth, iHeight, continent1, continent2, 4);\r\n\tutilities.createIslands(iWidth, iHeight, continent1, continent2, 6);\r\n\tutilities.createIslands(iWidth, iHeight, continent1, continent2, 6);\r\n}\r\n\r\nexport function expandCoastsPlus(iWest: number, iEast: number, iHeight: number) {\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX: number = iWest; iX < iEast; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tif (terrain == globals.g_OceanTerrain) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tGameplayMap.isAdjacentToShallowWater(iX, iY) &&\r\n\t\t\t\t\tTerrainBuilder.getRandomNumber(2, \"Shallow Water Scater Scatter\") == 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_CoastTerrain);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction countIslandTiles(iWidth: number, iHeight: number): number {\r\n\tlet islandCount = 0;\r\n\tfor (let y = 0; y < iHeight; y++) {\r\n\t\tfor (let x = 0; x < iWidth; x++) {\r\n\t\t\tif (GameplayMap.hasPlotTag(x, y, PlotTags.PLOT_TAG_ISLAND)) {\r\n\t\t\t\tislandCount++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn islandCount;\r\n}\r\n"],"names":["globals.g_OceanWaterColumns","globals.g_AvoidSeamOffset","globals.g_PolarWaterRows","utilities.needHumanNearEquator","utilities.createIslands","utilities.applyCoastalErosionAdjustingForStartSectors","globals.g_WaterPercent","globals.g_Cutoff","utilities.createOrganicLandmasses","utilities.addPlotTags","utilities.applyCoastalErosion","utilities.adjustOceanPlotTags","utilities.adjustLakePlotTags","globals.g_NavigableRiverTerrain","utilities.replaceIslandResources","globals.g_LandmassFractal","globals.g_FlatTerrain","globals.g_OceanTerrain","utilities.getHeightAdjustingForStartSector","globals.g_FractalWeight","globals.g_CenterWeight","globals.g_StartSectorWeight","globals.g_CoastTerrain","utilities.addLandmassPlotTags","utilities.addWaterPlotTags","utilities.clearContinent"],"mappings":"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"}