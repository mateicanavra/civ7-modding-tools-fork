{"version":3,"file":"shuffle.js","sources":["../../../modules/base-standard/maps/shuffle.ts"],"sourcesContent":["// shuffle.ts\r\n/**\r\n * Base game map script - Produces widely varied map.\r\n * @packageDocumentation\r\n */\r\nconsole.log(\"Generating using script shuffle.ts\");\r\n\r\nimport { assignAdvancedStartRegions } from \"#base/maps/assign-advanced-start-region.js\";\r\nimport { assignStartPositions, chooseStartSectors } from \"#base/maps/assign-starting-plots.js\";\r\nimport { generateDiscoveries } from \"#base/maps/discovery-generator.js\";\r\nimport { addHills, addMountains, buildRainfallMap, generateLakes } from \"#base/maps/elevation-terrain-generator.js\";\r\nimport { addFeatures, designateBiomes } from \"#base/maps/feature-biome-generator.js\";\r\nimport {\r\n\tdumpBiomes,\r\n\tdumpContinents,\r\n\tdumpElevation,\r\n\tdumpFeatures,\r\n\tdumpNoisePredicate,\r\n\tdumpRainfall,\r\n\tdumpResources,\r\n\tdumpStartSectors,\r\n\tdumpTerrain,\r\n} from \"#base/maps/map-debug-helpers.js\";\r\nimport * as globals from \"#base/maps/map-globals.js\";\r\nimport * as utilities from \"#base/maps/map-utilities.js\";\r\nimport { addNaturalWonders } from \"#base/maps/natural-wonder-generator.js\";\r\nimport { generateResources } from \"#base/maps/resource-generator.js\";\r\nimport { dumpPermanentSnow, generateSnow } from \"#base/maps/snow-generator.js\";\r\nimport { addVolcanoes } from \"#base/maps/volcano-generator.js\";\r\n\r\nfunction requestMapData(initParams: MapInitializationParams) {\r\n\tconsole.log(initParams.width);\r\n\tconsole.log(initParams.height);\r\n\tconsole.log(initParams.topLatitude);\r\n\tconsole.log(initParams.bottomLatitude);\r\n\tconsole.log(initParams.wrapX);\r\n\tconsole.log(initParams.wrapY);\r\n\tconsole.log(initParams.mapSize);\r\n\r\n\tengine.call(\"SetMapInitData\", initParams);\r\n}\r\n\r\nfunction generateMap() {\r\n\tconsole.log(\"Generating a map!\");\r\n\tconsole.log(`Age - ${GameInfo.Ages.lookup(Game.age)!.AgeType}`);\r\n\r\n\tconst iWidth = GameplayMap.getGridWidth();\r\n\tconst iHeight = GameplayMap.getGridHeight();\r\n\tconst uiMapSize = GameplayMap.getMapSize();\r\n\tlet startPositions = [];\r\n\r\n\tconst mapInfo = GameInfo.Maps.lookup(uiMapSize);\r\n\tif (mapInfo == null) return;\r\n\r\n\tconst iNumNaturalWonders: number = mapInfo.NumNaturalWonders;\r\n\tconst iTilesPerLake: number = mapInfo.LakeGenerationFrequency;\r\n\tlet iNumPlayers1: number = mapInfo.PlayersLandmass1;\r\n\tlet iNumPlayers2: number = mapInfo.PlayersLandmass2;\r\n\r\n\t// Establish continent boundaries\r\n\tconst iOceanWaterColumns = (globals.g_OceanWaterColumns + mapInfo.OceanWidth) * 1.75;\r\n\tconst westContinent: ContinentBoundary = {\r\n\t\twest: 3 * globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\teast: iWidth / 2 - globals.g_AvoidSeamOffset,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\tconst eastContinent: ContinentBoundary = {\r\n\t\twest: westContinent.east + 4 * globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\teast: iWidth - globals.g_AvoidSeamOffset,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\r\n\tconst westContinent2: ContinentBoundary = {\r\n\t\twest: globals.g_AvoidSeamOffset,\r\n\t\teast: globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\tconst eastContinent2: ContinentBoundary = {\r\n\t\twest: iWidth / 2 + globals.g_AvoidSeamOffset,\r\n\t\teast: iWidth / 2 + globals.g_AvoidSeamOffset + globals.g_IslandWidth,\r\n\t\tsouth: globals.g_PolarWaterRows,\r\n\t\tnorth: iHeight - globals.g_PolarWaterRows,\r\n\t\tcontinent: 0,\r\n\t};\r\n\r\n\tconst iRandom: number = TerrainBuilder.getRandomNumber(2, \"East or West\");\r\n\tif (iRandom == 1) {\r\n\t\tconst iNum1: number = iNumPlayers1;\r\n\t\tconst iNum2: number = iNumPlayers2;\r\n\t\tiNumPlayers1 = iNum2;\r\n\t\tiNumPlayers2 = iNum1;\r\n\t}\r\n\r\n\tlet startSectors: boolean[] = [];\r\n\tlet iStartSectorRows = 0;\r\n\tlet iStartSectorCols = 0;\r\n\r\n\tlet startPosition: number = Configuration.getMapValue(\"StartPosition\");\r\n\tif (startPosition == null) {\r\n\t\tstartPosition = Database.makeHash(\"START_POSITION_STANDARD\");\r\n\t}\r\n\r\n\tstartPosition = Number(BigInt.asIntN(32, BigInt(startPosition))); // Convert to signed int32.\r\n\tconst startPositionHash: number = Database.makeHash(\"START_POSITION_BALANCED\");\r\n\tconst bIsBalanced: boolean = startPosition == startPositionHash;\r\n\tif (bIsBalanced) {\r\n\t\tconsole.log(\"Balanced Map\");\r\n\t\tconst bHumanNearEquator: boolean = utilities.needHumanNearEquator();\r\n\t\tiStartSectorRows = mapInfo.StartSectorRows;\r\n\t\tiStartSectorCols = mapInfo.StartSectorCols;\r\n\t\tstartSectors = chooseStartSectors(\r\n\t\t\tiNumPlayers1,\r\n\t\t\tiNumPlayers2,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tbHumanNearEquator,\r\n\t\t);\r\n\t\tdumpStartSectors(startSectors);\r\n\t\tcreateLandmasses(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t\tiOceanWaterColumns,\r\n\t\t);\r\n\r\n\t\tutilities.applyCoastalErosionAdjustingForStartSectors(\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\t0.02,\r\n\t\t\t1.5,\r\n\t\t\t0.8,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t);\r\n\t\tutilities.applyCoastalErosionAdjustingForStartSectors(\r\n\t\t\teastContinent,\r\n\t\t\teastContinent,\r\n\t\t\t0.02,\r\n\t\t\t1.5,\r\n\t\t\t0.8,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t);\r\n\t\tutilities.applyCoastalErosion(westContinent2, 0.02, 1.5, 0.8, true);\r\n\t\tutilities.applyCoastalErosion(eastContinent2, 0.02, 1.5, 0.8, true);\r\n\t} else {\r\n\t\tconsole.log(\"Standard Map\");\r\n\t\tcreateLandmasses(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\twestContinent,\r\n\t\t\teastContinent,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t\tiOceanWaterColumns,\r\n\t\t);\r\n\r\n\t\tutilities.applyCoastalErosion(westContinent, 0.02, 1.5, 0.8, false);\r\n\t\tutilities.applyCoastalErosion(eastContinent, 0.02, 1.5, 0.8, false);\r\n\t\tutilities.applyCoastalErosion(westContinent2, 0.1, 1.5, 0.8, true);\r\n\t\tutilities.applyCoastalErosion(eastContinent2, 0.1, 1.5, 0.8, true);\r\n\t}\r\n\tutilities.addPlotTags(iHeight, iWidth, eastContinent.west);\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 4);\r\n\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 5);\r\n\tutilities.createIslands(iWidth, iHeight, westContinent2, eastContinent2, 6);\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\texpandCoastsPlus(westContinent.west, westContinent.east, iHeight);\r\n\texpandCoastsPlus(eastContinent.west, eastContinent.east, iHeight);\r\n\r\n\texpandCoastsPlus(0, westContinent.west - globals.g_OceanWaterColumns, iHeight);\r\n\texpandCoastsPlus(\r\n\t\twestContinent.east + globals.g_OceanWaterColumns,\r\n\t\teastContinent.west - globals.g_OceanWaterColumns,\r\n\t\tiHeight,\r\n\t);\r\n\texpandCoastsPlus(eastContinent.east + globals.g_OceanWaterColumns, 0, iHeight);\r\n\tutilities.adjustOceanPlotTags(iNumPlayers1 > iNumPlayers2);\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.stampContinents();\r\n\taddMountains(iWidth, iHeight);\r\n\taddVolcanoes(iWidth, iHeight);\r\n\tgenerateLakes(iWidth, iHeight, iTilesPerLake);\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.buildElevation();\r\n\taddHills(iWidth, iHeight);\r\n\tbuildRainfallMap(iWidth, iHeight);\r\n\r\n\tconst iRandomRiver: number = TerrainBuilder.getRandomNumber(10, \"Intensity of Rivers\");\r\n\tif (iRandomRiver == 0) {\r\n\t\tTerrainBuilder.modelRivers(10, 85, globals.g_NavigableRiverTerrain);\r\n\t} else if (iRandomRiver < 3) {\r\n\t\tTerrainBuilder.modelRivers(5, 70, globals.g_NavigableRiverTerrain);\r\n\t} else {\r\n\t\tTerrainBuilder.modelRivers(5, 15, globals.g_NavigableRiverTerrain);\r\n\t}\r\n\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\tTerrainBuilder.defineNamedRivers();\r\n\tdesignateBiomes(iWidth, iHeight);\r\n\taddNaturalWonders(iWidth, iHeight, iNumNaturalWonders);\r\n\tTerrainBuilder.addFloodplains(4, 10);\r\n\taddFeatures(iWidth, iHeight);\r\n\tTerrainBuilder.validateAndFixTerrain();\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tif (terrain == globals.g_CoastTerrain) {\r\n\t\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_WATER);\r\n\t\t\t\tif (iNumPlayers1 > iNumPlayers2) {\r\n\t\t\t\t\tif (iX < westContinent.west - 2 || iX > westContinent.east + 2) {\r\n\t\t\t\t\t\t//console.log(\"Islands on the Coast: \" + iX + \", \" + iY)\r\n\t\t\t\t\t\tTerrainBuilder.addPlotTag(iX, iY, PlotTags.PLOT_TAG_EAST_WATER);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//console.log(\"Main Coast: \" + iX + \", \" + iY)\r\n\t\t\t\t\t\tTerrainBuilder.addPlotTag(iX, iY, PlotTags.PLOT_TAG_WEST_WATER);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (iX > eastContinent.east + 2 || iX < eastContinent.west - 2) {\r\n\t\t\t\t\t\t//console.log(\"Islands on the Coast2: \" + iX + \", \" + iY)\r\n\t\t\t\t\t\tTerrainBuilder.addPlotTag(iX, iY, PlotTags.PLOT_TAG_WEST_WATER);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//console.log(\"Main Coast2: \" + iX + \", \" + iY)\r\n\t\t\t\t\t\tTerrainBuilder.addPlotTag(iX, iY, PlotTags.PLOT_TAG_EAST_WATER);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tAreaBuilder.recalculateAreas();\r\n\tTerrainBuilder.storeWaterData();\r\n\tgenerateSnow(iWidth, iHeight);\r\n\r\n\tdumpContinents(iWidth, iHeight);\r\n\tdumpTerrain(iWidth, iHeight);\r\n\tdumpElevation(iWidth, iHeight);\r\n\tdumpRainfall(iWidth, iHeight);\r\n\tdumpBiomes(iWidth, iHeight);\r\n\tdumpFeatures(iWidth, iHeight);\r\n\tdumpPermanentSnow(iWidth, iHeight);\r\n\r\n\tgenerateResources(iWidth, iHeight);\r\n\tstartPositions = assignStartPositions(\r\n\t\tiNumPlayers1,\r\n\t\tiNumPlayers2,\r\n\t\twestContinent,\r\n\t\teastContinent,\r\n\t\tiStartSectorRows,\r\n\t\tiStartSectorCols,\r\n\t\tstartSectors,\r\n\t);\r\n\tgenerateDiscoveries(iWidth, iHeight, startPositions);\r\n\r\n\tdumpResources(iWidth, iHeight);\r\n\r\n\tFertilityBuilder.recalculate(); // Must be after features are added.\r\n\r\n\tconst seed = GameplayMap.getRandomSeed(); // can use any seed you want for different noises\r\n\tconst avgDistanceBetweenPoints = 3;\r\n\tconst normalizedRangeSmoothing = 2;\r\n\tconst poisson = TerrainBuilder.generatePoissonMap(seed, avgDistanceBetweenPoints, normalizedRangeSmoothing);\r\n\tconst poissonPred = (val: number): string => {\r\n\t\treturn val >= 1 ? \"*\" : \" \";\r\n\t};\r\n\tdumpNoisePredicate(iWidth, iHeight, poisson, poissonPred);\r\n\r\n\tassignAdvancedStartRegions();\r\n}\r\n\r\n// Register listeners.\r\nengine.on(\"RequestMapInitData\", requestMapData);\r\nengine.on(\"GenerateMap\", generateMap);\r\n\r\nconsole.log(\"Loaded shuffle.ts\");\r\n\r\nfunction createLandmasses(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n\tiOceanWaterColumns: number,\r\n) {\r\n\tconst iRandomLandmassSetup: number = TerrainBuilder.getRandomNumber(4, \"Shuffle Map Landmass Structure\");\r\n\r\n\tif (iRandomLandmassSetup == 0) {\r\n\t\tcreateArchipelago(iWidth, iHeight, continent1, continent2, iStartSectorRows, iStartSectorCols, startSectors);\r\n\t\tconsole.log(\"Random Landmass Setup: Archipelago\");\r\n\t} else if (iRandomLandmassSetup == 1) {\r\n\t\tcreateContinents(iWidth, iHeight, continent1, continent2, iStartSectorRows, iStartSectorCols, startSectors);\r\n\t\tconsole.log(\"Random Landmass Setup: Continents\");\r\n\t} else if (iRandomLandmassSetup == 2) {\r\n\t\tcreateFractal(iWidth, iHeight, continent1, continent2, iStartSectorRows, iStartSectorCols, startSectors);\r\n\t\tconsole.log(\"Random Landmass Setup: Fractal\");\r\n\t} else if (iRandomLandmassSetup == 3) {\r\n\t\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_OceanTerrain);\r\n\t\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcreateTerraMass(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\tcontinent1,\r\n\t\t\tcontinent2,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t\ttrue,\r\n\t\t\tiOceanWaterColumns,\r\n\t\t);\r\n\t\tcreateTerraMass(\r\n\t\t\tiWidth,\r\n\t\t\tiHeight,\r\n\t\t\tcontinent1,\r\n\t\t\tcontinent2,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tstartSectors,\r\n\t\t\tfalse,\r\n\t\t\tiOceanWaterColumns,\r\n\t\t);\r\n\t\tconsole.log(\"Random Landmass Setup: Terra\");\r\n\t}\r\n}\r\n\r\nfunction createArchipelago(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n) {\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_OceanTerrain);\r\n\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\t\t}\r\n\t}\r\n\r\n\t//console.log(\"Set Water World\");\r\n\tgenerateFractalLayerWithoutHills(\r\n\t\tiWidth,\r\n\t\tiHeight,\r\n\t\tcontinent1,\r\n\t\tcontinent2,\r\n\t\tiStartSectorRows,\r\n\t\tiStartSectorCols,\r\n\t\tstartSectors,\r\n\t\t3,\r\n\t);\r\n\t//console.log(\"Islands1\");\r\n\t//dumpTerrain(iWidth, iHeight);\r\n\tgenerateFractalLayerWithoutHills(\r\n\t\tiWidth,\r\n\t\tiHeight,\r\n\t\tcontinent1,\r\n\t\tcontinent2,\r\n\t\tiStartSectorRows,\r\n\t\tiStartSectorCols,\r\n\t\tstartSectors,\r\n\t\t4,\r\n\t);\r\n\t//console.log(\"Islands2\");\r\n\t//dumpTerrain(iWidth, iHeight);\r\n\tgenerateFractalLayerWithoutHills(\r\n\t\tiWidth,\r\n\t\tiHeight,\r\n\t\tcontinent1,\r\n\t\tcontinent2,\r\n\t\tiStartSectorRows,\r\n\t\tiStartSectorCols,\r\n\t\tstartSectors,\r\n\t\t5,\r\n\t);\r\n\t//console.log(\"Islands3\");\r\n\t//dumpTerrain(iWidth, iHeight);\r\n\tgenerateFractalLayerWithoutHills(\r\n\t\tiWidth,\r\n\t\tiHeight,\r\n\t\tcontinent1,\r\n\t\tcontinent2,\r\n\t\tiStartSectorRows,\r\n\t\tiStartSectorCols,\r\n\t\tstartSectors,\r\n\t\t6,\r\n\t);\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tif (terrain != globals.g_OceanTerrain && terrain != globals.g_CoastTerrain) {\r\n\t\t\t\tTerrainBuilder.removePlotTag(iX, iY, PlotTags.PLOT_TAG_ISLAND);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction generateFractalLayerWithoutHills(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n\tiSize: number,\r\n) {\r\n\tFractalBuilder.create(globals.g_LandmassFractal, iWidth, iHeight, iSize, 0);\r\n\tconst iwater_percent = 50 /*Special Water Percent for Archipelago */ + iSize * 7;\r\n\tconst iWaterHeight: number = FractalBuilder.getHeightFromPercent(globals.g_LandmassFractal, iwater_percent);\r\n\tconst iCenterWeight = 0;\r\n\r\n\tconst iBuffer: number = Math.floor(iHeight / 18.0);\r\n\tconst iBuffer2: number = Math.floor(iWidth / 28.0);\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (\r\n\t\t\t\tGameplayMap.getTerrainType(iX, iY) == globals.g_OceanTerrain ||\r\n\t\t\t\tGameplayMap.getTerrainType(iX, iY) == globals.g_CoastTerrain\r\n\t\t\t) {\r\n\t\t\t\tlet terrain: TerrainType = globals.g_FlatTerrain;\r\n\r\n\t\t\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(iBuffer, \"Random Top/Bottom Edges\");\r\n\t\t\t\tconst iRandom2: number = TerrainBuilder.getRandomNumber(iBuffer2, \"Random Left/Right Edges\");\r\n\r\n\t\t\t\t// If already land here, don't add more\r\n\t\t\t\tif (utilities.isAdjacentToLand(iX, iY)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//  Must be water if at the poles\r\n\t\t\t\telse if (iY < continent1.south + iRandom || iY >= continent1.north - iRandom) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Of if between the continents\r\n\t\t\t\telse if (\r\n\t\t\t\t\tiX < continent1.west + iRandom2 ||\r\n\t\t\t\t\tiX >= continent2.east - iRandom2 ||\r\n\t\t\t\t\t(iX >= continent1.east - iRandom2 && iX < continent2.west + iRandom2)\r\n\t\t\t\t) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst iSector: number = utilities.getSector(\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\t\tcontinent1.south,\r\n\t\t\t\t\t\tcontinent1.north,\r\n\t\t\t\t\t\tcontinent1.west,\r\n\t\t\t\t\t\tcontinent1.east,\r\n\t\t\t\t\t\tcontinent2.west,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tlet iStartSectorWeight = 0;\r\n\t\t\t\t\tlet iFractalWeight = 1;\r\n\t\t\t\t\tif (startSectors[iSector]) {\r\n\t\t\t\t\t\tiStartSectorWeight = 0.7;\r\n\t\t\t\t\t\tiFractalWeight = 0.35;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\tiWaterHeight,\r\n\t\t\t\t\t\tiFractalWeight,\r\n\t\t\t\t\t\tiCenterWeight,\r\n\t\t\t\t\t\tiStartSectorWeight,\r\n\t\t\t\t\t\tcontinent1,\r\n\t\t\t\t\t\tcontinent2,\r\n\t\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\t\tstartSectors,\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\t\tif (iPlotHeight < iWaterHeight) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tif (terrain != globals.g_OceanTerrain && terrain != globals.g_CoastTerrain) {\r\n\t\t\t\tTerrainBuilder.addPlotTag(iX, iY, PlotTags.PLOT_TAG_ISLAND);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction createContinents(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n) {\r\n\tFractalBuilder.create(globals.g_LandmassFractal, iWidth, iHeight, 2, 0);\r\n\tconst iWaterHeight: number = FractalBuilder.getHeightFromPercent(globals.g_LandmassFractal, globals.g_WaterPercent);\r\n\r\n\tconst iBuffer: number = Math.floor(iHeight / 18.0);\r\n\tconst iBuffer2: number = Math.floor(iWidth / 28.0);\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrain: TerrainType = globals.g_FlatTerrain;\r\n\r\n\t\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(iBuffer, \"Random Top/Bottom Edges\");\r\n\t\t\tconst iRandom2: number = TerrainBuilder.getRandomNumber(iBuffer2, \"Random Left/Right Edges\");\r\n\r\n\t\t\t// Initialize plot tag\r\n\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\r\n\t\t\t//  Must be water if at the poles\r\n\t\t\tif (iY < continent1.south + iRandom || iY >= continent1.north - iRandom) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t}\r\n\r\n\t\t\t// Of if between the continents\r\n\t\t\telse if (\r\n\t\t\t\tiX < continent1.west + iRandom2 ||\r\n\t\t\t\tiX >= continent2.east - iRandom2 ||\r\n\t\t\t\t(iX >= continent1.east - iRandom2 && iX < continent2.west + iRandom2)\r\n\t\t\t) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t} else {\r\n\t\t\t\tlet iStartSectorWeight = 0;\r\n\t\t\t\tlet iFractalWeight = 1;\r\n\t\t\t\tif (iStartSectorRows > 0 && iStartSectorCols > 0) {\r\n\t\t\t\t\tiStartSectorWeight = globals.g_StartSectorWeight;\r\n\t\t\t\t\tiFractalWeight = globals.g_FractalWeight;\r\n\t\t\t\t}\r\n\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\tiX,\r\n\t\t\t\t\tiY,\r\n\t\t\t\t\tiWaterHeight,\r\n\t\t\t\t\tiFractalWeight,\r\n\t\t\t\t\tglobals.g_CenterWeight,\r\n\t\t\t\t\tiStartSectorWeight,\r\n\t\t\t\t\tcontinent1,\r\n\t\t\t\t\tcontinent2,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tstartSectors,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\tif (iPlotHeight < iWaterHeight * globals.g_Cutoff) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function expandCoastsPlus(iWest: number, iEast: number, iHeight: number) {\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX: number = iWest; iX < iEast; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tif (terrain == globals.g_OceanTerrain) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tGameplayMap.isAdjacentToShallowWater(iX, iY) &&\r\n\t\t\t\t\tTerrainBuilder.getRandomNumber(2, \"Shallow Water Scater Scatter\") == 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_CoastTerrain);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction createFractal(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\twestContinent: ContinentBoundary,\r\n\teastContinent: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n) {\r\n\tFractalBuilder.create(globals.g_LandmassFractal, iWidth, iHeight, 3, 0);\r\n\tconst iWaterHeight: number = FractalBuilder.getHeightFromPercent(globals.g_LandmassFractal, globals.g_WaterPercent);\r\n\tconst iBuffer: number = Math.floor(iHeight / 13.5);\r\n\tconst iBuffer2: number = Math.floor(iWidth / 21.0);\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrain: TerrainType = globals.g_FlatTerrain;\r\n\r\n\t\t\t// Initialize plot tag\r\n\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\r\n\t\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(iBuffer, \"Random Top/Bottom Edges\");\r\n\t\t\tconst iRandom2: number = TerrainBuilder.getRandomNumber(iBuffer2, \"Random Left/Right Edges\");\r\n\r\n\t\t\tif (iY < westContinent.south + iRandom || iY >= westContinent.north - iRandom) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t} else if (iX == 0) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t}\r\n\r\n\t\t\t// Near wrap\r\n\t\t\telse if (iX < westContinent.west + iRandom2 || iX >= eastContinent.east - iRandom2) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t}\r\n\r\n\t\t\t// Of if between the continents\r\n\t\t\telse if (iX >= westContinent.east - iRandom2 && iX < eastContinent.west + iRandom2) {\r\n\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t} else {\r\n\t\t\t\tlet iStartSectorWeight = 0;\r\n\t\t\t\tlet iFractalWeight = 1;\r\n\t\t\t\tif (iStartSectorRows > 0 && iStartSectorCols > 0) {\r\n\t\t\t\t\tiStartSectorWeight = globals.g_StartSectorWeight;\r\n\t\t\t\t\tiFractalWeight = globals.g_FractalWeight;\r\n\t\t\t\t}\r\n\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\tiX,\r\n\t\t\t\t\tiY,\r\n\t\t\t\t\tiWaterHeight,\r\n\t\t\t\t\tiFractalWeight,\r\n\t\t\t\t\t0.0 /*CenterWeight*/,\r\n\t\t\t\t\tiStartSectorWeight,\r\n\t\t\t\t\twestContinent,\r\n\t\t\t\t\teastContinent,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tstartSectors,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\tif (iPlotHeight < iWaterHeight * (globals.g_FractalWeight + globals.g_StartSectorWeight)) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction createTerraMass(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tcontinent1: ContinentBoundary,\r\n\tcontinent2: ContinentBoundary,\r\n\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tstartSectors: boolean[],\r\n\tbFirst: boolean,\r\n\tiOceanWaterColumns: number,\r\n) {\r\n\tconst iSize: number = TerrainBuilder.getRandomNumber(6, \"Random Land Size\") + 2;\r\n\t//console.log(\"Frac Size \" + iSize);\r\n\tFractalBuilder.create(globals.g_LandmassFractal, iWidth, iHeight, iSize, 0);\r\n\tconst iRanHeight: number = 100 - (iSize * 10 - 20);\r\n\tconst iMaxHeight: number = FractalBuilder.getHeightFromPercent(globals.g_LandmassFractal, iRanHeight);\r\n\r\n\tconst iBuffer: number = Math.floor(iHeight / 18.0);\r\n\tconst iBuffer2: number = Math.floor(iWidth / 28.0);\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrain: TerrainType = globals.g_FlatTerrain;\r\n\r\n\t\t\tconst iRandom: number = TerrainBuilder.getRandomNumber(iBuffer, \"Random Top/Bottom Edges\");\r\n\t\t\tconst iRandom2: number = TerrainBuilder.getRandomNumber(iBuffer2, \"Random Left/Right Edges\");\r\n\r\n\t\t\t// Initialize plot tag\r\n\t\t\tif (bFirst == true) {\r\n\t\t\t\tTerrainBuilder.setPlotTag(iX, iY, PlotTags.PLOT_TAG_NONE);\r\n\t\t\t}\r\n\r\n\t\t\t//  Must be water if at the poles\r\n\t\t\tif (iY < continent1.south + iRandom || iY >= continent1.north - iRandom) {\r\n\t\t\t\tif (bFirst == true) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t\t}\r\n\t\t\t} else if (\r\n\t\t\t\tiX < continent1.west + iRandom2 ||\r\n\t\t\t\tiX >= continent2.east - iRandom2 ||\r\n\t\t\t\t(iX >= continent1.east - iRandom2 && iX < continent2.west + iRandom2)\r\n\t\t\t) {\r\n\t\t\t\tif (bFirst == true) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t\t}\r\n\t\t\t} else if (\r\n\t\t\t\t(bFirst == true && iX > continent1.east + iOceanWaterColumns) ||\r\n\t\t\t\t(bFirst == false && iX < continent2.west - iOceanWaterColumns)\r\n\t\t\t) {\r\n\t\t\t\tlet iStartSectorWeight = 0;\r\n\t\t\t\tlet iFractalWeight = 1;\r\n\t\t\t\tif (iStartSectorRows > 0 && iStartSectorCols > 0) {\r\n\t\t\t\t\tiStartSectorWeight = globals.g_StartSectorWeight;\r\n\t\t\t\t\tiFractalWeight = globals.g_FractalWeight;\r\n\t\t\t\t}\r\n\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\tiX,\r\n\t\t\t\t\tiY,\r\n\t\t\t\t\tiMaxHeight,\r\n\t\t\t\t\tiFractalWeight,\r\n\t\t\t\t\tglobals.g_CenterWeight,\r\n\t\t\t\t\tiStartSectorWeight,\r\n\t\t\t\t\tcontinent1,\r\n\t\t\t\t\tcontinent2,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tstartSectors,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\tif (iPlotHeight < iMaxHeight * globals.g_Cutoff) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t}\r\n\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t} else if (\r\n\t\t\t\t(bFirst == false && iX > continent1.east + iOceanWaterColumns) ||\r\n\t\t\t\t(bFirst == true && iX < continent2.west - iOceanWaterColumns)\r\n\t\t\t) {\r\n\t\t\t\tlet iStartSectorWeight = 0;\r\n\t\t\t\tlet iFractalWeight = 1;\r\n\t\t\t\tif (iStartSectorRows > 0 && iStartSectorCols > 0) {\r\n\t\t\t\t\tiStartSectorWeight = globals.g_StartSectorWeight;\r\n\t\t\t\t\tiFractalWeight = globals.g_FractalWeight;\r\n\t\t\t\t}\r\n\t\t\t\tconst iPlotHeight = utilities.getHeightAdjustingForStartSector(\r\n\t\t\t\t\tiX,\r\n\t\t\t\t\tiY,\r\n\t\t\t\t\tiMaxHeight,\r\n\t\t\t\t\tiFractalWeight,\r\n\t\t\t\t\tglobals.g_CenterWeight,\r\n\t\t\t\t\tiStartSectorWeight,\r\n\t\t\t\t\tcontinent1,\r\n\t\t\t\t\tcontinent2,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tstartSectors,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Finally see whether or not this stays as Land or has too low a score and drops back to water\r\n\t\t\t\tif (iPlotHeight < iMaxHeight * globals.g_Cutoff) {\r\n\t\t\t\t\tterrain = globals.g_OceanTerrain;\r\n\t\t\t\t}\r\n\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["globals.g_OceanWaterColumns","globals.g_AvoidSeamOffset","globals.g_IslandWidth","globals.g_PolarWaterRows","utilities.needHumanNearEquator","utilities.applyCoastalErosionAdjustingForStartSectors","utilities.applyCoastalErosion","utilities.addPlotTags","utilities.createIslands","utilities.adjustOceanPlotTags","globals.g_NavigableRiverTerrain","globals.g_CoastTerrain","globals.g_OceanTerrain","globals.g_LandmassFractal","globals.g_FlatTerrain","utilities.isAdjacentToLand","utilities.getSector","utilities.getHeightAdjustingForStartSector","globals.g_WaterPercent","globals.g_StartSectorWeight","globals.g_FractalWeight","globals.g_CenterWeight","globals.g_Cutoff"],"mappings":"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"}