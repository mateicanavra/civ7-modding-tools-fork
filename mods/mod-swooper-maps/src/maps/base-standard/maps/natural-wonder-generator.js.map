{"version":3,"file":"natural-wonder-generator.js","sources":["../../../modules/base-standard/maps/natural-wonder-generator.ts"],"sourcesContent":["import * as utilities from \"#base/maps/map-utilities.js\";\r\n\r\n/** Add Natural Wonders to the map.\r\n * @param iWidth - the width of the map\r\n * @param iHeight - the height of the map\r\n * @param iNumNaturalWonders - the total number of natural wonders *requested*.  The function may not be able to place that many wonders\r\n */\r\nexport function addNaturalWonders(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tiNumNaturalWonders: number,\r\n\twonderEventActive = false,\r\n\trequestedWonders: string[] = [],\r\n) {\r\n\tif (GameInfo.Feature_NaturalWonders.length < iNumNaturalWonders) {\r\n\t\tiNumNaturalWonders = GameInfo.Feature_NaturalWonders.length;\r\n\t}\r\n\r\n\tconsole.log(\"Generating \" + iNumNaturalWonders + \" Natural Wonders\");\r\n\r\n\tif (wonderEventActive) {\r\n\t\tconsole.log(\"Race to wonders event registered\");\r\n\t}\r\n\r\n\tplaceWonders(iWidth, iHeight, iNumNaturalWonders, wonderEventActive, requestedWonders);\r\n}\r\n\r\n/** Try and place the requested number of Natural Wonders\r\n * @param iWidth - the width of the map\r\n * @param iHeight - the height of the map\r\n * @param iNumNaturalWonders - the total number of natural wonders *requested*.  The function may not be able to place that many wonders\r\n */\r\nfunction placeWonders(\r\n\tiWidth: number,\r\n\tiHeight: number,\r\n\tiNumNaturalWonders: number,\r\n\twonderEventActive: boolean,\r\n\trequestedWonders: string[],\r\n) {\r\n\tlet aPossibleWonders: number[] = []; // Will contain the *hash*\r\n\tlet iPlacedWonders = 0;\r\n\r\n\t// See if there are any \"requested\" Natural Wonders\r\n\tconst requests: number[] = [];\r\n\tconst configRequests = Configuration.getMapValue(\"RequestedNaturalWonders\");\r\n\tif (configRequests) {\r\n\t\t// Convert any strings to hashes\r\n\t\tfor (const requested of configRequests) {\r\n\t\t\tif (typeof requested == \"string\") {\r\n\t\t\t\trequests.push(Database.makeHash(requested));\r\n\t\t\t} else if (typeof requested == \"number\") {\r\n\t\t\t\trequests.push(requested);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Get a list of all the wonders available.\r\n\t// This previously tried to see if the wonder could be placed\r\n\t// before adding to the list, but we are going to do that\r\n\t// while placing as well, and it is an expensive operation.\r\n\tfor (const nwDef of GameInfo.Feature_NaturalWonders) {\r\n\t\t// handle special case for things like BERMUDA TRIANGLE and MOUNT_EVEREST,\r\n\t\t// only available with and after live event\r\n\t\tif (requestedWonders.includes(nwDef.FeatureType)) {\r\n\t\t\trequests.push(nwDef.$hash);\r\n\t\t}\r\n\r\n\t\taPossibleWonders.push(nwDef.$hash);\r\n\t}\r\n\r\n\tif (aPossibleWonders.length > 0) {\r\n\t\t// Shuffle them, so we don't pick in the order they are in the database every time.\r\n\t\taPossibleWonders = utilities.shuffle(aPossibleWonders);\r\n\t\t// However, float any 'requested' ones to the top\r\n\t\tfor (const requested of requests) {\r\n\t\t\tconst index = aPossibleWonders.indexOf(requested);\r\n\t\t\tif (index >= 1) {\r\n\t\t\t\t// Move to the front\r\n\t\t\t\taPossibleWonders.splice(index, 1);\r\n\t\t\t\taPossibleWonders.unshift(requested);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// First loop -- this if for \"PlaceFirst\" ones (such as Waterfalls, where we have trouble finding spots for them)\r\n\t\tfor (let iI = 0; iI < aPossibleWonders.length; iI++) {\r\n\t\t\tif (iPlacedWonders < iNumNaturalWonders) {\r\n\t\t\t\tconst eFeature: FeatureType = aPossibleWonders[iI];\r\n\r\n\t\t\t\tconst nwDef = GameInfo.Feature_NaturalWonders.lookup(eFeature);\r\n\t\t\t\tif (nwDef != null) {\r\n\t\t\t\t\tif (nwDef.PlaceFirst == true) {\r\n\t\t\t\t\t\t// To get a proper random location for the NW, collect all the possible locations\r\n\t\t\t\t\t\t// and pick a randome one from that.\r\n\t\t\t\t\t\tconst aPossibleLocations: number[] = [];\r\n\t\t\t\t\t\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\t\t\t\t\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\t\t\t\t\t\tconst iElevation = GameplayMap.getElevation(iX, iY);\r\n\r\n\t\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\t\tFeature: eFeature,\r\n\t\t\t\t\t\t\t\t\tDirection: nwDef.Direction,\r\n\t\t\t\t\t\t\t\t\tElevation: iElevation,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tif (TerrainBuilder.canHaveFeatureParam(iX, iY, featureParam)) {\r\n\t\t\t\t\t\t\t\t\t// Indicies will be smaller, so convert\r\n\t\t\t\t\t\t\t\t\tif (wonderEventActive) {\r\n\t\t\t\t\t\t\t\t\t\tif (GameplayMap.getHemisphere(iX) != GameplayMap.getPrimaryHemisphere()) {\r\n\t\t\t\t\t\t\t\t\t\t\taPossibleLocations.push(GameplayMap.getIndexFromXY(iX, iY));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\taPossibleLocations.push(GameplayMap.getIndexFromXY(iX, iY));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Find one?\r\n\t\t\t\t\t\tif (aPossibleLocations.length > 0) {\r\n\t\t\t\t\t\t\tconst randomIndex = TerrainBuilder.getRandomNumber(\r\n\t\t\t\t\t\t\t\taPossibleLocations.length,\r\n\t\t\t\t\t\t\t\t\"Natural Wonder placement location\",\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tconst placementLocation: float2 = GameplayMap.getLocationFromIndex(\r\n\t\t\t\t\t\t\t\taPossibleLocations[randomIndex],\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tconst iElevation = GameplayMap.getElevation(placementLocation.x, placementLocation.y);\r\n\r\n\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\tFeature: eFeature,\r\n\t\t\t\t\t\t\t\tDirection: nwDef.Direction,\r\n\t\t\t\t\t\t\t\tElevation: iElevation,\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tconsole.log(\"FeatureParam Elevation: \" + featureParam.Elevation);\r\n\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(placementLocation.x, placementLocation.y, featureParam);\r\n\r\n\t\t\t\t\t\t\tiPlacedWonders++;\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"Placed A Top Priority Natural Wonder \" +\r\n\t\t\t\t\t\t\t\t\tnwDef.FeatureType +\r\n\t\t\t\t\t\t\t\t\t\" At X:\" +\r\n\t\t\t\t\t\t\t\t\tplacementLocation.x +\r\n\t\t\t\t\t\t\t\t\t\" Y:\" +\r\n\t\t\t\t\t\t\t\t\tplacementLocation.y +\r\n\t\t\t\t\t\t\t\t\t\" out of \" +\r\n\t\t\t\t\t\t\t\t\taPossibleLocations.length +\r\n\t\t\t\t\t\t\t\t\t\" possible locations.\",\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"No valid location for \" + nwDef.FeatureType);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Second loop -- now ones that don't have \"PlaceFirst\"\r\n\t\tfor (let iI = 0; iI < aPossibleWonders.length; iI++) {\r\n\t\t\tif (iPlacedWonders < iNumNaturalWonders) {\r\n\t\t\t\tconst eFeature: FeatureType = aPossibleWonders[iI];\r\n\r\n\t\t\t\tconst nwDef = GameInfo.Feature_NaturalWonders.lookup(eFeature);\r\n\t\t\t\tif (nwDef != null && nwDef.PlaceFirst == false) {\r\n\t\t\t\t\tlet iPlacementPercent: number = nwDef.PlacementPercentage;\r\n\t\t\t\t\tif (requests.indexOf(eFeature) != -1) {\r\n\t\t\t\t\t\tiPlacementPercent = 100;\r\n\t\t\t\t\t\tconsole.log(nwDef.FeatureType + \" is requested to be placed.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(100, \"Random Natural Wonder Chance\");\r\n\t\t\t\t\tif (iPlacementPercent > iRoll) {\r\n\t\t\t\t\t\t// Ok, we want this NW.\r\n\r\n\t\t\t\t\t\t// To get a proper random location for the NW, collect all the possible locations\r\n\t\t\t\t\t\t// and pick a randome one from that.\r\n\t\t\t\t\t\tconst aPossibleLocations: number[] = [];\r\n\t\t\t\t\t\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\t\t\t\t\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\t\t\t\t\t\tconst iElevation = GameplayMap.getElevation(iX, iY);\r\n\t\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\t\tFeature: eFeature,\r\n\t\t\t\t\t\t\t\t\tDirection: nwDef.Direction,\r\n\t\t\t\t\t\t\t\t\tElevation: iElevation,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tif (TerrainBuilder.canHaveFeatureParam(iX, iY, featureParam)) {\r\n\t\t\t\t\t\t\t\t\t// Indicies will be smaller, so convert\r\n\t\t\t\t\t\t\t\t\tif (wonderEventActive) {\r\n\t\t\t\t\t\t\t\t\t\tif (GameplayMap.getHemisphere(iX) != GameplayMap.getPrimaryHemisphere()) {\r\n\t\t\t\t\t\t\t\t\t\t\taPossibleLocations.push(GameplayMap.getIndexFromXY(iX, iY));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\taPossibleLocations.push(GameplayMap.getIndexFromXY(iX, iY));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Find one?\r\n\t\t\t\t\t\tif (aPossibleLocations.length > 0) {\r\n\t\t\t\t\t\t\tconst randomIndex = TerrainBuilder.getRandomNumber(\r\n\t\t\t\t\t\t\t\taPossibleLocations.length,\r\n\t\t\t\t\t\t\t\t\"Natural Wonder placement location\",\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tconst placementLocation: float2 = GameplayMap.getLocationFromIndex(\r\n\t\t\t\t\t\t\t\taPossibleLocations[randomIndex],\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tconst iElevation = GameplayMap.getElevation(placementLocation.x, placementLocation.y);\r\n\r\n\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\tFeature: eFeature,\r\n\t\t\t\t\t\t\t\tDirection: nwDef.Direction,\r\n\t\t\t\t\t\t\t\tElevation: iElevation,\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tconsole.log(\"FeatureParam Elevation: \" + featureParam.Elevation);\r\n\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(placementLocation.x, placementLocation.y, featureParam);\r\n\r\n\t\t\t\t\t\t\tiPlacedWonders++;\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"Placed A Natural Wonder \" +\r\n\t\t\t\t\t\t\t\t\tnwDef.FeatureType +\r\n\t\t\t\t\t\t\t\t\t\" At X:\" +\r\n\t\t\t\t\t\t\t\t\tplacementLocation.x +\r\n\t\t\t\t\t\t\t\t\t\" Y:\" +\r\n\t\t\t\t\t\t\t\t\tplacementLocation.y +\r\n\t\t\t\t\t\t\t\t\t\" out of \" +\r\n\t\t\t\t\t\t\t\t\taPossibleLocations.length +\r\n\t\t\t\t\t\t\t\t\t\" possible locations.\",\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"No valid location for \" + nwDef.FeatureType);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["utilities.shuffle"],"mappings":"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"}