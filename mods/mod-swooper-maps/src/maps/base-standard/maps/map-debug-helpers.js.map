{"version":3,"file":"map-debug-helpers.js","sources":["../../../modules/base-standard/maps/map-debug-helpers.ts"],"sourcesContent":["import * as globals from \"#base/maps/map-globals.js\";\r\n\r\nexport function dumpStartSectors(sectors: boolean[]) {\r\n\tfor (let iX = 0; iX < sectors.length; iX++) {\r\n\t\tconsole.log(iX + \": \" + sectors[iX]);\r\n\t}\r\n}\r\n\r\nexport function dumpContinents(iWidth: number, iHeight: number) {\r\n\t// Dump it out as an ASCII map to \"Scripting.log\"\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrainString = \" \";\r\n\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\tconst continent = GameplayMap.getContinentType(iX, iY);\r\n\t\t\t\tif (typeof continent == \"number\") {\r\n\t\t\t\t\tterrainString = Math.floor(continent % 10).toString();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstr += terrainString + \" \";\r\n\t\t}\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n\r\nexport function dumpTerrain(iWidth: number, iHeight: number) {\r\n\t// Dump it out as an ASCII map to \"Scripting.log\"\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tlet terrainString = \" \";\r\n\t\t\tif (terrain == globals.g_FlatTerrain) {\r\n\t\t\t\tterrainString = \".\";\r\n\t\t\t} else if (terrain == globals.g_HillTerrain) {\r\n\t\t\t\tterrainString = \"^\";\r\n\t\t\t} else if (terrain == globals.g_MountainTerrain) {\r\n\t\t\t\tterrainString = \"M\";\r\n\t\t\t} else if (terrain == globals.g_OceanTerrain) {\r\n\t\t\t\tterrainString = \"~\";\r\n\t\t\t}\r\n\t\t\tstr += terrainString + \" \";\r\n\t\t}\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n\r\nexport function dumpElevation(iWidth: number, iHeight: number) {\r\n\t// Dump it out as an ASCII map to \"Scripting.log\"\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\tconst elevation: number = GameplayMap.getElevation(iX, iY);\r\n\t\t\t\tlet elevationToDisplay = \" \";\r\n\t\t\t\tconst iNumToDisplay: number = Math.floor(elevation / 100);\r\n\t\t\t\televationToDisplay = iNumToDisplay.toString();\r\n\t\t\t\tstr += elevationToDisplay + \" \";\r\n\t\t\t} else {\r\n\t\t\t\tstr += \"  \";\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n\r\nexport function dumpRainfall(iWidth: number, iHeight: number) {\r\n\t// Dump it out as an ASCII map to \"Scripting.log\"\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\tconst rainfall: number = GameplayMap.getRainfall(iX, iY);\r\n\t\t\t\tlet rainfallToDisplay = \" \";\r\n\t\t\t\tif (rainfall == globals.g_StandardRainfall + globals.g_MountainTopIncrease) {\r\n\t\t\t\t\trainfallToDisplay = \"D\";\r\n\t\t\t\t} else if (rainfall == globals.g_StandardRainfall) {\r\n\t\t\t\t\trainfallToDisplay = \"s\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst iNumToDisplay: number = Math.floor(rainfall / 10);\r\n\t\t\t\t\trainfallToDisplay = iNumToDisplay.toString();\r\n\t\t\t\t}\r\n\t\t\t\tstr += rainfallToDisplay + \" \";\r\n\t\t\t} else {\r\n\t\t\t\tstr += \"  \";\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n\r\nexport function dumpBiomes(iWidth: number, iHeight: number) {\r\n\t// Dump it out as an ASCII map to \"Scripting.log\"\r\n\tconst biomes: number[] = new Array(GameInfo.Biomes.length);\r\n\r\n\tfor (let biomeIdx = 0; biomeIdx < GameInfo.Biomes.length; biomeIdx++) {\r\n\t\tbiomes[biomeIdx] = 0;\r\n\t}\r\n\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst biome: BiomeType = GameplayMap.getBiomeType(iX, iY);\r\n\t\t\tlet biomeString = \" \";\r\n\t\t\tif (biome == globals.g_MarineBiome) {\r\n\t\t\t\tbiomeString = \" \";\r\n\t\t\t} else if (biome == globals.g_PlainsBiome) {\r\n\t\t\t\tbiomeString = \"_\";\r\n\t\t\t} else if (biome == globals.g_DesertBiome) {\r\n\t\t\t\tbiomeString = \".\";\r\n\t\t\t} else if (biome == globals.g_TropicalBiome) {\r\n\t\t\t\tbiomeString = \"#\";\r\n\t\t\t} else if (biome == globals.g_TundraBiome) {\r\n\t\t\t\tbiomeString = \"*\";\r\n\t\t\t} else if (biome == globals.g_GrasslandBiome) {\r\n\t\t\t\tbiomeString = \"~\";\r\n\t\t\t}\r\n\t\t\tstr += biomeString + \" \";\r\n\r\n\t\t\tif (typeof biome == \"number\") {\r\n\t\t\t\tbiomes[biome]++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconsole.log(str);\r\n\t}\r\n\r\n\tfor (let biomeIDx = 0; biomeIDx < GameInfo.Biomes.length; biomeIDx++) {\r\n\t\tlet str = \"\";\r\n\r\n\t\tstr += GameInfo.Biomes[biomeIDx].Name + \" ( \" + biomeIDx + \" ) \" + \" Count: \" + biomes[biomeIDx];\r\n\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n\r\nfunction getFeatureTypeIndex(name: string): FeatureType {\r\n\tconst def = GameInfo.Features.lookup(name);\r\n\tif (def) {\r\n\t\treturn def.$index;\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nexport function dumpFeatures(iWidth: number, iHeight: number) {\r\n\t// Dump it out as an ASCII map to \"Scripting.log\"\r\n\tconsole.log(\"Feature placement\");\r\n\r\n\tconst displayTypes: { index: FeatureType; ch: string }[] = [\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_SAGEBRUSH_STEPPE\"), ch: \"P\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_OASIS\"), ch: \"O\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_DESERT_FLOODPLAIN_MINOR\"), ch: \"d\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_DESERT_FLOODPLAIN_NAVIGABLE\"), ch: \"d\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_FOREST\"), ch: \"F\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_MARSH\"), ch: \"M\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_GRASSLAND_FLOODPLAIN_MINOR\"), ch: \"g\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_GRASSLAND_FLOODPLAIN_NAVIGABLE\"), ch: \"g\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_REEF\"), ch: \"E\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_COLD_REEF\"), ch: \"E\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_ICE\"), ch: \"I\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_SAVANNA_WOODLAND\"), ch: \"T\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_WATERING_HOLE\"), ch: \"W\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_PLAINS_FLOODPLAIN_MINOR\"), ch: \"p\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_PLAINS_FLOODPLAIN_NAVIGABLE\"), ch: \"p\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_RAINFOREST\"), ch: \"R\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_MANGROVE\"), ch: \"G\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_TROPICAL_FLOODPLAIN_MINOR\"), ch: \"t\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_TROPICAL_FLOODPLAIN_NAVIGABLE\"), ch: \"t\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_TAIGA\"), ch: \"T\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_TUNDRA_BOG\"), ch: \"B\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_TUNDRA_FLOODPLAIN_MINOR\"), ch: \"u\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_TUNDRA_FLOODPLAIN_NAVIGABLE\"), ch: \"u\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_VOLCANO\"), ch: \"%\" },\r\n\t\t// Wonders\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_VALLEY_OF_FLOWERS\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_BARRIER_REEF\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_BERMUDA_TRIANGLE\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_REDWOOD_FOREST\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_GRAND_CANYON\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_GULLFOSS\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_IGUAZU_FALLS\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_KILIMANJARO\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_ZHANGJIAJIE\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_THERA\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_TORRES_DEL_PAINE\"), ch: \"@\" },\r\n\t\t{ index: getFeatureTypeIndex(\"FEATURE_ULURU\"), ch: \"@\" },\r\n\t];\r\n\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet featureString: string = GameplayMap.isWater(iX, iY) == false ? \".\" : \" \";\r\n\t\t\tconst feature: FeatureType = GameplayMap.getFeatureType(iX, iY);\r\n\t\t\tif (feature != FeatureTypes.NO_FEATURE) {\r\n\t\t\t\tfor (const entry of displayTypes) {\r\n\t\t\t\t\tif (entry.index == feature) {\r\n\t\t\t\t\t\tfeatureString = entry.ch;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tstr += featureString + \" \";\r\n\t\t}\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n\r\nexport function dumpResources(iWidth: number, iHeight: number) {\r\n\t// Dump it out as an ASCII map to \"Scripting.log\"\r\n\tconst resources: number[] = new Array(GameInfo.Resources.length);\r\n\r\n\tfor (var resourceIdx = 0; resourceIdx < GameInfo.Resources.length; resourceIdx++) {\r\n\t\tresources[resourceIdx] = 0;\r\n\t}\r\n\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst resource: ResourceType = GameplayMap.getResourceType(iX, iY);\r\n\t\t\tlet resourcestring = \" \";\r\n\t\t\tif (resource != ResourceTypes.NO_RESOURCE && typeof resource == \"number\") {\r\n\t\t\t\tresourcestring = resource.toString();\r\n\t\t\t\tresources[resource]++;\r\n\t\t\t} else {\r\n\t\t\t\tif (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\t\tresourcestring = \"*\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tstr += resourcestring + \" \";\r\n\t\t}\r\n\r\n\t\tconsole.log(str);\r\n\t}\r\n\r\n\tlet totalCount = 0;\r\n\tfor (var resourceIdx = 0; resourceIdx < GameInfo.Resources.length; resourceIdx++) {\r\n\t\tlet str = \"\";\r\n\r\n\t\tstr += GameInfo.Resources[resourceIdx].Name + \" ( \" + resourceIdx + \" ) \" + \" Count: \" + resources[resourceIdx];\r\n\t\ttotalCount += resources[resourceIdx];\r\n\r\n\t\tconsole.log(str);\r\n\t}\r\n\r\n\tconsole.log(\"Total resources on map after generation: \" + totalCount);\r\n}\r\n\r\n// Prints custom strings/characters for noise values based on a predicate\r\nexport function dumpNoisePredicate(iWidth: number, iHeight: number, noise: number[], pred: (value: number) => string) {\r\n\tconsole.log(\"NOISE MAP (Predicate)\");\r\n\tif (!pred) {\r\n\t\tconsole.log(\"dumpNoiseInterp error: no predicate provided\");\r\n\t\treturn;\r\n\t}\r\n\tif (noise.length != iWidth * iHeight) {\r\n\t\tconsole.log(\"dumpNoiseInterp error: noise map does not match map width*height\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst index = iY * iWidth + iX;\r\n\t\t\tstr += pred(noise[index]);\r\n\t\t}\r\n\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n"],"names":["globals.g_FlatTerrain","globals.g_HillTerrain","globals.g_MountainTerrain","globals.g_OceanTerrain","globals.g_StandardRainfall","globals.g_MountainTopIncrease","globals.g_MarineBiome","globals.g_PlainsBiome","globals.g_DesertBiome","globals.g_TropicalBiome","globals.g_TundraBiome","globals.g_GrasslandBiome"],"mappings":"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"}