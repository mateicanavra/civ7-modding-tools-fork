{"version":3,"file":"resource-generator.js","sources":["../../../modules/base-standard/maps/resource-generator.ts"],"sourcesContent":["import * as utilities from \"#base/maps/map-utilities.js\";\r\n\r\nexport function generateResources(iWidth: number, iHeight: number) {\r\n\tconst resourceWeight: number[] = new Array(GameInfo.Resources.length);\r\n\tconst resourceRunningWeight: number[] = new Array(GameInfo.Resources.length);\r\n\tconst importantResourceRegionalCountHome: number[] = new Array(GameInfo.Resources.length);\r\n\tconst importantResourceRegionalCountDistant: number[] = new Array(GameInfo.Resources.length);\r\n\tconst resourcesPlacedCount: number[] = new Array(GameInfo.Resources.length);\r\n\tlet minimumResourcePlacementModifer = utilities.getMinimumResourcePlacementModifier();\r\n\tif (minimumResourcePlacementModifer == undefined) {\r\n\t\tminimumResourcePlacementModifer = 0;\r\n\t}\r\n\t//Initial Resource data\r\n\tfor (let resourceIdx = 0; resourceIdx < GameInfo.Resources.length; resourceIdx++) {\r\n\t\tresourceWeight[resourceIdx] = 0;\r\n\t\tresourceRunningWeight[resourceIdx] = 0;\r\n\t\tresourcesPlacedCount[resourceIdx] = 0;\r\n\t}\r\n\r\n\t// Find all resources\r\n\tconst aResourceTypes: number[] = [];\r\n\tconst resources: ResourceType[] = ResourceBuilder.getGeneratedMapResources();\r\n\tfor (let ridx = 0; ridx < resources.length; ++ridx) {\r\n\t\tconst resourceInfo = GameInfo.Resources.lookup(resources[ridx]);\r\n\t\tif (resourceInfo && resourceInfo.Tradeable) {\r\n\t\t\tresourceWeight[resourceInfo.$index] = resourceInfo.Weight;\r\n\t\t\taResourceTypes.push(resourceInfo.$index);\r\n\t\t\timportantResourceRegionalCountHome[resourceInfo.$index] = 0;\r\n\t\t\timportantResourceRegionalCountDistant[resourceInfo.$index] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t//Generate Poisson Map\r\n\tconst seed = GameplayMap.getRandomSeed();\r\n\tconst avgDistanceBetweenPoints = 3;\r\n\tconst normalizedRangeSmoothing = 2;\r\n\tconst poisson = TerrainBuilder.generatePoissonMap(seed, avgDistanceBetweenPoints, normalizedRangeSmoothing);\r\n\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet plotTag = PlotTags.PLOT_TAG_NONE;\r\n\t\t\tif (GameplayMap.getPlotTag(iX, iY) & PlotTags.PLOT_TAG_EAST_LANDMASS) {\r\n\t\t\t\tplotTag = PlotTags.PLOT_TAG_EAST_LANDMASS;\r\n\t\t\t} else if (GameplayMap.getPlotTag(iX, iY) & PlotTags.PLOT_TAG_WEST_LANDMASS) {\r\n\t\t\t\tplotTag = PlotTags.PLOT_TAG_WEST_LANDMASS;\r\n\t\t\t}\r\n\t\t\tconst index = iY * iWidth + iX;\r\n\t\t\tif (poisson[index] >= 1) {\r\n\t\t\t\t//Generate a list of valid resources at this plot\r\n\t\t\t\tconst resources: number[] = [];\r\n\r\n\t\t\t\taResourceTypes.forEach((resourceIdx) => {\r\n\t\t\t\t\t//let iBuffer: number = Math.floor(iWidth / 28.0);\r\n\t\t\t\t\tconst assignedLandmass = ResourceBuilder.getResourceLandmass(resourceIdx);\r\n\t\t\t\t\tif (assignedLandmass == utilities.AVAILABLE_ON_ALL_LANDMASSES_ID) {\r\n\t\t\t\t\t\tif (canHaveFlowerPlot(iX, iY, resourceIdx)) {\r\n\t\t\t\t\t\t\tresources.push(resourceIdx);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\tassignedLandmass == utilities.EAST_LAND_MASS_ID &&\r\n\t\t\t\t\t\tplotTag == PlotTags.PLOT_TAG_EAST_LANDMASS\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif (canHaveFlowerPlot(iX, iY, resourceIdx)) {\r\n\t\t\t\t\t\t\tresources.push(resourceIdx);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\tassignedLandmass == utilities.WEST_LAND_MASS_ID &&\r\n\t\t\t\t\t\tplotTag == PlotTags.PLOT_TAG_WEST_LANDMASS\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif (canHaveFlowerPlot(iX, iY, resourceIdx)) {\r\n\t\t\t\t\t\t\tresources.push(resourceIdx);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//Select the heighest weighted (ties are a coin flip) resource\r\n\t\t\t\tif (resources.length > 0) {\r\n\t\t\t\t\tlet resourceChosen: ResourceType = ResourceTypes.NO_RESOURCE;\r\n\t\t\t\t\tlet resourceChosenIndex = 0;\r\n\t\t\t\t\tfor (let iI = 0; iI < resources.length; iI++) {\r\n\t\t\t\t\t\tif (resourceChosen == ResourceTypes.NO_RESOURCE) {\r\n\t\t\t\t\t\t\tresourceChosen = resources[iI];\r\n\t\t\t\t\t\t\tresourceChosenIndex = resources[iI];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (resourceRunningWeight[resources[iI]] > resourceRunningWeight[resourceChosenIndex]) {\r\n\t\t\t\t\t\t\t\tresourceChosen = resources[iI];\r\n\t\t\t\t\t\t\t\tresourceChosenIndex = resources[iI];\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tresourceRunningWeight[resources[iI]] == resourceRunningWeight[resourceChosenIndex]\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(2, \"Resource Scatter\");\r\n\t\t\t\t\t\t\t\tif (iRoll >= 1) {\r\n\t\t\t\t\t\t\t\t\tresourceChosen = resources[iI];\r\n\t\t\t\t\t\t\t\t\tresourceChosenIndex = resources[iI];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//Place the selected resource\r\n\t\t\t\t\tif (resourceChosen != ResourceTypes.NO_RESOURCE) {\r\n\t\t\t\t\t\tconst iResourcePlotIndex: number = getFlowerPlot(iX, iY, resourceChosen);\r\n\t\t\t\t\t\tif (iResourcePlotIndex != -1) {\r\n\t\t\t\t\t\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(iResourcePlotIndex);\r\n\t\t\t\t\t\t\tconst iResourceX: number = iLocation.x;\r\n\t\t\t\t\t\t\tconst iResourceY: number = iLocation.y;\r\n\t\t\t\t\t\t\tResourceBuilder.setResourceType(iResourceX, iResourceY, resourceChosen);\r\n\t\t\t\t\t\t\tresourceRunningWeight[resourceChosenIndex] -= resourceWeight[resourceChosenIndex];\r\n\t\t\t\t\t\t\tresourcesPlacedCount[resourceChosenIndex]++;\r\n\r\n\t\t\t\t\t\t\tplotTag == PlotTags.PLOT_TAG_EAST_LANDMASS\r\n\t\t\t\t\t\t\t\t? importantResourceRegionalCountHome[resourceChosenIndex]++\r\n\t\t\t\t\t\t\t\t: importantResourceRegionalCountDistant[resourceChosenIndex]++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"Resource Index Failure\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(\"Resource Type Failure\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//Some resources are required for gameplay for the age, if not enough were generated, place them on the map now. Some differences from transition placement but might want to look at making a utility function for these placements.\r\n\tlet checkHomeHemisphereLP = true;\r\n\tlet checkDistantHemisphereLP = true;\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet plotTag = PlotTags.PLOT_TAG_NONE;\r\n\t\t\tif (GameplayMap.getPlotTag(iX, iY) & PlotTags.PLOT_TAG_EAST_LANDMASS) {\r\n\t\t\t\tplotTag = PlotTags.PLOT_TAG_EAST_LANDMASS;\r\n\t\t\t} else if (GameplayMap.getPlotTag(iX, iY) & PlotTags.PLOT_TAG_WEST_LANDMASS) {\r\n\t\t\t\tplotTag = PlotTags.PLOT_TAG_WEST_LANDMASS;\r\n\t\t\t}\r\n\t\t\tconst resourceAtLocation = GameplayMap.getResourceType(iX, iY);\r\n\t\t\tif (resourceAtLocation == ResourceTypes.NO_RESOURCE) {\r\n\t\t\t\tconst resourcesEligible: number[] = [];\r\n\t\t\t\tfor (let i = 0; i < resourcesPlacedCount.length; ++i) {\r\n\t\t\t\t\tconst resourceToPlace = GameInfo.Resources.lookup(i);\r\n\t\t\t\t\tif (resourceToPlace) {\r\n\t\t\t\t\t\tconst assignedLandmass = ResourceBuilder.getResourceLandmass(i);\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tassignedLandmass == utilities.AVAILABLE_ON_ALL_LANDMASSES_ID ||\r\n\t\t\t\t\t\t\t(assignedLandmass == utilities.EAST_LAND_MASS_ID &&\r\n\t\t\t\t\t\t\t\tplotTag == PlotTags.PLOT_TAG_EAST_LANDMASS) ||\r\n\t\t\t\t\t\t\t(assignedLandmass == utilities.WEST_LAND_MASS_ID &&\r\n\t\t\t\t\t\t\t\tplotTag == PlotTags.PLOT_TAG_WEST_LANDMASS)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconst minimumPerLandMass =\r\n\t\t\t\t\t\t\t\tresourceToPlace.MinimumPerHemisphere > 0\r\n\t\t\t\t\t\t\t\t\t? resourceToPlace.MinimumPerHemisphere + minimumResourcePlacementModifer\r\n\t\t\t\t\t\t\t\t\t: 0;\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t(plotTag == PlotTags.PLOT_TAG_EAST_LANDMASS &&\r\n\t\t\t\t\t\t\t\t\timportantResourceRegionalCountHome[i] < minimumPerLandMass) ||\r\n\t\t\t\t\t\t\t\t(plotTag == PlotTags.PLOT_TAG_WEST_LANDMASS &&\r\n\t\t\t\t\t\t\t\t\timportantResourceRegionalCountDistant[i] < minimumPerLandMass)\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t//Once LP class checks are complete, no need to do them anymore\r\n\t\t\t\t\t\t\t\tif (checkHomeHemisphereLP && plotTag == PlotTags.PLOT_TAG_EAST_LANDMASS) {\r\n\t\t\t\t\t\t\t\t\tcheckHomeHemisphereLP = ResourceBuilder.isResourceClassRequiredForLegacyPath(\r\n\t\t\t\t\t\t\t\t\t\ti,\r\n\t\t\t\t\t\t\t\t\t\tplotTag,\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else if (checkDistantHemisphereLP && plotTag == PlotTags.PLOT_TAG_WEST_LANDMASS) {\r\n\t\t\t\t\t\t\t\t\tcheckDistantHemisphereLP = ResourceBuilder.isResourceClassRequiredForLegacyPath(\r\n\t\t\t\t\t\t\t\t\t\ti,\r\n\t\t\t\t\t\t\t\t\t\tplotTag,\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (ResourceBuilder.isResourceRequiredForAge(i)) {\r\n\t\t\t\t\t\t\t\t\tif (ResourceBuilder.canHaveResource(iX, iY, i, false)) {\r\n\t\t\t\t\t\t\t\t\t\t//Try not to place adjacent to other resources. The new Poission map causes the old one to be ignored, which causes clumping.\r\n\t\t\t\t\t\t\t\t\t\tlet hasAdjResource = false;\r\n\t\t\t\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\t\t\t\tlet iDirection: DirectionTypes = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tiDirection < DirectionTypes.NUM_DIRECTION_TYPES;\r\n\t\t\t\t\t\t\t\t\t\t\tiDirection++\r\n\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\tconst iIndex: number = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\t\t\t\t\t\t\t\t\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(iIndex);\r\n\t\t\t\t\t\t\t\t\t\t\tconst iAdjacentX: number = GameplayMap.getAdjacentPlotLocation(\r\n\t\t\t\t\t\t\t\t\t\t\t\tiLocation,\r\n\t\t\t\t\t\t\t\t\t\t\t\tiDirection,\r\n\t\t\t\t\t\t\t\t\t\t\t).x;\r\n\t\t\t\t\t\t\t\t\t\t\tconst iAdjacentY: number = GameplayMap.getAdjacentPlotLocation(\r\n\t\t\t\t\t\t\t\t\t\t\t\tiLocation,\r\n\t\t\t\t\t\t\t\t\t\t\t\tiDirection,\r\n\t\t\t\t\t\t\t\t\t\t\t).y;\r\n\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\tGameplayMap.getResourceType(iAdjacentX, iAdjacentY) !=\r\n\t\t\t\t\t\t\t\t\t\t\t\tResourceTypes.NO_RESOURCE\r\n\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\thasAdjResource = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (!hasAdjResource) {\r\n\t\t\t\t\t\t\t\t\t\t\tresourcesEligible.push(i);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Select the heighest weighted (ties are a coin flip) resource\r\n\t\t\t\tlet resourceChosenIndex = -1;\r\n\t\t\t\tif (resourcesEligible.length > 0) {\r\n\t\t\t\t\tlet resourceChosen: ResourceType = ResourceTypes.NO_RESOURCE;\r\n\t\t\t\t\tfor (let iI = 0; iI < resourcesEligible.length; iI++) {\r\n\t\t\t\t\t\tif (resourceChosen == ResourceTypes.NO_RESOURCE) {\r\n\t\t\t\t\t\t\tresourceChosen = resourcesEligible[iI];\r\n\t\t\t\t\t\t\tresourceChosenIndex = resourcesEligible[iI];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tresourceRunningWeight[resourcesEligible[iI]] >\r\n\t\t\t\t\t\t\t\tresourceRunningWeight[resourceChosenIndex]\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tresourceChosen = resourcesEligible[iI];\r\n\t\t\t\t\t\t\t\tresourceChosenIndex = resourcesEligible[iI];\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tresourceRunningWeight[resourcesEligible[iI]] ==\r\n\t\t\t\t\t\t\t\tresourceRunningWeight[resourceChosenIndex]\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(2, \"Resource Scatter\");\r\n\t\t\t\t\t\t\t\tif (iRoll >= 1) {\r\n\t\t\t\t\t\t\t\t\tresourceChosen = resourcesEligible[iI];\r\n\t\t\t\t\t\t\t\t\tresourceChosenIndex = resourcesEligible[iI];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (resourceChosenIndex > -1) {\r\n\t\t\t\t\tResourceBuilder.setResourceType(iX, iY, resourceChosenIndex);\r\n\t\t\t\t\tresourceRunningWeight[resourceChosenIndex] -= resourceWeight[resourceChosenIndex];\r\n\t\t\t\t\tconst name: any = GameInfo.Resources.lookup(resourceChosenIndex)?.Name;\r\n\t\t\t\t\tconsole.log(\"Force Placed \" + Locale.compose(name) + \" at (\" + iX + \", \" + iY + \")\");\r\n\t\t\t\t\tplotTag == PlotTags.PLOT_TAG_EAST_LANDMASS\r\n\t\t\t\t\t\t? importantResourceRegionalCountHome[resourceChosenIndex]++\r\n\t\t\t\t\t\t: importantResourceRegionalCountDistant[resourceChosenIndex]++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst definition = GameInfo.Ages.lookup(Game.age);\r\n\tif (definition) {\r\n\t\tconst mapType = Configuration.getMapValue(\"Name\");\r\n\t\tfor (const option of GameInfo.MapIslandBehavior) {\r\n\t\t\tif (option.MapType === mapType) {\r\n\t\t\t\tutilities.replaceIslandResources(iWidth, iHeight, option.ResourceClassType);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//Can I have a resource in this flower?\r\nexport function canHaveFlowerPlot(iX: number, iY: number, resourceType: ResourceType): boolean {\r\n\tif (ResourceBuilder.canHaveResource(iX, iY, resourceType, false)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfor (let iDirection: DirectionTypes = 0; iDirection < DirectionTypes.NUM_DIRECTION_TYPES; iDirection++) {\r\n\t\tconst iIndex: number = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(iIndex);\r\n\t\tconst iAdjacentX: number = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).x;\r\n\t\tconst iAdjacentY: number = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).y;\r\n\t\tif (ResourceBuilder.canHaveResource(iAdjacentX, iAdjacentY, resourceType, false)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n//Return a plot index for this resource\r\n//First choosing the initial plot, otherwise it randomly chooses a valid plot from the sorounding ring\r\nexport function getFlowerPlot(iX: number, iY: number, resourceType: ResourceType): number {\r\n\tif (ResourceBuilder.canHaveResource(iX, iY, resourceType, false)) {\r\n\t\treturn GameplayMap.getIndexFromXY(iX, iY);\r\n\t}\r\n\r\n\tconst resourcePlotIndexes: number[] = [];\r\n\tfor (let iDirection: DirectionTypes = 0; iDirection < DirectionTypes.NUM_DIRECTION_TYPES; iDirection++) {\r\n\t\tconst iIndex: number = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(iIndex);\r\n\t\tconst iAdjacentX: number = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).x;\r\n\t\tconst iAdjacentY: number = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).y;\r\n\t\tconst iAdjacentIndex: number = GameplayMap.getIndexFromXY(iAdjacentX, iAdjacentY);\r\n\t\tif (ResourceBuilder.canHaveResource(iAdjacentX, iAdjacentY, resourceType, false)) {\r\n\t\t\tresourcePlotIndexes.push(iAdjacentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tif (resourcePlotIndexes.length > 0) {\r\n\t\treturn utilities.shuffle(resourcePlotIndexes)[0];\r\n\t} else {\r\n\t\treturn -1;\r\n\t}\r\n}\r\n"],"names":["utilities.getMinimumResourcePlacementModifier","resources","utilities.AVAILABLE_ON_ALL_LANDMASSES_ID","utilities.EAST_LAND_MASS_ID","utilities.WEST_LAND_MASS_ID","utilities.replaceIslandResources","utilities.shuffle"],"mappings":"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"}