{"version":3,"file":"elevation-terrain-generator.js","sources":["../../../modules/base-standard/maps/elevation-terrain-generator.ts"],"sourcesContent":["import * as globals from \"#base/maps/map-globals.js\";\r\nimport * as utilities from \"#base/maps/map-utilities.js\";\r\n\r\nexport function addMountains(iWidth: number, iHeight: number) {\r\n\tconst adjustment = 3; // Default World Age\r\n\tlet extra_mountains = 0;\r\n\tconst iFlags = 0;\r\n\tconst grainAmount = 5;\r\n\r\n\t// Extra mountainous percentage for mountains live event\r\n\tconst liveEventDBRow = GameInfo.GlobalParameters.lookup(\"REGISTERED_MARVELOUS_MOUNTAINS_EVENT\");\r\n\tif (liveEventDBRow && liveEventDBRow.Value != \"0\") {\r\n\t\textra_mountains = 40;\r\n\t}\r\n\r\n\t// Values for mountains adjusted by World Age chosen by user.\r\n\tconst mountains: number = 93 - adjustment - extra_mountains;\r\n\r\n\tFractalBuilder.create(globals.g_MountainFractal, iWidth, iHeight, grainAmount, iFlags);\r\n\tFractalBuilder.create(globals.g_HillFractal, iWidth, iHeight, grainAmount, iFlags);\r\n\r\n\t// Get height values for terrain types\r\n\tconst iMountainThreshold = FractalBuilder.getHeightFromPercent(globals.g_MountainFractal, mountains);\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\t// Get the value from the fractals\r\n\t\t\t\tconst iMountainHeight: number = FractalBuilder.getHeight(globals.g_MountainFractal, iX, iY);\r\n\r\n\t\t\t\tif (iMountainHeight >= iMountainThreshold) {\r\n\t\t\t\t\tterrain = globals.g_MountainTerrain;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update the terrain if it changed\r\n\t\t\t\tif (terrain != globals.g_FlatTerrain) {\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, terrain);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function addHills(iWidth: number, iHeight: number) {\r\n\tconst adjustment = 3; // Default World Age\r\n\tconst base_hills_threshold = 950;\r\n\tconst extra_hills = 0;\r\n\r\n\t// Values for mountains adjusted by World Age chosen by user.\r\n\tconst hillsThreshold: number = base_hills_threshold - adjustment * 20 - extra_hills;\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == false && GameplayMap.isMountain(iX, iY) == false) {\r\n\t\t\t\tconst iIndex = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\t\t\tconst iLocation = GameplayMap.getLocationFromIndex(iIndex);\r\n\t\t\t\tlet iHillScore = 0;\r\n\t\t\t\tconst iElevation: number = GameplayMap.getElevation(iX, iY);\r\n\t\t\t\tfor (let iDirection = 0; iDirection < DirectionTypes.NUM_DIRECTION_TYPES; iDirection++) {\r\n\t\t\t\t\tif (GameplayMap.isCliffCrossing(iX, iY, iDirection) == false) {\r\n\t\t\t\t\t\tconst iAdjacentX = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).x;\r\n\t\t\t\t\t\tconst iAdjacentY = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).y;\r\n\t\t\t\t\t\tconst iAdjacentElevation: number = GameplayMap.getElevation(iAdjacentX, iAdjacentY);\r\n\t\t\t\t\t\tconst iElevationDifference = iAdjacentElevation - iElevation;\r\n\t\t\t\t\t\tif (iElevationDifference > 0) {\r\n\t\t\t\t\t\t\tiHillScore = iHillScore + iElevationDifference;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tiHillScore = iHillScore - iElevationDifference;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (iHillScore > hillsThreshold) {\r\n\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_HillTerrain);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function expandCoasts(iWidth: number, iHeight: number) {\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\tif (terrain == globals.g_OceanTerrain) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tiX > globals.g_OceanWaterColumns / 2 &&\r\n\t\t\t\t\t(iX < (iWidth - globals.g_OceanWaterColumns) / 2 ||\r\n\t\t\t\t\t\tiX > (iWidth + globals.g_OceanWaterColumns) / 2) &&\r\n\t\t\t\t\tiX < iWidth - globals.g_OceanWaterColumns / 2\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tGameplayMap.isAdjacentToShallowWater(iX, iY) &&\r\n\t\t\t\t\t\tTerrainBuilder.getRandomNumber(4, \"Shallow Water Scater Scatter\") == 0\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_CoastTerrain);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function generateLakes(iWidth: number, iHeight: number, iTilesPerLake: number) {\r\n\tlet iLakesAdded = 0;\r\n\tif (iTilesPerLake == 0) iTilesPerLake = 25; // Divide by zero proof\r\n\tconst ilakePlotRand: number = Math.floor((iWidth * iHeight) / iTilesPerLake);\r\n\r\n\tconsole.log(\"Num Directions\" + DirectionTypes.NUM_DIRECTION_TYPES);\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\tif (GameplayMap.isCoastalLand(iX, iY) == false) {\r\n\t\t\t\t\tif (GameplayMap.isImpassable(iX, iY) == false) {\r\n\t\t\t\t\t\tconst r: number = TerrainBuilder.getRandomNumber(ilakePlotRand, \"MapGenerator AddLakes\");\r\n\t\t\t\t\t\tif (r == 0) {\r\n\t\t\t\t\t\t\tiLakesAdded = iLakesAdded + 1;\r\n\t\t\t\t\t\t\taddMoreLake(iX, iY);\r\n\r\n\t\t\t\t\t\t\tTerrainBuilder.setTerrainType(iX, iY, globals.g_CoastTerrain);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (iLakesAdded > 0) {\r\n\t\tconsole.log(\"Lakes Added: \" + iLakesAdded);\r\n\t}\r\n}\r\n\r\nfunction addMoreLake(iX: number, iY: number) {\r\n\tlet iLargeLakes = 0;\r\n\tconst adjacentPlots: PlotCoord[] = [];\r\n\r\n\tfor (let iDirection: DirectionTypes = 0; iDirection < DirectionTypes.NUM_DIRECTION_TYPES; iDirection++) {\r\n\t\tconst iIndex: number = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(iIndex);\r\n\t\tconst iAdjacentX: number = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).x;\r\n\t\tconst iAdjacentY: number = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection).y;\r\n\t\tconst iAdjacentPlot: PlotCoord = GameplayMap.getAdjacentPlotLocation(iLocation, iDirection);\r\n\t\tif (GameplayMap.isWater(iAdjacentX, iAdjacentY) == false) {\r\n\t\t\tif (GameplayMap.isAdjacentToShallowWater(iAdjacentX, iAdjacentY) == false) {\r\n\t\t\t\tif (GameplayMap.isImpassable(iAdjacentX, iAdjacentY) == false) {\r\n\t\t\t\t\tconst r: number = TerrainBuilder.getRandomNumber(4 + iLargeLakes, \"MapGenerator Enlarge Lakes\");\r\n\t\t\t\t\tif (r < 3) {\r\n\t\t\t\t\t\tadjacentPlots.push(iAdjacentPlot);\r\n\t\t\t\t\t\tiLargeLakes = iLargeLakes + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let adjacentIdx = 0; adjacentIdx < adjacentPlots.length; adjacentIdx++) {\r\n\t\tTerrainBuilder.setTerrainType(\r\n\t\t\tadjacentPlots[adjacentIdx].x,\r\n\t\t\tadjacentPlots[adjacentIdx].y,\r\n\t\t\tglobals.g_CoastTerrain,\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport function buildRainfallMap(iWidth: number, iHeight: number) {\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tlet iMountainXTilesAgo = -1;\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet iRainfall: number = globals.g_StandardRainfall;\r\n\t\t\tconst terrain: TerrainType = GameplayMap.getTerrainType(iX, iY);\r\n\r\n\t\t\tif (GameplayMap.isLake(iX, iY) == true) {\r\n\t\t\t\tTerrainBuilder.setRainfall(iX, iY, iRainfall * 2);\r\n\t\t\t} else if (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\tif (terrain == globals.g_MountainTerrain || utilities.isCliff(iX, iY)) {\r\n\t\t\t\t\tiMountainXTilesAgo = 0;\r\n\t\t\t\t} else if (iMountainXTilesAgo >= 0) {\r\n\t\t\t\t\tiMountainXTilesAgo++;\r\n\t\t\t\t}\r\n\t\t\t\tif (iMountainXTilesAgo == 0) {\r\n\t\t\t\t\tiRainfall += globals.g_MountainTopIncrease;\r\n\t\t\t\t} else if (iMountainXTilesAgo > 0) {\r\n\t\t\t\t\tiRainfall += globals.g_RainShadowDrop;\r\n\t\t\t\t\tiRainfall += iMountainXTilesAgo * globals.g_RainShadowIncreasePerHex;\r\n\t\t\t\t\tif (iRainfall > globals.g_StandardRainfall) {\r\n\t\t\t\t\t\tiRainfall = globals.g_StandardRainfall;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTerrainBuilder.setRainfall(iX, iY, iRainfall);\r\n\t\t\t} else {\r\n\t\t\t\tiMountainXTilesAgo = -1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["globals.g_MountainFractal","globals.g_HillFractal","globals.g_MountainTerrain","globals.g_FlatTerrain","globals.g_HillTerrain","globals.g_OceanTerrain","globals.g_OceanWaterColumns","globals.g_CoastTerrain","globals.g_StandardRainfall","utilities.isCliff","globals.g_MountainTopIncrease","globals.g_RainShadowDrop","globals.g_RainShadowIncreasePerHex"],"mappings":"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"}