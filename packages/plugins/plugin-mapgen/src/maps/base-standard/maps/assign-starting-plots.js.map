{"version":3,"file":"assign-starting-plots.js","sources":["../../../modules/base-standard/maps/assign-starting-plots.ts"],"sourcesContent":["import * as globals from \"#base/maps/map-globals.js\";\r\nimport { getSectorRegion, isOceanAccess, shuffle } from \"#base/maps/map-utilities.js\";\r\n\r\nexport class PlayerRegionTile {\r\n\tx = 0;\r\n\ty = 0;\r\n\tplayerId = 0;\r\n}\r\n\r\nexport function chooseStartSectors(\r\n\tiNumPlayersLandmass1: number,\r\n\tiNumPlayersLandmass2: number,\r\n\tiRows: number,\r\n\tiCols: number,\r\n\tbHumanNearEquator: boolean,\r\n): boolean[] {\r\n\tconst returnValue: boolean[] = [];\r\n\tconst iSectorsPerContinent = iRows * iCols;\r\n\r\n\tlet iPlayersWestContinent = iNumPlayersLandmass1;\r\n\tlet iPlayersEastContinent = iNumPlayersLandmass2;\r\n\r\n\t// Ensure humans don't overflow one side\r\n\tlet iMaxNumMajors = 0;\r\n\tiMaxNumMajors = iPlayersWestContinent + iPlayersEastContinent;\r\n\tconst aliveMajorIds = Players.getAliveMajorIds();\r\n\tconst humanPlayers: number[] = [];\r\n\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\tif (iMajorIndex < aliveMajorIds.length && Players.isHuman(aliveMajorIds[iMajorIndex])) {\r\n\t\t\thumanPlayers.push(iMajorIndex);\r\n\t\t}\r\n\t}\r\n\tconst numHumans = humanPlayers.length;\r\n\tconst maxSide = Math.max(iPlayersWestContinent, iPlayersEastContinent);\r\n\tif (numHumans > maxSide) {\r\n\t\t// Evenly divide the total number of players\r\n\t\tconst half = Math.floor(iMaxNumMajors / 2);\r\n\t\tiPlayersWestContinent = half;\r\n\t\tiPlayersEastContinent = iMaxNumMajors - half;\r\n\r\n\t\tiNumPlayersLandmass1 = iPlayersWestContinent;\r\n\t\tiNumPlayersLandmass2 = iPlayersEastContinent;\r\n\t}\r\n\r\n\tif (iNumPlayersLandmass1 == 1 && iNumPlayersLandmass2 == 3) {\r\n\t\tvar validConfigs1: number[][] = [[0], [1], [2], [3], [4], [5]];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 3, 4],\r\n\t\t\t[1, 2, 5],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 3 && iNumPlayersLandmass2 == 1) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 3, 4],\r\n\t\t\t[1, 2, 5],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [[0], [1], [2], [3], [4], [5]];\r\n\t} else if (iNumPlayersLandmass1 == 4 && iNumPlayersLandmass2 == 0) {\r\n\t\tvar validConfigs1: number[][] = [[0, 2, 3, 5]];\r\n\t\tvar validConfigs2: number[][] = [[]];\r\n\t} else if (iNumPlayersLandmass1 == 4 && iNumPlayersLandmass2 == 2) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 2, 6, 8],\r\n\t\t\t[1, 3, 5, 7],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 8],\r\n\t\t\t[2, 6],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 2 && iNumPlayersLandmass2 == 4) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 8],\r\n\t\t\t[2, 6],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 6, 8],\r\n\t\t\t[1, 3, 5, 7],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 6 && iNumPlayersLandmass2 == 0) {\r\n\t\tvar validConfigs1: number[][] = [[0, 2, 3, 5, 6, 8]];\r\n\t\tvar validConfigs2: number[][] = [[]];\r\n\t} else if (iNumPlayersLandmass1 == 5 && iNumPlayersLandmass2 == 3) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 2, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 9, 11],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[3, 5, 7],\r\n\t\t\t[4, 6, 8],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 3 && iNumPlayersLandmass2 == 5) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[3, 5, 7],\r\n\t\t\t[4, 6, 8],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 9, 11],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 6 && iNumPlayersLandmass2 == 4) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 2, 4, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 7, 9, 11],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[1, 3, 5, 7],\r\n\t\t\t[4, 6, 8, 10],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 4 && iNumPlayersLandmass2 == 6) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[1, 3, 5, 7],\r\n\t\t\t[4, 6, 8, 10],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 4, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 7, 9, 11],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 2 && iNumPlayersLandmass2 == 2) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 5],\r\n\t\t\t[1, 4],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 5],\r\n\t\t\t[1, 4],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 3 && iNumPlayersLandmass2 == 3) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 2, 7],\r\n\t\t\t[1, 6, 8],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 7],\r\n\t\t\t[1, 6, 8],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 4 && iNumPlayersLandmass2 == 4) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 2, 6, 8],\r\n\t\t\t[3, 5, 9, 11],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 6, 8],\r\n\t\t\t[3, 5, 9, 11],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 5 && iNumPlayersLandmass2 == 5) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 2, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 9, 11],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 9, 11],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 6 && iNumPlayersLandmass2 == 6) {\r\n\t\tvar validConfigs1: number[][] = [\r\n\t\t\t[0, 2, 4, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 7, 9, 11],\r\n\t\t];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 4, 6, 8, 10],\r\n\t\t\t[1, 3, 5, 7, 9, 11],\r\n\t\t];\r\n\t} else if (iNumPlayersLandmass1 == 8 && iNumPlayersLandmass2 == 0) {\r\n\t\tvar validConfigs1: number[][] = [[0, 2, 3, 5, 6, 8, 9, 11]];\r\n\t\tvar validConfigs2: number[][] = [[]];\r\n\t} else if (iNumPlayersLandmass1 == 5 && iNumPlayersLandmass2 == 0) {\r\n\t\tvar validConfigs1: number[][] = [[0, 2, 3, 5, 6]];\r\n\t\tvar validConfigs2: number[][] = [[]];\r\n\t} else {\r\n\t\tconsole.log(\"THIS SHOULD NOT BE HIT IN STARTING POSITION\");\r\n\t\tvar validConfigs1: number[][] = [[0], [1], [2], [3], [4], [5]];\r\n\t\tvar validConfigs2: number[][] = [\r\n\t\t\t[0, 2, 4],\r\n\t\t\t[1, 3, 5],\r\n\t\t];\r\n\t}\r\n\r\n\tlet iWestContinentConfig = validConfigs1.length - 1; // Default to final config (those all have an equatorial start)\r\n\tif (!bHumanNearEquator)\r\n\t\tiWestContinentConfig = TerrainBuilder.getRandomNumber(validConfigs1.length, \"West Continent Start Positions\");\r\n\r\n\tfor (let i = 0; i < iSectorsPerContinent; i++) {\r\n\t\tlet bFoundIt = false;\r\n\t\tfor (let j = 0; j < iPlayersWestContinent; j++) {\r\n\t\t\tif (i == validConfigs1[iWestContinentConfig][j]) {\r\n\t\t\t\tbFoundIt = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturnValue[i] = bFoundIt;\r\n\t}\r\n\r\n\tlet iEastContinentConfig = validConfigs2.length - 1; // Default to final config (those all have an equatorial start)\r\n\tif (!bHumanNearEquator)\r\n\t\tiEastContinentConfig = TerrainBuilder.getRandomNumber(validConfigs2.length, \"East Continent Start Positions\");\r\n\r\n\tfor (let i = 0; i < iSectorsPerContinent; i++) {\r\n\t\tlet bFoundIt = false;\r\n\t\tfor (let j = 0; j < iPlayersEastContinent; j++) {\r\n\t\t\tif (i == validConfigs2[iEastContinentConfig][j]) {\r\n\t\t\t\tbFoundIt = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturnValue[i + iSectorsPerContinent] = bFoundIt;\r\n\t}\r\n\r\n\treturn returnValue;\r\n}\r\n\r\n// Assign Start Positions to the Major Players\r\n// The input 'east' and 'west' counts are the maximum majors for each hemisphere and those\r\n// two values combined are the maximum number of majors that can be placed.\r\n// This total should be greater than or equal to the total number of alive majors at the start of the game.\r\n//\r\n// The return is an array of starting plots.  DO NOT ASSUME THAT THE INDEX of the Starting Position is the Player ID!  It is NOT!\r\n// If more information is required from the starting position return array, make it into an array of objects with some context.\r\nexport function assignStartPositions(\r\n\tiNumWest: number,\r\n\tiNumEast: number,\r\n\twest: ContinentBoundary,\r\n\teast: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tsectors: boolean[],\r\n) {\r\n\tconsole.log(\"Assigning Starting Positions\");\r\n\r\n\tconst startPositions: number[] = []; // Plot indices for start positions chosen\r\n\r\n\tconsole.log(\"iStartSectorRows: \" + iStartSectorRows);\r\n\tconsole.log(\"iStartSectorCols: \" + iStartSectorCols);\r\n\r\n\tconsole.log(\"iNumWest: \" + iNumWest);\r\n\tconsole.log(\"iNumEast: \" + iNumEast);\r\n\tlet iMaxNumMajors = 0;\r\n\tiMaxNumMajors = iNumWest + iNumEast;\r\n\tconsole.log(\"iMaxNumMajors: \" + iMaxNumMajors);\r\n\r\n\tlet bEastBias = false;\r\n\tif (iNumEast > iNumWest) {\r\n\t\tconsole.log(\"EastSide\");\r\n\t\tbEastBias = true;\r\n\t}\r\n\r\n\t// The index values we will be dealing with in this function, correspond to the index\r\n\t// in the Alive Majors array.\r\n\tconst aliveMajorIds = Players.getAliveMajorIds();\r\n\tif (iMaxNumMajors < aliveMajorIds.length) {\r\n\t\tconsole.log(\"The input total is less than the total alive majors: \" + aliveMajorIds.length);\r\n\t}\r\n\r\n\tconst humanPlayers: number[] = [];\r\n\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\tif (iMajorIndex < aliveMajorIds.length && Players.isHuman(aliveMajorIds[iMajorIndex])) {\r\n\t\t\thumanPlayers.push(iMajorIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t// Less players shuffled in Antiquity games (always want final/AI players on other hemisphere).\r\n\t// If there's more human players than spaces on a single continent then divide the players evenly.\r\n\tlet iNumberHomelands = 0;\r\n\tlet bHumansLargestLandmass: boolean = GameInfo.Ages.lookup(Game.age)!.HumanPlayersPrimaryHemisphere;\r\n\tif (bEastBias && iNumEast < humanPlayers.length) {\r\n\t\tbHumansLargestLandmass = false;\r\n\t} else if (!bEastBias && iNumWest < humanPlayers.length) {\r\n\t\tbHumansLargestLandmass = false;\r\n\t}\r\n\tif (bHumansLargestLandmass) {\r\n\t\tif (bEastBias) {\r\n\t\t\tiNumberHomelands = iNumEast;\r\n\t\t} else {\r\n\t\t\tiNumberHomelands = iNumWest;\r\n\t\t}\r\n\t} else {\r\n\t\tiNumberHomelands = (iNumWest + iNumEast) / 2; // Should set up data so num east and west are identical on these maps\r\n\t}\r\n\r\n\tconst homelandStartRegions: ContinentBoundary[] = [];\r\n\tconst distantStartRegions: ContinentBoundary[] = [];\r\n\r\n\t//===========================================================================\r\n\t// Setting to determine which start position algorithm to use\r\n\t//     Is TRUE if using the Civ VII sector-based approach\r\n\t//\t   Is FALSE if using the Civ VI method (areas of equal fertility)\r\n\tlet bAssignStartPositionsBySector = true;\r\n\tif (iStartSectorRows == 0 || iStartSectorCols == 0) {\r\n\t\tbAssignStartPositionsBySector = false;\r\n\t} else {\r\n\t\tbAssignStartPositionsBySector = checkStartSectorsViable(\r\n\t\t\twest,\r\n\t\t\teast,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tsectors,\r\n\t\t);\r\n\t}\r\n\r\n\t//\r\n\t// NEW CIV VII METHOD\r\n\t//\r\n\tif (bAssignStartPositionsBySector) {\r\n\t\tconsole.log(\"Using Sector-based Assignments\");\r\n\r\n\t\tfor (let iSector = 0; iSector < sectors.length; iSector++) {\r\n\t\t\t// Is this one of the start sectors?\r\n\t\t\tif (sectors[iSector] == true) {\r\n\t\t\t\tconst region = getSectorRegion(\r\n\t\t\t\t\tiSector,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\teast.south,\r\n\t\t\t\t\teast.north,\r\n\t\t\t\t\twest.west,\r\n\t\t\t\t\twest.east,\r\n\t\t\t\t\teast.west,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Store into the proper start region list\r\n\t\t\t\tconst bEastHemis: boolean = iSector >= sectors.length / 2;\r\n\t\t\t\tlet szHeading: string;\r\n\t\t\t\tif (bEastHemis == bEastBias) {\r\n\t\t\t\t\thomelandStartRegions.push(region);\r\n\t\t\t\t\tszHeading = \"HOMELAND START REGION:\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdistantStartRegions.push(region);\r\n\t\t\t\t\tszHeading = \"DISTANT START REGION:\";\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(szHeading);\r\n\t\t\t\tconsole.log(\"West: \" + region.west);\r\n\t\t\t\tconsole.log(\"East: \" + region.east);\r\n\t\t\t\tconsole.log(\"North: \" + region.north);\r\n\t\t\t\tconsole.log(\"South: \" + region.south);\r\n\t\t\t\tconsole.log(\"Start Sector: \" + iSector);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//\r\n\t// LEGACY CIV VI METHOD\r\n\t//\r\n\telse {\r\n\t\tconsole.log(\"Using Areas of Equal Fertility\");\r\n\r\n\t\tconst iMinMajorFertility = 25;\r\n\t\tconst iMinMinorFertility = 5;\r\n\r\n\t\t// Start on hemisphere with most Civs\r\n\t\t{\r\n\t\t\tconst iLeftCol: number = bEastBias ? east.west : west.west;\r\n\t\t\tconst iRightCol: number = bEastBias ? east.east : west.east;\r\n\t\t\tconst uiPlotTagFilter: number = bEastBias\r\n\t\t\t\t? PlotTags.PLOT_TAG_EAST_LANDMASS\r\n\t\t\t\t: PlotTags.PLOT_TAG_WEST_LANDMASS;\r\n\r\n\t\t\tStartPositioner.initializeValues();\r\n\t\t\tStartPositioner.divideMapIntoMajorRegions(\r\n\t\t\t\tiNumberHomelands,\r\n\t\t\t\tiMinMajorFertility,\r\n\t\t\t\tiMinMinorFertility,\r\n\t\t\t\tiLeftCol,\r\n\t\t\t\tiRightCol,\r\n\t\t\t\tuiPlotTagFilter,\r\n\t\t\t);\r\n\t\t\tconsole.log(\"Divided map into major regions for Homelands\");\r\n\t\t\tfor (let iRegion = 0; iRegion < iNumberHomelands; iRegion++) {\r\n\t\t\t\thomelandStartRegions[iRegion] = StartPositioner.getMajorStartRegion(iRegion);\r\n\t\t\t\tconsole.log(\"HOMELAND START REGION: \" + iRegion);\r\n\t\t\t\tconsole.log(\"West: \" + homelandStartRegions[iRegion].west);\r\n\t\t\t\tconsole.log(\"East: \" + homelandStartRegions[iRegion].east);\r\n\t\t\t\tconsole.log(\"North: \" + homelandStartRegions[iRegion].north);\r\n\t\t\t\tconsole.log(\"South: \" + homelandStartRegions[iRegion].south);\r\n\t\t\t\tconsole.log(\"Continent: \" + homelandStartRegions[iRegion].continent);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\t// Switch halves of the map\r\n\t\t\tconst iLeftCol: number = bEastBias ? west.west : east.west;\r\n\t\t\tconst iRightCol: number = bEastBias ? west.east : east.east;\r\n\t\t\tconst uiPlotTagFilter: number = bEastBias\r\n\t\t\t\t? PlotTags.PLOT_TAG_WEST_LANDMASS\r\n\t\t\t\t: PlotTags.PLOT_TAG_EAST_LANDMASS;\r\n\r\n\t\t\tStartPositioner.initializeValues();\r\n\t\t\tStartPositioner.divideMapIntoMajorRegions(\r\n\t\t\t\tiMaxNumMajors - iNumberHomelands,\r\n\t\t\t\tiMinMajorFertility,\r\n\t\t\t\tiMinMinorFertility,\r\n\t\t\t\tiLeftCol,\r\n\t\t\t\tiRightCol,\r\n\t\t\t\tuiPlotTagFilter,\r\n\t\t\t);\r\n\t\t\tconsole.log(\"Divided map into major regions for Distant Lands\");\r\n\r\n\t\t\tfor (let iRegion = 0; iRegion < iMaxNumMajors - iNumberHomelands; iRegion++) {\r\n\t\t\t\tdistantStartRegions[iRegion] = StartPositioner.getMajorStartRegion(iRegion);\r\n\t\t\t\tconsole.log(\"DISTANT START REGION: \" + iRegion);\r\n\t\t\t\tconsole.log(\"West: \" + distantStartRegions[iRegion].west);\r\n\t\t\t\tconsole.log(\"East: \" + distantStartRegions[iRegion].east);\r\n\t\t\t\tconsole.log(\"North: \" + distantStartRegions[iRegion].north);\r\n\t\t\t\tconsole.log(\"South: \" + distantStartRegions[iRegion].south);\r\n\t\t\t\tconsole.log(\"Continent: \" + distantStartRegions[iRegion].continent);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst homelandPlayers: number[] = [];\r\n\tconst distantPlayers: number[] = [];\r\n\r\n\t// Humans on one half of map: find human players and put them in Homelands\r\n\tif (bHumansLargestLandmass) {\r\n\t\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\t\tif (iMajorIndex < aliveMajorIds.length && Players.isHuman(aliveMajorIds[iMajorIndex])) {\r\n\t\t\t\thomelandPlayers.push(iMajorIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fill up the remainder of these player arrays\r\n\t\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\t\tif (iMajorIndex < aliveMajorIds.length && Players.isAI(aliveMajorIds[iMajorIndex])) {\r\n\t\t\t\tif (homelandPlayers.length < iNumberHomelands) {\r\n\t\t\t\t\thomelandPlayers.push(iMajorIndex);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdistantPlayers.push(iMajorIndex);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Shuffle both arrays\r\n\t\tshuffle(homelandPlayers);\r\n\t\tshuffle(distantPlayers);\r\n\t}\r\n\t// Any player could be in either list. Shuffle a temp list and then assign\r\n\telse {\r\n\t\tconst tempPlayers: number[] = [];\r\n\t\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\t\tif (iMajorIndex < aliveMajorIds.length) {\r\n\t\t\t\tconsole.log(\"Found real major at: \" + aliveMajorIds[iMajorIndex]);\r\n\t\t\t\ttempPlayers.push(iMajorIndex);\r\n\t\t\t}\r\n\t\t}\r\n\t\tshuffle(tempPlayers);\r\n\t\tfor (let i = 0; i < tempPlayers.length; i++) {\r\n\t\t\tif (homelandPlayers.length < iNumberHomelands) {\r\n\t\t\t\thomelandPlayers.push(tempPlayers[i]);\r\n\t\t\t} else {\r\n\t\t\t\tdistantPlayers.push(tempPlayers[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(\"homelandPlayers: \" + homelandPlayers.length);\r\n\tconsole.log(\"homelandStartRegions: \" + homelandStartRegions.length);\r\n\tconsole.log(\"distantPlayers: \" + distantPlayers.length);\r\n\tconsole.log(\"distantStartRegions: \" + distantStartRegions.length);\r\n\r\n\t// Slide players around based on Start Biases\r\n\tconsole.log(\"Update homelandPlayers:\");\r\n\tupdateRegionsForStartBias(homelandPlayers, homelandStartRegions);\r\n\tconsole.log(\"Update distantPlayers:\");\r\n\tupdateRegionsForStartBias(distantPlayers, distantStartRegions);\r\n\r\n\t// Pick exact plots in the regions and assign them\r\n\tfor (let i = 0; i < homelandPlayers.length; i++) {\r\n\t\tconst iStartPosition: number = homelandPlayers[i];\r\n\t\t// Get the absolute playerId\r\n\t\tconst playerId = aliveMajorIds[iStartPosition];\r\n\t\tconst plotIndex = pickStartPlot(homelandStartRegions[i], i, playerId, false /*bIgnoreBias*/, startPositions);\r\n\t\tif (plotIndex >= 0) {\r\n\t\t\tstartPositions[iStartPosition] = plotIndex;\r\n\t\t\tconst location = GameplayMap.getLocationFromIndex(plotIndex);\r\n\t\t\tconsole.log(\"CHOICE FOR PLAYER: \" + playerId + \" (\" + location.x + \", \" + location.y + \")\");\r\n\t\t\tStartPositioner.setStartPosition(plotIndex, playerId);\r\n\t\t} else {\r\n\t\t\tconsole.log(\"FAILED TO PICK LOCATION FOR: \" + playerId);\r\n\t\t}\r\n\t}\r\n\tfor (let i = 0; i < distantPlayers.length; i++) {\r\n\t\tconst iStartPosition: number = distantPlayers[i];\r\n\t\t// Get the absolute playerId\r\n\t\tconst playerId = aliveMajorIds[iStartPosition];\r\n\t\tconst plotIndex = pickStartPlot(\r\n\t\t\tdistantStartRegions[i],\r\n\t\t\ti + homelandPlayers.length,\r\n\t\t\tplayerId,\r\n\t\t\tfalse /*bIgnoreBias*/,\r\n\t\t\tstartPositions,\r\n\t\t);\r\n\t\tif (plotIndex >= 0) {\r\n\t\t\tstartPositions[iStartPosition] = plotIndex;\r\n\t\t\tconst location = GameplayMap.getLocationFromIndex(plotIndex);\r\n\t\t\tconsole.log(\"CHOICE FOR PLAYER: \" + playerId + \" (\" + location.x + \", \" + location.y + \")\");\r\n\t\t\tStartPositioner.setStartPosition(plotIndex, playerId);\r\n\t\t} else {\r\n\t\t\tconsole.log(\"FAILED TO PICK LOCATION FOR: \" + playerId);\r\n\t\t}\r\n\t}\r\n\r\n\treturn startPositions;\r\n}\r\n\r\nexport function assignStartPositionsFromTiles(\r\n\tiNumWest: number,\r\n\tiNumEast: number,\r\n\twest: PlayerRegionTile[],\r\n\teast: PlayerRegionTile[],\r\n) {\r\n\tconsole.log(\"Assigning Starting Positions\");\r\n\r\n\tconst startPositions: number[] = []; // Plot indices for start positions chosen\r\n\r\n\tconsole.log(\"iNumWest: \" + iNumWest);\r\n\tconsole.log(\"iNumEast: \" + iNumEast);\r\n\tlet iMaxNumMajors = 0;\r\n\tiMaxNumMajors = iNumWest + iNumEast;\r\n\tconsole.log(\"iMaxNumMajors: \" + iMaxNumMajors);\r\n\r\n\tlet bEastBias = false;\r\n\tif (iNumEast > iNumWest || (iNumEast == iNumWest && east.length > west.length)) {\r\n\t\tconsole.log(\"EastSide\");\r\n\t\tbEastBias = true;\r\n\t}\r\n\r\n\t// The index values we will be dealing with in this function, correspond to the index\r\n\t// in the Alive Majors array.\r\n\tconst aliveMajorIds = Players.getAliveMajorIds();\r\n\tif (iMaxNumMajors != aliveMajorIds.length) {\r\n\t\tconsole.log(\r\n\t\t\t\"The input player total \" + iMaxNumMajors + \" is not equal to the alive majors: \" + aliveMajorIds.length,\r\n\t\t);\r\n\t}\r\n\r\n\tconst humanPlayers: number[] = [];\r\n\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\tif (iMajorIndex < aliveMajorIds.length && Players.isHuman(aliveMajorIds[iMajorIndex])) {\r\n\t\t\thumanPlayers.push(iMajorIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t// Less players shuffled in Antiquity games (always want final/AI players on other hemisphere).\r\n\t// If there's more human players than spaces on a single continent then divide the players evenly.\r\n\tlet iNumberHomelands = 0;\r\n\tlet bHumansLargestLandmass: boolean = GameInfo.Ages.lookup(Game.age)!.HumanPlayersPrimaryHemisphere;\r\n\tif (bEastBias && iNumEast < humanPlayers.length) {\r\n\t\tbHumansLargestLandmass = false;\r\n\t} else if (!bEastBias && iNumWest < humanPlayers.length) {\r\n\t\tbHumansLargestLandmass = false;\r\n\t}\r\n\tif (bHumansLargestLandmass) {\r\n\t\tif (bEastBias) {\r\n\t\t\tiNumberHomelands = iNumEast;\r\n\t\t} else {\r\n\t\t\tiNumberHomelands = iNumWest;\r\n\t\t}\r\n\t} else {\r\n\t\tiNumberHomelands = (iNumWest + iNumEast) / 2; // Should set up data so num east and west are identical on these maps\r\n\t}\r\n\r\n\tconst homelandPlayers: number[] = [];\r\n\tconst distantPlayers: number[] = [];\r\n\r\n\t// Humans on one half of map: find human players and put them in Homelands\r\n\tif (bHumansLargestLandmass) {\r\n\t\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\t\tif (iMajorIndex < aliveMajorIds.length && Players.isHuman(aliveMajorIds[iMajorIndex])) {\r\n\t\t\t\thomelandPlayers.push(iMajorIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fill up the remainder of these player arrays\r\n\t\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\t\tif (iMajorIndex < aliveMajorIds.length && Players.isAI(aliveMajorIds[iMajorIndex])) {\r\n\t\t\t\tif (homelandPlayers.length < iNumberHomelands) {\r\n\t\t\t\t\thomelandPlayers.push(iMajorIndex);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdistantPlayers.push(iMajorIndex);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Shuffle both arrays\r\n\t\tshuffle(homelandPlayers);\r\n\t\tshuffle(distantPlayers);\r\n\t}\r\n\t// Any player could be in either list. Shuffle a temp list and then assign\r\n\telse {\r\n\t\tconst tempPlayers: number[] = [];\r\n\t\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\t\tif (iMajorIndex < aliveMajorIds.length) {\r\n\t\t\t\tconsole.log(\"Found real major at: \" + aliveMajorIds[iMajorIndex]);\r\n\t\t\t\ttempPlayers.push(iMajorIndex);\r\n\t\t\t}\r\n\t\t}\r\n\t\tshuffle(tempPlayers);\r\n\t\tfor (let i = 0; i < tempPlayers.length; i++) {\r\n\t\t\tif (homelandPlayers.length < iNumberHomelands) {\r\n\t\t\t\thomelandPlayers.push(tempPlayers[i]);\r\n\t\t\t} else {\r\n\t\t\t\tdistantPlayers.push(tempPlayers[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst homelandTiles = bEastBias ? east : west;\r\n\tconst distantTiles = bEastBias ? west : east;\r\n\r\n\t// Pick exact plots in the regions and assign them\r\n\tfor (let i = 0; i < homelandPlayers.length; i++) {\r\n\t\tconst iStartPosition: number = homelandPlayers[i];\r\n\t\t// Get the absolute playerId\r\n\t\tconst playerId = aliveMajorIds[iStartPosition];\r\n\t\tconst playerTiles: PlayerRegionTile[] = homelandTiles.filter((tile) => tile.playerId === playerId);\r\n\t\tconsole.log(\r\n\t\t\t\"Searching \" +\r\n\t\t\t\tplayerTiles.length +\r\n\t\t\t\t\" tiles on the \" +\r\n\t\t\t\t(bEastBias ? \"east\" : \"west\") +\r\n\t\t\t\t\" landmass for a start position for player \" +\r\n\t\t\t\tplayerId +\r\n\t\t\t\t(Players.isHuman(playerId) ? \" (human)\" : \" (ai)\"),\r\n\t\t);\r\n\t\tconst plotIndex = pickStartPlotByTile(playerTiles, -1, i, playerId, false /*bIgnoreBias*/, startPositions);\r\n\t\tif (plotIndex >= 0) {\r\n\t\t\tstartPositions[iStartPosition] = plotIndex;\r\n\t\t\tconst location = GameplayMap.getLocationFromIndex(plotIndex);\r\n\t\t\tconsole.log(\"CHOICE FOR PLAYER: \" + playerId + \" (\" + location.x + \", \" + location.y + \")\");\r\n\t\t\tStartPositioner.setStartPosition(plotIndex, playerId);\r\n\t\t} else {\r\n\t\t\tconsole.log(\"FAILED TO PICK LOCATION FOR: \" + playerId);\r\n\t\t}\r\n\t}\r\n\tfor (let i = 0; i < distantPlayers.length; i++) {\r\n\t\tconst iStartPosition: number = distantPlayers[i];\r\n\t\t// Get the absolute playerId\r\n\t\tconst playerId = aliveMajorIds[iStartPosition];\r\n\t\tconst playerTiles: PlayerRegionTile[] = distantTiles.filter((tile) => tile.playerId === playerId);\r\n\t\tconsole.log(\r\n\t\t\t\"Searching \" +\r\n\t\t\t\tplayerTiles.length +\r\n\t\t\t\t\" tiles on the \" +\r\n\t\t\t\t(bEastBias ? \"west\" : \"east\") +\r\n\t\t\t\t\" landmass for a start position for player \" +\r\n\t\t\t\tplayerId +\r\n\t\t\t\t(Players.isHuman(playerId) ? \" (human)\" : \" (ai)\"),\r\n\t\t);\r\n\t\tconst plotIndex = pickStartPlotByTile(playerTiles, -1, i, playerId, false /*bIgnoreBias*/, startPositions);\r\n\t\tif (plotIndex >= 0) {\r\n\t\t\tstartPositions[iStartPosition] = plotIndex;\r\n\t\t\tconst location = GameplayMap.getLocationFromIndex(plotIndex);\r\n\t\t\tconsole.log(\"CHOICE FOR PLAYER: \" + playerId + \" (\" + location.x + \", \" + location.y + \")\");\r\n\t\t\tStartPositioner.setStartPosition(plotIndex, playerId);\r\n\t\t} else {\r\n\t\t\tconsole.log(\"FAILED TO PICK LOCATION FOR: \" + playerId);\r\n\t\t}\r\n\t}\r\n\treturn startPositions;\r\n}\r\n\r\nexport function assignSingleContinentStartPositions(\r\n\tiNumPlayers: number,\r\n\tprimaryLandmass: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tsectors: boolean[],\r\n\tuiPlotTagFilter = 0xffffffff,\r\n) {\r\n\tconsole.log(\"Assigning Starting Positions\");\r\n\r\n\tconst startPositions: number[] = []; // Plot indices for start positions chosen\r\n\r\n\tconsole.log(\"iStartSectorRows: \" + iStartSectorRows);\r\n\tconsole.log(\"iStartSectorCols: \" + iStartSectorCols);\r\n\r\n\tlet iMaxNumMajors = 0;\r\n\tiMaxNumMajors = iNumPlayers;\r\n\tconsole.log(\"iMaxNumMajors: \" + iMaxNumMajors);\r\n\r\n\tconst aliveMajorIds = Players.getAliveMajorIds();\r\n\r\n\tif (iMaxNumMajors < aliveMajorIds.length) {\r\n\t\tconsole.log(\"The input total is less than the total alive majors: \" + aliveMajorIds.length);\r\n\t}\r\n\r\n\tconst homelandPlayers: number[] = [];\r\n\tconst homelandStartRegions: ContinentBoundary[] = [];\r\n\t//===========================================================================\r\n\t// Setting to determine which start position algorithm to use\r\n\t//     Is TRUE if using the Civ VII sector-based approach\r\n\t//\t   Is FALSE if using the Civ VI method (areas of equal fertility)\r\n\tlet bAssignStartPositionsBySector = true;\r\n\tif (iStartSectorRows == 0 || iStartSectorCols == 0) {\r\n\t\tbAssignStartPositionsBySector = false;\r\n\t} else {\r\n\t\tbAssignStartPositionsBySector = checkStartSectorsViable(\r\n\t\t\tprimaryLandmass,\r\n\t\t\tprimaryLandmass,\r\n\t\t\tiStartSectorRows,\r\n\t\t\tiStartSectorCols,\r\n\t\t\tsectors,\r\n\t\t);\r\n\t}\r\n\r\n\tif (bAssignStartPositionsBySector) {\r\n\t\tconsole.log(\"Using Sector-based Assignments\");\r\n\r\n\t\tfor (let iSector = 0; iSector < sectors.length; iSector++) {\r\n\t\t\t// Is this one of the start sectors?\r\n\t\t\tif (sectors[iSector] == true) {\r\n\t\t\t\tconst region = getSectorRegion(\r\n\t\t\t\t\tiSector,\r\n\t\t\t\t\tiStartSectorRows,\r\n\t\t\t\t\tiStartSectorCols,\r\n\t\t\t\t\tprimaryLandmass.south,\r\n\t\t\t\t\tprimaryLandmass.north,\r\n\t\t\t\t\tprimaryLandmass.west,\r\n\t\t\t\t\tprimaryLandmass.east,\r\n\t\t\t\t\tprimaryLandmass.west,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Store into the proper start region list\r\n\t\t\t\tlet szHeading: string;\r\n\r\n\t\t\t\thomelandStartRegions.push(region);\r\n\t\t\t\tszHeading = \"HOMELAND START REGION:\";\r\n\r\n\t\t\t\tconsole.log(szHeading);\r\n\t\t\t\tconsole.log(\"West: \" + region.west);\r\n\t\t\t\tconsole.log(\"East: \" + region.east);\r\n\t\t\t\tconsole.log(\"North: \" + region.north);\r\n\t\t\t\tconsole.log(\"South: \" + region.south);\r\n\t\t\t\tconsole.log(\"Start Sector: \" + iSector);\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tconsole.log(\"Assigning Starting Positions Across a Single Continent with Equal Fertility\");\r\n\r\n\t\t// Divide the continent into major regions based on fertility\r\n\t\tconst iMinMajorFertility = 25;\r\n\t\tconst iMinMinorFertility = 5;\r\n\r\n\t\tStartPositioner.initializeValues();\r\n\t\tStartPositioner.divideMapIntoMajorRegions(\r\n\t\t\tiNumPlayers,\r\n\t\t\tiMinMajorFertility,\r\n\t\t\tiMinMinorFertility,\r\n\t\t\tprimaryLandmass.west,\r\n\t\t\tprimaryLandmass.east,\r\n\t\t\tuiPlotTagFilter,\r\n\t\t);\r\n\r\n\t\t// Ensure players are spread across the largest and most fertile areas\r\n\t\tconst potentialRegions: ContinentBoundary[] = [];\r\n\t\tfor (let i = 0; i < iNumPlayers; i++) {\r\n\t\t\tconst region = StartPositioner.getMajorStartRegion(i);\r\n\t\t\tif (region && region.east > primaryLandmass.west && region.west < primaryLandmass.east) {\r\n\t\t\t\tpotentialRegions.push(region);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sort by size to prioritize larger areas (reduces clustering)\r\n\t\tpotentialRegions.sort(\r\n\t\t\t(a, b) => (b.east - b.west) * (b.north - b.south) - (a.east - a.west) * (a.north - a.south),\r\n\t\t);\r\n\r\n\t\tfor (const region of potentialRegions) {\r\n\t\t\tif (homelandStartRegions.length < iNumPlayers) {\r\n\t\t\t\thomelandStartRegions.push(region);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (homelandStartRegions.length < iNumPlayers) {\r\n\t\t\tconsole.log(\"WARNING: Not enough fertile regions found within the selected continent.\");\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let iMajorIndex = 0; iMajorIndex < iMaxNumMajors; iMajorIndex++) {\r\n\t\tif (iMajorIndex < aliveMajorIds.length) {\r\n\t\t\thomelandPlayers.push(iMajorIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tshuffle(homelandPlayers);\r\n\r\n\tconsole.log(\"homelandPlayers: \" + homelandPlayers.length);\r\n\tconsole.log(\"homelandStartRegions: \" + homelandStartRegions.length);\r\n\r\n\t// Slide players around based on Start Biases\r\n\tconsole.log(\"Update homelandPlayers:\");\r\n\tupdateRegionsForStartBias(homelandPlayers, homelandStartRegions);\r\n\r\n\tfor (let i = 0; i < homelandPlayers.length; i++) {\r\n\t\tconst iStartPosition: number = homelandPlayers[i];\r\n\t\tconst playerId = aliveMajorIds[iStartPosition];\r\n\r\n\t\tlet plotIndex = pickStartPlot(homelandStartRegions[i], i, playerId, false, startPositions);\r\n\r\n\t\tif (plotIndex >= 0) {\r\n\t\t\tstartPositions[iStartPosition] = plotIndex;\r\n\t\t\tconst location = GameplayMap.getLocationFromIndex(plotIndex);\r\n\t\t\tconsole.log(\"CHOICE FOR PLAYER: \" + playerId + \" (\" + location.x + \", \" + location.y + \")\");\r\n\t\t\tStartPositioner.setStartPosition(plotIndex, playerId);\r\n\t\t} else {\r\n\t\t\tconsole.log(\"FAILED TO PICK LOCATION FOR: \" + playerId + \" - Retrying with alternative regions.\");\r\n\t\t\tfor (const retryRegion of homelandStartRegions) {\r\n\t\t\t\tplotIndex = pickStartPlot(retryRegion, i, playerId, false, startPositions);\r\n\t\t\t\tif (plotIndex >= 0) {\r\n\t\t\t\t\tstartPositions[iStartPosition] = plotIndex;\r\n\t\t\t\t\tStartPositioner.setStartPosition(plotIndex, playerId);\r\n\t\t\t\t\tconsole.log(\"Successfully found an alternative start position for \" + playerId);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (plotIndex < 0) {\r\n\t\t\t\tconsole.log(\"FAILED AGAIN - NO VALID LOCATION FOUND FOR: \" + playerId);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn startPositions;\r\n}\r\n\r\nfunction checkStartSectorsViable(\r\n\twest: ContinentBoundary,\r\n\teast: ContinentBoundary,\r\n\tiStartSectorRows: number,\r\n\tiStartSectorCols: number,\r\n\tsectors: boolean[],\r\n): boolean {\r\n\tconst tempStartPositions: number[] = []; // Plot indices for start positions chosen\r\n\r\n\tfor (let iSector = 0; iSector < sectors.length; iSector++) {\r\n\t\t// Is this one of the start sectors?\r\n\t\tif (sectors[iSector] == true) {\r\n\t\t\tconst region = getSectorRegion(\r\n\t\t\t\tiSector,\r\n\t\t\t\tiStartSectorRows,\r\n\t\t\t\tiStartSectorCols,\r\n\t\t\t\teast.south,\r\n\t\t\t\teast.north,\r\n\t\t\t\twest.west,\r\n\t\t\t\twest.east,\r\n\t\t\t\teast.west,\r\n\t\t\t);\r\n\r\n\t\t\t// Call pickStartPlot() to make sure there is at least one viable start position in sector\r\n\t\t\tconst startPlot: number = pickStartPlot(region, 0, 0, true /*bIgnoreBias*/, tempStartPositions);\r\n\t\t\tif (startPlot == -1) {\r\n\t\t\t\tconsole.log(\"LOW FERTILITY START SECTOR: \" + iSector);\r\n\t\t\t\tconsole.log(\"West: \" + region.west);\r\n\t\t\t\tconsole.log(\"East: \" + region.east);\r\n\t\t\t\tconsole.log(\"North: \" + region.north);\r\n\t\t\t\tconsole.log(\"South: \" + region.south);\r\n\t\t\t\tconsole.log(\"ABORTING - Falling back to Civ VI start position assignment algorithm\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n// The input array is an array of Major Indices that form a group that will be put into the\r\n// input region.\r\nfunction updateRegionsForStartBias(majorGroup: number[], startRegions: ContinentBoundary[]) {\r\n\tconst biomeBiases = new Array(majorGroup.length);\r\n\tfor (let i = 0; i < majorGroup.length; i++) {\r\n\t\tbiomeBiases[i] = [];\r\n\t}\r\n\tconst navRiverBias: number[] = [];\r\n\tconst NWBias: number[] = [];\r\n\t// Initialize\r\n\tfor (let iMajorGroup = 0; iMajorGroup < majorGroup.length; iMajorGroup++) {\r\n\t\tfor (let iBiome = 0; iBiome < GameInfo.Biomes.length; iBiome++) {\r\n\t\t\tbiomeBiases[iMajorGroup][iBiome] = 0;\r\n\t\t}\r\n\t\tnavRiverBias[iMajorGroup] = 0;\r\n\t\tNWBias[iMajorGroup] = 0;\r\n\t}\r\n\r\n\tconst aliveMajorIds = Players.getAliveMajorIds();\r\n\r\n\t// For each major in the group\r\n\tfor (let iMajorGroup = 0; iMajorGroup < majorGroup.length; iMajorGroup++) {\r\n\t\t// Get the absolute player\r\n\t\tconst playerId = aliveMajorIds[majorGroup[iMajorGroup]];\r\n\t\tconst player = Players.get(playerId);\r\n\t\tif (player == null) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// \tFind their total bias (Leader + Civ) for each Biome and for Navigable Rivers\r\n\t\tconst uiCivType: CivilizationType = player.civilizationType;\r\n\t\tconst uiLeaderType: LeaderType = player.leaderType;\r\n\t\tconsole.log(\"Player Id:\" + playerId + \", \" + player.civilizationName + \", \" + player.leaderName);\r\n\r\n\t\tfor (let startBiomeIdx = 0; startBiomeIdx < GameInfo.StartBiasBiomes.length; startBiomeIdx++) {\r\n\t\t\tconst startBiomeDef = GameInfo.StartBiasBiomes[startBiomeIdx];\r\n\t\t\tif (startBiomeDef) {\r\n\t\t\t\tconst civString = startBiomeDef.CivilizationType;\r\n\t\t\t\tconst ldrString = startBiomeDef.LeaderType;\r\n\t\t\t\tlet civHash = 0;\r\n\t\t\t\tlet ldrHash = 0;\r\n\t\t\t\tif (civString != null) {\r\n\t\t\t\t\tconst civObj = GameInfo.Civilizations.lookup(civString);\r\n\t\t\t\t\tif (civObj) {\r\n\t\t\t\t\t\tcivHash = civObj.$hash;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ldrString != null) {\r\n\t\t\t\t\tconst ldrObj = GameInfo.Leaders.lookup(ldrString);\r\n\t\t\t\t\tif (ldrObj) {\r\n\t\t\t\t\t\tldrHash = ldrObj.$hash;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (civHash == uiCivType || ldrHash == uiLeaderType) {\r\n\t\t\t\t\tconst biomeDef = GameInfo.Biomes.lookup(startBiomeDef.BiomeType);\r\n\t\t\t\t\tif (biomeDef) {\r\n\t\t\t\t\t\tconst biomeIndex = biomeDef.$index;\r\n\t\t\t\t\t\tconsole.log(\"biomeIndex: \" + biomeIndex + \", Score: \" + startBiomeDef.Score);\r\n\t\t\t\t\t\tbiomeBiases[iMajorGroup][biomeIndex] += startBiomeDef.Score;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let startRiverIdx = 0; startRiverIdx < GameInfo.StartBiasTerrains.length; startRiverIdx++) {\r\n\t\t\tconst startBiasTerrainDef = GameInfo.StartBiasTerrains[startRiverIdx];\r\n\t\t\tif (startBiasTerrainDef) {\r\n\t\t\t\tif (startBiasTerrainDef.TerrainType == \"TERRAIN_NAVIGABLE_RIVER\") {\r\n\t\t\t\t\tconst civString = startBiasTerrainDef.CivilizationType;\r\n\t\t\t\t\tconst ldrString = startBiasTerrainDef.LeaderType;\r\n\t\t\t\t\tlet civHash = 0;\r\n\t\t\t\t\tlet ldrHash = 0;\r\n\t\t\t\t\tif (civString != null) {\r\n\t\t\t\t\t\tconst civObj = GameInfo.Civilizations.lookup(civString);\r\n\t\t\t\t\t\tif (civObj) {\r\n\t\t\t\t\t\t\tcivHash = civObj.$hash;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ldrString != null) {\r\n\t\t\t\t\t\tconst ldrObj = GameInfo.Leaders.lookup(ldrString);\r\n\t\t\t\t\t\tif (ldrObj) {\r\n\t\t\t\t\t\t\tldrHash = ldrObj.$hash;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (civHash == uiCivType || ldrHash == uiLeaderType) {\r\n\t\t\t\t\t\tnavRiverBias[iMajorGroup] += startBiasTerrainDef.Score;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let startNWIdx = 0; startNWIdx < GameInfo.StartBiasNaturalWonders.length; startNWIdx++) {\r\n\t\t\tconst startBiasNWDef = GameInfo.StartBiasNaturalWonders[startNWIdx];\r\n\t\t\tif (startBiasNWDef) {\r\n\t\t\t\tconst civString = startBiasNWDef.CivilizationType;\r\n\t\t\t\tconst ldrString = startBiasNWDef.LeaderType;\r\n\t\t\t\tlet civHash = 0;\r\n\t\t\t\tlet ldrHash = 0;\r\n\t\t\t\tif (civString != null) {\r\n\t\t\t\t\tconst civObj = GameInfo.Civilizations.lookup(civString);\r\n\t\t\t\t\tif (civObj) {\r\n\t\t\t\t\t\tcivHash = civObj.$hash;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ldrString != null) {\r\n\t\t\t\t\tconst ldrObj = GameInfo.Leaders.lookup(ldrString);\r\n\t\t\t\t\tif (ldrObj) {\r\n\t\t\t\t\t\tldrHash = ldrObj.$hash;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (civHash == uiCivType || ldrHash == uiLeaderType) {\r\n\t\t\t\t\tNWBias[iMajorGroup] += startBiasNWDef.Score;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(\"biomeBiases \" + biomeBiases);\r\n\tconsole.log(\"navRiverBias \" + navRiverBias);\r\n\tconsole.log(\"NWBias \" + NWBias);\r\n\r\n\t// For each Start Sector in that hemisphere, count:\r\n\tconst biomeCounts = new Array(startRegions.length);\r\n\tfor (let i = 0; i < startRegions.length; i++) {\r\n\t\tbiomeCounts[i] = [];\r\n\t}\r\n\tconst navRiverCounts: number[] = [];\r\n\tconst NWCounts: number[] = [];\r\n\tfor (let iRegion = 0; iRegion < startRegions.length; iRegion++) {\r\n\t\tfor (let iBiome = 0; iBiome < GameInfo.Biomes.length; iBiome++) {\r\n\t\t\tbiomeCounts[iRegion][iBiome] = 0;\r\n\t\t}\r\n\t\tnavRiverCounts[iRegion] = 0;\r\n\t\tNWCounts[iRegion] = 0;\r\n\t}\r\n\r\n\tfor (let iRegion = 0; iRegion < startRegions.length; iRegion++) {\r\n\t\tconst region: ContinentBoundary = startRegions[iRegion];\r\n\t\tfor (let iX = region.west; iX <= region.east; iX++) {\r\n\t\t\tfor (let iY = region.south; iY <= region.north; iY++) {\r\n\t\t\t\t// \tNumber of tiles of each Biome\r\n\t\t\t\tconst biomeType = GameplayMap.getBiomeType(iX, iY);\r\n\t\t\t\tbiomeCounts[iRegion][biomeType]++;\r\n\r\n\t\t\t\t// \tNumber of Navigable River tiles\r\n\t\t\t\tif (GameplayMap.isNavigableRiver(iX, iY)) {\r\n\t\t\t\t\tnavRiverCounts[iRegion]++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (GameplayMap.isNaturalWonder(iX, iY)) {\r\n\t\t\t\t\tNWCounts[iRegion]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"biomeCounts \" + biomeCounts);\r\n\tconsole.log(\"navRiverCounts \" + navRiverCounts);\r\n\tconsole.log(\"NWCounts \" + NWCounts);\r\n\r\n\t// Sort players by grand total of biases (add all Biome biases to Nav River bias)\r\n\tconst totalMajorBiases: number[] = [];\r\n\tconst sortedMajorIndices: number[] = [];\r\n\tfor (let iMajorGroup = 0; iMajorGroup < majorGroup.length; iMajorGroup++) {\r\n\t\ttotalMajorBiases[iMajorGroup] = 0;\r\n\t\tsortedMajorIndices[iMajorGroup] = iMajorGroup;\r\n\t}\r\n\tfor (let iMajorGroup = 0; iMajorGroup < majorGroup.length; iMajorGroup++) {\r\n\t\tfor (let iBiome = 0; iBiome < GameInfo.Biomes.length; iBiome++) {\r\n\t\t\ttotalMajorBiases[iMajorGroup] += biomeBiases[iMajorGroup][iBiome];\r\n\t\t}\r\n\t\ttotalMajorBiases[iMajorGroup] += navRiverBias[iMajorGroup];\r\n\t\ttotalMajorBiases[iMajorGroup] += NWBias[iMajorGroup];\r\n\t}\r\n\tconsole.log(\"totalMajorBiases \" + totalMajorBiases);\r\n\tsortedMajorIndices.sort((a, b) => {\r\n\t\treturn totalMajorBiases[b] - totalMajorBiases[a];\r\n\t});\r\n\tconsole.log(\"sortedMajorIndices \" + sortedMajorIndices);\r\n\r\n\t// Copy over and clear output list of major indices\r\n\tconsole.log(\"majorGroup (original):\" + majorGroup);\r\n\tconst originalMajorGroup: number[] = [];\r\n\tfor (let iMajorGroup = 0; iMajorGroup < majorGroup.length; iMajorGroup++) {\r\n\t\toriginalMajorGroup[iMajorGroup] = majorGroup[iMajorGroup];\r\n\t\tmajorGroup[iMajorGroup] = -1;\r\n\t}\r\n\r\n\t// Assign final start sector in sorted order from highest grand total to lowest\r\n\tfor (let iMajorGroup = 0; iMajorGroup < majorGroup.length; iMajorGroup++) {\r\n\t\tconst iMajorToPlace = sortedMajorIndices[iMajorGroup];\r\n\r\n\t\t// \tFind best score for this player's biases\r\n\t\tlet iBestScore = -1;\r\n\t\tlet iBestRegion = -1;\r\n\t\tfor (let iRegion = 0; iRegion < startRegions.length; iRegion++) {\r\n\t\t\t// Make sure this region has not been used already\r\n\t\t\tif (majorGroup[iRegion] == -1) {\r\n\t\t\t\tlet regionScoreForMajor = 0;\r\n\t\t\t\tfor (let iBiome = 0; iBiome < GameInfo.Biomes.length; iBiome++) {\r\n\t\t\t\t\tregionScoreForMajor += biomeBiases[iMajorToPlace][iBiome] * biomeCounts[iRegion][iBiome];\r\n\t\t\t\t}\r\n\t\t\t\tregionScoreForMajor += navRiverBias[iMajorToPlace] * navRiverCounts[iRegion];\r\n\t\t\t\tregionScoreForMajor += NWBias[iMajorToPlace] * NWCounts[iRegion];\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t\"majorIndex: \" +\r\n\t\t\t\t\t\tiMajorToPlace +\r\n\t\t\t\t\t\t\", original ID: \" +\r\n\t\t\t\t\t\toriginalMajorGroup[iMajorToPlace] +\r\n\t\t\t\t\t\t\", regionScore: \" +\r\n\t\t\t\t\t\tregionScoreForMajor,\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (regionScoreForMajor > iBestScore) {\r\n\t\t\t\t\tiBestScore = regionScoreForMajor;\r\n\t\t\t\t\tiBestRegion = iRegion;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (iBestRegion >= 0) {\r\n\t\t\tmajorGroup[iBestRegion] = originalMajorGroup[iMajorToPlace];\r\n\t\t\tconsole.log(\"Region \" + iBestRegion + \" is best for major: \" + originalMajorGroup[iMajorToPlace]);\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"Majors (final form):\" + majorGroup);\r\n}\r\n\r\n// The playerId is the absolute playerId\r\nfunction pickStartPlotByTile(\r\n\ttiles: { x: number; y: number }[],\r\n\tcontinentId: number,\r\n\tnumFoundEarlier: number,\r\n\tplayerId: number,\r\n\tignoreBias: boolean,\r\n\tstartPositions: number[],\r\n) {\r\n\tlet chosenPlotIndex = -1;\r\n\tlet highestScore = 0;\r\n\tfor (const tile of tiles) {\r\n\t\tlet score: number = scorePlot(tile.x, tile.y, continentId);\r\n\t\tif (score > 0) {\r\n\t\t\tif (!ignoreBias) {\r\n\t\t\t\tscore += adjustScoreByStartBias(tile.x, tile.y, playerId);\r\n\t\t\t}\r\n\t\t\tif (numFoundEarlier > 0) {\r\n\t\t\t\tscore = adjustScoreByClosestStart(score, tile.x, tile.y, startPositions);\r\n\t\t\t}\r\n\t\t\tif (score > highestScore) {\r\n\t\t\t\thighestScore = score;\r\n\t\t\t\tchosenPlotIndex = tile.y * GameplayMap.getGridWidth() + tile.x;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn chosenPlotIndex;\r\n}\r\n\r\n// The playerId is the absolute playerId\r\nfunction pickStartPlot(\r\n\tregion: ContinentBoundary,\r\n\tnumFoundEarlier: number,\r\n\tplayerId: number,\r\n\tignoreBias: boolean,\r\n\tstartPositions: number[],\r\n): number {\r\n\tconst tiles: { x: number; y: number }[] = [];\r\n\tfor (let iY: number = region.south; iY <= region.north; iY++) {\r\n\t\tfor (let iX: number = region.west; iX <= region.east; iX++) {\r\n\t\t\ttiles.push({ x: iX, y: iY });\r\n\t\t}\r\n\t}\r\n\treturn pickStartPlotByTile(tiles, region.continent, numFoundEarlier, playerId, ignoreBias, startPositions);\r\n}\r\n\r\nfunction scorePlot(iX: number, iY: number, iContinent: number): number {\r\n\tlet score = -1;\r\n\r\n\tif (!GameplayMap.isWater(iX, iY) && !GameplayMap.isMountain(iX, iY)) {\r\n\t\tif (iContinent == -1 || GameplayMap.getContinentType(iX, iY) == iContinent) {\r\n\t\t\tscore = StartPositioner.getStartPositionScore(iX, iY);\r\n\t\t}\r\n\t}\r\n\r\n\t//console.log(\"scoring tile {X:\" + iX + \", y:\" + iY + \"}. Score = \" + score + \". isWater? \" + GameplayMap.isWater(iX, iY) + \", isMountain? \" + GameplayMap.isMountain(iX, iY) + \", iContinent = \" + iContinent + \", continent type = \" + GameplayMap.getContinentType(iX, iY));\r\n\treturn score;\r\n}\r\n\r\nfunction adjustScoreByClosestStart(originalScore: number, iX: number, iY: number, startPositions: number[]): number {\r\n\tlet score: number = originalScore;\r\n\r\n\t// Divide by zero check\r\n\tif (globals.g_DesiredBufferBetweenMajorStarts <= globals.g_RequiredBufferBetweenMajorStarts) return score;\r\n\r\n\tconst distance: number = getDistanceToClosestStart(iX, iY, startPositions);\r\n\tif (distance < globals.g_RequiredBufferBetweenMajorStarts) {\r\n\t\tscore = 0;\r\n\t} else if (distance < globals.g_DesiredBufferBetweenMajorStarts) {\r\n\t\tscore =\r\n\t\t\t(score * (distance - globals.g_RequiredBufferBetweenMajorStarts + 1)) /\r\n\t\t\t(globals.g_DesiredBufferBetweenMajorStarts - globals.g_RequiredBufferBetweenMajorStarts + 1);\r\n\t}\r\n\treturn score;\r\n}\r\n\r\nfunction getDistanceToClosestStart(iX: number, iY: number, startPositions: number[]): number {\r\n\tlet minDistance = 32768;\r\n\r\n\tfor (let iStart = 0; iStart < startPositions.length; iStart++) {\r\n\t\tconst startPlotIndex = startPositions[iStart];\r\n\r\n\t\t// Make sure this player's position has been set\r\n\t\tif (startPlotIndex) {\r\n\t\t\tconst iStartX = startPlotIndex % GameplayMap.getGridWidth();\r\n\t\t\tconst iStartY = startPlotIndex / GameplayMap.getGridWidth();\r\n\t\t\tconst distance: number = GameplayMap.getPlotDistance(iX, iY, iStartX, iStartY);\r\n\t\t\tif (distance < minDistance) {\r\n\t\t\t\tminDistance = distance;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn minDistance;\r\n}\r\n\r\n// The input playerId is the absolute ID of the player\r\nfunction adjustScoreByStartBias(iX: number, iY: number, playerId: number): number {\r\n\tlet score = 0;\r\n\r\n\tconst player = Players.get(playerId);\r\n\tif (player == null || player.isAlive == false) {\r\n\t\treturn score;\r\n\t}\r\n\r\n\tconst eCivType: CivilizationType = player.civilizationType;\r\n\tconst eLeaderType: LeaderType = player.leaderType;\r\n\r\n\tfor (let biomeIdx = 0; biomeIdx < GameInfo.StartBiasBiomes.length; biomeIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasBiomes[biomeIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasBiomes[biomeIdx]?.LeaderType;\r\n\t\tconst startBiasBiome = GameInfo.StartBiasBiomes[biomeIdx]?.BiomeType;\r\n\r\n\t\tif (startBiasBiome) {\r\n\t\t\tif (startBiasCivilization) {\r\n\t\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\t\tscore += getBiomeStartBiasScore(startBiasBiome, GameInfo.StartBiasBiomes[biomeIdx].Score, iX, iY);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (startBiasLeader) {\r\n\t\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\t\tscore += getBiomeStartBiasScore(startBiasBiome, GameInfo.StartBiasBiomes[biomeIdx].Score, iX, iY);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let terrainIdx = 0; terrainIdx < GameInfo.StartBiasTerrains.length; terrainIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasTerrains[terrainIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasTerrains[terrainIdx]?.LeaderType;\r\n\t\tconst startBiasTerrain = GameInfo.StartBiasTerrains[terrainIdx]?.TerrainType;\r\n\r\n\t\tif (startBiasTerrain) {\r\n\t\t\tif (startBiasCivilization) {\r\n\t\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\t\tscore += getTerrainStartBiasScore(\r\n\t\t\t\t\t\tstartBiasTerrain,\r\n\t\t\t\t\t\tGameInfo.StartBiasTerrains[terrainIdx].Score,\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (startBiasLeader) {\r\n\t\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\t\tscore += getTerrainStartBiasScore(\r\n\t\t\t\t\t\tstartBiasTerrain,\r\n\t\t\t\t\t\tGameInfo.StartBiasTerrains[terrainIdx].Score,\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let riverIdx = 0; riverIdx < GameInfo.StartBiasRivers.length; riverIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasRivers[riverIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasRivers[riverIdx]?.LeaderType;\r\n\r\n\t\tif (startBiasCivilization) {\r\n\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\tscore += getRiverStartBiasScore(GameInfo.StartBiasRivers[riverIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (startBiasLeader) {\r\n\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\tscore += getRiverStartBiasScore(GameInfo.StartBiasRivers[riverIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let coastIdx = 0; coastIdx < GameInfo.StartBiasAdjacentToCoasts.length; coastIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasAdjacentToCoasts[coastIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasAdjacentToCoasts[coastIdx]?.LeaderType;\r\n\r\n\t\tif (startBiasCivilization) {\r\n\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\tscore += getCoastStartBiasScore(GameInfo.StartBiasAdjacentToCoasts[coastIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (startBiasLeader) {\r\n\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\tscore += getCoastStartBiasScore(GameInfo.StartBiasAdjacentToCoasts[coastIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let featureIdx = 0; featureIdx < GameInfo.StartBiasFeatureClasses.length; featureIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasFeatureClasses[featureIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasFeatureClasses[featureIdx]?.LeaderType;\r\n\t\tconst startBiasFeature = GameInfo.StartBiasFeatureClasses[featureIdx]?.FeatureClassType;\r\n\r\n\t\tif (startBiasFeature) {\r\n\t\t\tif (startBiasCivilization) {\r\n\t\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\t\tscore += getFeatureClassStartBiasScore(\r\n\t\t\t\t\t\tstartBiasFeature,\r\n\t\t\t\t\t\tGameInfo.StartBiasFeatureClasses[featureIdx].Score,\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (startBiasLeader) {\r\n\t\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\t\tscore += getFeatureClassStartBiasScore(\r\n\t\t\t\t\t\tstartBiasFeature,\r\n\t\t\t\t\t\tGameInfo.StartBiasFeatureClasses[featureIdx].Score,\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let resourceIdx = 0; resourceIdx < GameInfo.StartBiasResources.length; resourceIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasResources[resourceIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasResources[resourceIdx]?.LeaderType;\r\n\t\tconst startBiasResource = GameInfo.StartBiasResources[resourceIdx]?.ResourceType;\r\n\r\n\t\tif (startBiasResource) {\r\n\t\t\tif (startBiasCivilization) {\r\n\t\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\t\tscore += getResourceStartBiasScore(\r\n\t\t\t\t\t\tstartBiasResource,\r\n\t\t\t\t\t\tGameInfo.StartBiasResources[resourceIdx].Score,\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (startBiasLeader) {\r\n\t\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\t\tscore += getResourceStartBiasScore(\r\n\t\t\t\t\t\tstartBiasResource,\r\n\t\t\t\t\t\tGameInfo.StartBiasResources[resourceIdx].Score,\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let lakeIdx = 0; lakeIdx < GameInfo.StartBiasLakes.length; lakeIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasLakes[lakeIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasLakes[lakeIdx]?.LeaderType;\r\n\r\n\t\tif (startBiasCivilization) {\r\n\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\tscore += getLakeStartBiasScore(GameInfo.StartBiasLakes[lakeIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (startBiasLeader) {\r\n\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\tscore += getLakeStartBiasScore(GameInfo.StartBiasLakes[lakeIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let nwIdx = 0; nwIdx < GameInfo.StartBiasNaturalWonders.length; nwIdx++) {\r\n\t\tconst startBiasCivilization = GameInfo.StartBiasNaturalWonders[nwIdx]?.CivilizationType;\r\n\t\tconst startBiasLeader = GameInfo.StartBiasNaturalWonders[nwIdx]?.LeaderType;\r\n\r\n\t\tif (startBiasCivilization) {\r\n\t\t\tconst startBiasCivilizationTypeIndex = GameInfo.Civilizations.lookup(startBiasCivilization)?.$index;\r\n\t\t\tconst civInfoTypeIndex = GameInfo.Civilizations.lookup(eCivType)?.$index;\r\n\r\n\t\t\tif (startBiasCivilizationTypeIndex == civInfoTypeIndex) {\r\n\t\t\t\tscore += getNaturalWonderStartBiasScore(GameInfo.StartBiasNaturalWonders[nwIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (startBiasLeader) {\r\n\t\t\tconst startBiasLeaderTypeIndex = GameInfo.Leaders.lookup(startBiasLeader)?.$index;\r\n\t\t\tconst leaderInfoTypeIndex = GameInfo.Leaders.lookup(eLeaderType)?.$index;\r\n\r\n\t\t\tif (startBiasLeaderTypeIndex == leaderInfoTypeIndex) {\r\n\t\t\t\tscore += getNaturalWonderStartBiasScore(GameInfo.StartBiasNaturalWonders[nwIdx].Score, iX, iY);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn score;\r\n}\r\n\r\nfunction getBiomeStartBiasScore(biome: string, score: number, iX: number, iY: number): number {\r\n\tconst startBiasBiomeTypeIndex = GameInfo.Biomes.lookup(biome)?.$index;\r\n\r\n\tconst plots: number[] = GameplayMap.getPlotIndicesInRadius(iX, iY, 3);\r\n\tlet outputScore = 0;\r\n\r\n\tfor (let plot = 0; plot < plots.length; plot++) {\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(plots[plot]);\r\n\t\tconst biomeInfoTypeIndex = GameInfo.Biomes.lookup(GameplayMap.getBiomeType(iLocation.x, iLocation.y))?.$index;\r\n\r\n\t\tif (startBiasBiomeTypeIndex == biomeInfoTypeIndex) {\r\n\t\t\tlet distance: number = GameplayMap.getPlotDistance(iX, iY, iLocation.x, iLocation.y);\r\n\r\n\t\t\tif (distance < 1) {\r\n\t\t\t\tdistance = 1;\r\n\t\t\t}\r\n\r\n\t\t\toutputScore += score / distance;\r\n\t\t}\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n\r\nfunction getTerrainStartBiasScore(terrain: string, score: number, iX: number, iY: number): number {\r\n\tconst startBiasTerrainTypeIndex = GameInfo.Terrains.lookup(terrain)?.$index;\r\n\r\n\tconst plots: number[] = GameplayMap.getPlotIndicesInRadius(iX, iY, 3);\r\n\tlet outputScore = 0;\r\n\r\n\tfor (let plot = 0; plot < plots.length; plot++) {\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(plots[plot]);\r\n\t\tconst terrainInfoTypeIndex = GameInfo.Terrains.lookup(\r\n\t\t\tGameplayMap.getTerrainType(iLocation.x, iLocation.y),\r\n\t\t)?.$index;\r\n\r\n\t\tif (startBiasTerrainTypeIndex == terrainInfoTypeIndex) {\r\n\t\t\tlet distance: number = GameplayMap.getPlotDistance(iX, iY, iLocation.x, iLocation.y);\r\n\r\n\t\t\tif (distance < 1) {\r\n\t\t\t\tdistance = 1;\r\n\t\t\t}\r\n\r\n\t\t\toutputScore += score / distance;\r\n\t\t}\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n\r\nfunction getRiverStartBiasScore(score: number, iX: number, iY: number): number {\r\n\tconst plots: number[] = GameplayMap.getPlotIndicesInRadius(iX, iY, 3);\r\n\tlet outputScore = 0;\r\n\r\n\tfor (let plot = 0; plot < plots.length; plot++) {\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(plots[plot]);\r\n\r\n\t\tif (GameplayMap.isRiver(iLocation.x, iLocation.y)) {\r\n\t\t\tlet distance: number = GameplayMap.getPlotDistance(iX, iY, iLocation.x, iLocation.y);\r\n\r\n\t\t\tif (distance < 1) {\r\n\t\t\t\tdistance = 1;\r\n\t\t\t}\r\n\r\n\t\t\toutputScore += score / distance;\r\n\t\t}\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n\r\nfunction getCoastStartBiasScore(score: number, iX: number, iY: number): number {\r\n\tlet outputScore = 0;\r\n\r\n\tif (isOceanAccess(iX, iY)) {\r\n\t\toutputScore += score;\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n\r\nfunction getFeatureClassStartBiasScore(feature: string, score: number, iX: number, iY: number): number {\r\n\tconst startBiasFeatureTypeIndex = GameInfo.FeatureClasses.lookup(feature)?.$index;\r\n\r\n\tconst plots: number[] = GameplayMap.getPlotIndicesInRadius(iX, iY, 3);\r\n\tlet outputScore = 0;\r\n\r\n\tfor (let plot = 0; plot < plots.length; plot++) {\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(plots[plot]);\r\n\t\tconst featureInfoTypeIndex = GameInfo.Features.lookup(\r\n\t\t\tGameplayMap.getFeatureType(iLocation.x, iLocation.y),\r\n\t\t)?.FeatureClassType;\r\n\r\n\t\tif (featureInfoTypeIndex) {\r\n\t\t\tconst featureClassInfoTypeIndex = GameInfo.FeatureClasses.lookup(featureInfoTypeIndex)?.$index;\r\n\r\n\t\t\tif (featureClassInfoTypeIndex == startBiasFeatureTypeIndex) {\r\n\t\t\t\tlet distance: number = GameplayMap.getPlotDistance(iX, iY, iLocation.x, iLocation.y);\r\n\r\n\t\t\t\tif (distance < 1) {\r\n\t\t\t\t\tdistance = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toutputScore += score / distance;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n\r\nfunction getResourceStartBiasScore(resource: string, score: number, iX: number, iY: number): number {\r\n\tconst startBiasResourceTypeIndex = GameInfo.Resources.lookup(resource)?.$index;\r\n\r\n\tconst plots: number[] = GameplayMap.getPlotIndicesInRadius(iX, iY, 3);\r\n\tlet outputScore = 0;\r\n\r\n\tfor (let plot = 0; plot < plots.length; plot++) {\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(plots[plot]);\r\n\t\tconst resourceInfoTypeIndex = GameInfo.Resources.lookup(\r\n\t\t\tGameplayMap.getResourceType(iLocation.x, iLocation.y),\r\n\t\t)?.$index;\r\n\r\n\t\tif (startBiasResourceTypeIndex == resourceInfoTypeIndex) {\r\n\t\t\toutputScore += score;\r\n\t\t}\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n\r\nfunction getLakeStartBiasScore(score: number, iX: number, iY: number): number {\r\n\tconst plots: number[] = GameplayMap.getPlotIndicesInRadius(iX, iY, 3);\r\n\tlet outputScore = 0;\r\n\r\n\tfor (let plot = 0; plot < plots.length; plot++) {\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(plots[plot]);\r\n\r\n\t\tif (GameplayMap.isLake(iLocation.x, iLocation.y)) {\r\n\t\t\toutputScore += score;\r\n\t\t}\r\n\t}\r\n\r\n\tif (outputScore > 0) {\r\n\t\tconsole.log(\"Start Bias Score: \" + outputScore);\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n\r\nfunction getNaturalWonderStartBiasScore(score: number, iX: number, iY: number): number {\r\n\tconst plots: number[] = GameplayMap.getPlotIndicesInRadius(iX, iY, 3);\r\n\tlet outputScore = 0;\r\n\r\n\tfor (let plot = 0; plot < plots.length; plot++) {\r\n\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(plots[plot]);\r\n\r\n\t\tif (GameplayMap.isNaturalWonder(iLocation.x, iLocation.y)) {\r\n\t\t\toutputScore += score;\r\n\t\t}\r\n\t}\r\n\r\n\tif (outputScore > 0) {\r\n\t\tconsole.log(\"Start Bias Score: \" + outputScore);\r\n\t}\r\n\r\n\treturn outputScore;\r\n}\r\n"],"names":["globals.g_DesiredBufferBetweenMajorStarts","globals.g_RequiredBufferBetweenMajorStarts"],"mappings":"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"}