{"version":3,"file":"snow-generator.js","sources":["../../../modules/base-standard/maps/snow-generator.ts"],"sourcesContent":["import * as globals from \"#base/maps/map-globals.js\";\r\n\r\n/** This function generates \"permanent\" snow effects on the map.\r\n *\r\n */\r\nexport function generateSnow(mapWidth: number, mapHeight: number): void {\r\n\tconsole.log(\"Generating permanent snow\");\r\n\r\n\tconst mapHalfHeight = GameplayMap.getGridHeight() / 2;\r\n\t// Find the row that equals the desired latitude of the snow line\r\n\tconst snowLatitudeEnd = 60;\r\n\tconst snowRowEnd = Math.ceil(mapHalfHeight * ((90 - snowLatitudeEnd) / 90));\r\n\t// The starting row delta for the snow.  This skips the ice bands.  Should we 'search' for them instead?\r\n\tconst snowRowStarts: number[] = [globals.g_PolarWaterRows, globals.g_PolarWaterRows];\r\n\t// Rows from the northern and southern starts, to apply snow to.\r\n\tconst snowRowLimits: number[] = [\r\n\t\tsnowRowEnd > snowRowStarts[0] ? snowRowEnd - snowRowStarts[0] : 0,\r\n\t\tsnowRowEnd > snowRowStarts[1] ? snowRowEnd - snowRowStarts[1] : 0,\r\n\t];\r\n\t// How to get to the next row\r\n\tconst snowRowDeltas: number[] = [-1, 1];\r\n\r\n\tconsole.log(\r\n\t\t\"Snow latitude:\" +\r\n\t\t\tsnowLatitudeEnd.toString() +\r\n\t\t\t\", rows:\" +\r\n\t\t\tsnowRowStarts[0].toString() +\r\n\t\t\t\" to \" +\r\n\t\t\t(snowRowStarts[0] + snowRowLimits[0]).toString(),\r\n\t);\r\n\r\n\t// Find our available snow effects.  These are arrays, but there is usually only one entry\r\n\t// And we are only going to support 1 or 0, for now.  We will let the app side do the variations, if any\r\n\tconst aLightSnowEffects = MapPlotEffects.getPlotEffectTypesContainingTags([\"SNOW\", \"LIGHT\", \"PERMANENT\"]);\r\n\tconst aMediumSnowEffects = MapPlotEffects.getPlotEffectTypesContainingTags([\"SNOW\", \"MEDIUM\", \"PERMANENT\"]);\r\n\tconst aHeavySnowEffects = MapPlotEffects.getPlotEffectTypesContainingTags([\"SNOW\", \"HEAVY\", \"PERMANENT\"]);\r\n\r\n\t// For a first pass, we are going to do something simple, and just go along each row and plop some snow in it.\r\n\tconst weightRange = 3; // 0 == LIGHT, 1 == MEDIUM, 2 == HEAVY\r\n\r\n\t// Total adjustment for chances, over the range we will place snow.\r\n\tconst changeTotalAdjustment = 60;\r\n\r\n\tconst aWeightEffect: PlotEffectType[] = [-1, -1, -1];\r\n\taWeightEffect[0] = aLightSnowEffects ? aLightSnowEffects[0] : -1;\r\n\taWeightEffect[1] = aMediumSnowEffects ? aMediumSnowEffects[0] : -1;\r\n\taWeightEffect[2] = aHeavySnowEffects ? aHeavySnowEffects[0] : -1;\r\n\r\n\tconst colEnd = mapWidth;\r\n\t// Get the rows of where the snow starts for each pole\r\n\tconst rowStart: number[] = [mapHeight - 1 - snowRowStarts[0], snowRowStarts[1]];\r\n\tfor (let pole = 0; pole != 2; ++pole) {\r\n\t\tconst rowCount = snowRowLimits[pole];\r\n\t\tif (rowCount > 0) {\r\n\t\t\tconst nextRowDelta = snowRowDeltas[pole];\r\n\t\t\tconst rowEnd = rowStart[pole] + rowCount * nextRowDelta;\r\n\r\n\t\t\t// Adjuting the chances down by\r\n\t\t\tconst chanceAdjustment: number = Math.ceil(changeTotalAdjustment / rowCount);\r\n\t\t\tconst aWeightChance: number[] = [10, 30, 60];\r\n\t\t\tlet chanceForAny = 90; // Starting chance that a plot has any snow\r\n\r\n\t\t\tfor (let row: number = rowStart[pole]; row != rowEnd; row += nextRowDelta) {\r\n\t\t\t\tfor (let col = 0; col < colEnd; ++col) {\r\n\t\t\t\t\tif (GameplayMap.isWater(col, row) == false) {\r\n\t\t\t\t\t\tlet rndVal: number = TerrainBuilder.getRandomNumber(100, \"Any Snow\");\r\n\t\t\t\t\t\tif (rndVal <= chanceForAny) {\r\n\t\t\t\t\t\t\trndVal = TerrainBuilder.getRandomNumber(100, \"Snow Weight\");\r\n\t\t\t\t\t\t\tfor (let weight = weightRange - 1; weight >= 0; --weight) {\r\n\t\t\t\t\t\t\t\tif (rndVal < aWeightChance[weight]) {\r\n\t\t\t\t\t\t\t\t\tMapPlotEffects.addPlotEffect(\r\n\t\t\t\t\t\t\t\t\t\tGameplayMap.getIndexFromXY(col, row),\r\n\t\t\t\t\t\t\t\t\t\taWeightEffect[weight],\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\trndVal -= aWeightChance[weight];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Chance for any snow goes down (maybe not do this, since we are adjusting the weight distribution below?)\r\n\t\t\t\tchanceForAny -= chanceAdjustment;\r\n\t\t\t\t// Adjust the chances for the different weights of snow\r\n\t\t\t\tconst adjustBy = chanceAdjustment;\r\n\t\t\t\taWeightChance[2] -= adjustBy; // Heavy goes down by this amount\r\n\t\t\t\t// Then add the chance to the other weights\r\n\t\t\t\tfor (let weight = weightRange - 2; weight >= 0; --weight) {\r\n\t\t\t\t\taWeightChance[weight] += adjustBy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n/** Debug function to display the snow distribution to the log */\r\nexport function dumpPermanentSnow(iWidth: number, iHeight: number): void {\r\n\tconsole.log(\"Permanent Snow\");\r\n\tconsole.log(\"@ = heavy\");\r\n\tconsole.log(\"# = medium\");\r\n\tconsole.log(\"* = light\");\r\n\tconsole.log(\". = no-snow\");\r\n\r\n\tconst aLightSnowEffects = MapPlotEffects.getPlotEffectTypesContainingTags([\"SNOW\", \"LIGHT\", \"PERMANENT\"]);\r\n\tconst aMediumSnowEffects = MapPlotEffects.getPlotEffectTypesContainingTags([\"SNOW\", \"MEDIUM\", \"PERMANENT\"]);\r\n\tconst aHeavySnowEffects = MapPlotEffects.getPlotEffectTypesContainingTags([\"SNOW\", \"HEAVY\", \"PERMANENT\"]);\r\n\r\n\tconst eLightPlotEffect = aLightSnowEffects ? aLightSnowEffects[0] : -1;\r\n\tconst eMediumPlotEffect = aMediumSnowEffects ? aMediumSnowEffects[0] : -1;\r\n\tconst eHeavyPlotEffect = aHeavySnowEffects ? aHeavySnowEffects[0] : -1;\r\n\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tlet str = \"\";\r\n\t\tif (iY % 2 == 1) {\r\n\t\t\tstr += \" \";\r\n\t\t}\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tlet effectString = \" \";\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == false) {\r\n\t\t\t\tconst iIndex = GameplayMap.getIndexFromXY(iX, iY);\r\n\t\t\t\tif (MapPlotEffects.hasPlotEffect(iIndex, eLightPlotEffect)) {\r\n\t\t\t\t\teffectString = \"*\";\r\n\t\t\t\t} else if (MapPlotEffects.hasPlotEffect(iIndex, eMediumPlotEffect)) {\r\n\t\t\t\t\teffectString = \"#\";\r\n\t\t\t\t} else if (MapPlotEffects.hasPlotEffect(iIndex, eHeavyPlotEffect)) {\r\n\t\t\t\t\teffectString = \"@\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\teffectString = \".\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstr += effectString + \" \";\r\n\t\t}\r\n\t\tconsole.log(str);\r\n\t}\r\n}\r\n"],"names":["globals.g_PolarWaterRows"],"mappings":"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"}