{"version":3,"file":"discovery-generator.js","sources":["../../../modules/base-standard/maps/discovery-generator.ts"],"sourcesContent":["//import * as utilities from '/base-standard/maps/map-utilities.js';\r\n//import\r\nimport * as globals from \"#base/maps/map-globals.js\";\r\nimport { getDistanceToClosestStart } from \"#base/maps/map-utilities.js\";\r\n//import { assignStartPositions, chooseStartSectors } from '/base-standard/maps/assign-starting-plots.js';\r\n\r\nexport function generateDiscoveries(iWidth: number, iHeight: number, startingPositions: number[]) {\r\n\tif (GameInfo.Ages.lookup(Game.age)!.GenerateDiscoveries == false) {\r\n\t\tconsole.log(\"DISCOVERIES TURNED OFF FOR \" + Game.age);\r\n\t\treturn;\r\n\t}\r\n\tif (Configuration.getGameValue(\"DiscoverySiftingType\") == 0x8a0f94f9) {\r\n\t\tconsole.log(\"DISCOVERIES TURNED OFF\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tconsole.log(\"Discovery generation\", iWidth, iHeight);\r\n\r\n\tlet discoveryCounter = 0;\r\n\tlet oceanDiscoveryCounter = 0;\r\n\tlet discoveryPlacedCounter = 0;\r\n\tlet totalCoastalDiscoveryNotPlaced = 0;\r\n\tlet totalOceanDiscoveryNotPlaced = 0;\r\n\tconst seed = GameplayMap.getRandomSeed();\r\n\tconst avgDistanceBetweenPoints = 5;\r\n\tconst normalizedRangeSmoothing = 2;\r\n\tconst poisson = TerrainBuilder.generatePoissonMap(seed, avgDistanceBetweenPoints, normalizedRangeSmoothing);\r\n\tlet distanceToClosestStart = 0;\r\n\r\n\t//Rough boundaries so the main continents don't get ship wreck discoveries at the poles.  Used the continents plus model\r\n\tconst uiMapSize = GameplayMap.getMapSize();\r\n\tconst mapInfo = GameInfo.Maps.lookup(uiMapSize);\r\n\tif (mapInfo == null) {\r\n\t\tconsole.log(\"Skipping discoveries.  No mapInfo for map of size \", uiMapSize);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst iOceanWaterColumns = (globals.g_OceanWaterColumns + mapInfo.OceanWidth) * 1.75;\r\n\tconst westContinent: ContinentBoundary = {\r\n\t\twest: iOceanWaterColumns / 2,\r\n\t\teast: iWidth / 2 - iOceanWaterColumns / 2,\r\n\t\tsouth: 0,\r\n\t\tnorth: 0,\r\n\t\tcontinent: 0,\r\n\t};\r\n\tconst eastContinent: ContinentBoundary = {\r\n\t\twest: iWidth / 2 + iOceanWaterColumns / 2,\r\n\t\teast: iWidth - iOceanWaterColumns / 2,\r\n\t\tsouth: 0,\r\n\t\tnorth: 0,\r\n\t\tcontinent: 0,\r\n\t};\r\n\r\n\tfunction DiscoveryDiceRoller() {\r\n\t\tconst randomthing = TerrainBuilder.getRandomNumber(100, \"Discovery Type Roll\");\r\n\t\tif (randomthing <= 65) {\r\n\t\t\treturn DiscoveryActivationTypes.BASIC;\r\n\t\t} else if (randomthing <= 100) {\r\n\t\t\treturn DiscoveryActivationTypes.INVESTIGATION;\r\n\t\t} else {\r\n\t\t\treturn DiscoveryActivationTypes.MYTHIC;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction DiscoveryVisualString(numb: number) {\r\n\t\tswitch (numb) {\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAVE:\r\n\t\t\t\treturn \"Cave\";\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_RUINS:\r\n\t\t\t\treturn \"Ruins\";\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAMPFIRE:\r\n\t\t\t\treturn \"Campfire\";\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_TENTS:\r\n\t\t\t\treturn \"Tents\";\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAIRN:\r\n\t\t\t\treturn \"Cairn\";\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_RICH:\r\n\t\t\t\treturn \"Rich\";\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_WRECKAGE:\r\n\t\t\t\treturn \"Wreckage\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"\";\r\n\t\t}\r\n\t}\r\n\r\n\tfunction DiscoveryTypeString(numb: number) {\r\n\t\tswitch (numb) {\r\n\t\t\tcase DiscoveryActivationTypes.BASIC:\r\n\t\t\t\treturn \"Basic\";\r\n\t\t\tcase DiscoveryActivationTypes.INVESTIGATION:\r\n\t\t\t\treturn \"Investigation\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"Unknown\";\r\n\t\t}\r\n\t}\r\n\r\n\tfunction AllowedDiscoveryVisual(numb: number) {\r\n\t\tswitch (numb) {\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAVE:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_RUINS:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAMPFIRE:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_TENTS:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAIRN:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_RICH:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_WRECKAGE:\r\n\t\t\t\treturn true;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction AllowedDiscoveryVisualExploration(numb: number) {\r\n\t\tswitch (numb) {\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAVE:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_RUINS:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_TENTS:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_CAIRN:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_RICH:\r\n\t\t\tcase DiscoveryVisualTypes.IMPROVEMENT_WRECKAGE:\r\n\t\t\t\treturn true;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(\"counting\");\r\n\tconsole.log(DiscoveryVisualTypes.IMPROVEMENT_CAVE);\r\n\r\n\tconst basicsMap: [DiscoveryVisualTypes, number][] = [];\r\n\tconst investigationMap: [DiscoveryVisualTypes, number][] = [];\r\n\tif (Game.age == Database.makeHash(\"AGE_EXPLORATION\")) {\r\n\t\tGameInfo.DiscoverySiftingImprovements.forEach((discoverySift) => {\r\n\t\t\tif (AllowedDiscoveryVisualExploration(Database.makeHash(discoverySift.ConstructibleType))) {\r\n\t\t\t\tconst amount = GameInfo.NarrativeStories.filter((def) => def.Queue == discoverySift.QueueType).length;\r\n\t\t\t\tif (amount > 0) {\r\n\t\t\t\t\tif (discoverySift.Activation === \"BASIC\") {\r\n\t\t\t\t\t\tbasicsMap.push([Database.makeHash(discoverySift.ConstructibleType), amount]);\r\n\t\t\t\t\t} else if (discoverySift.Activation === \"INVESTIGATION\") {\r\n\t\t\t\t\t\tinvestigationMap.push([Database.makeHash(discoverySift.ConstructibleType), amount]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tGameInfo.DiscoverySiftingImprovements.forEach((discoverySift) => {\r\n\t\t\tif (AllowedDiscoveryVisual(Database.makeHash(discoverySift.ConstructibleType))) {\r\n\t\t\t\tconst amount = GameInfo.NarrativeStories.filter((def) => def.Queue == discoverySift.QueueType).length;\r\n\t\t\t\tif (amount > 0) {\r\n\t\t\t\t\tif (discoverySift.Activation === \"BASIC\") {\r\n\t\t\t\t\t\tbasicsMap.push([Database.makeHash(discoverySift.ConstructibleType), amount]);\r\n\t\t\t\t\t} else if (discoverySift.Activation === \"INVESTIGATION\") {\r\n\t\t\t\t\t\tinvestigationMap.push([Database.makeHash(discoverySift.ConstructibleType), amount]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconsole.log(\"poisson number?: \" + poisson);\r\n\tfor (let iY: number = iHeight - 1; iY >= 0; iY--) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst index = iY * iWidth + iX;\r\n\t\t\tif (poisson[index] >= 1) {\r\n\t\t\t\tconst iLocation: PlotCoord = GameplayMap.getLocationFromIndex(index);\r\n\t\t\t\tconst terrainType = GameplayMap.getTerrainType(iX, iY);\r\n\t\t\t\t// don't place on settlements\r\n\t\t\t\tif (startingPositions.length > 0) {\r\n\t\t\t\t\tdistanceToClosestStart = getDistanceToClosestStart(\r\n\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\tstartingPositions.length,\r\n\t\t\t\t\t\tstartingPositions,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (distanceToClosestStart < globals.g_RequiredDistanceFromMajorForDiscoveries) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// don't place in owned territory\r\n\t\t\t\t\tconst owner = GameplayMap.getOwner(iX, iY);\r\n\t\t\t\t\tif (owner != PlayerIds.NO_PLAYER) {\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"Can't Place Discovery, tile already owned: \",\r\n\t\t\t\t\t\t\t\"X=\" + iLocation.x + \" Y=\" + iLocation.y,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// don't place on mountains / impassible\r\n\t\t\t\tif (GameplayMap.isImpassable(iX, iY)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// don't place on navigable Rivers.\r\n\t\t\t\tif (GameplayMap.isNavigableRiver(iX, iY)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst resourceAtThisLocal = GameplayMap.getResourceType(iX, iY);\r\n\r\n\t\t\t\t// don't place on resources\r\n\t\t\t\tif (resourceAtThisLocal !== -1) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// don't place on natural wonders\r\n\t\t\t\tif (GameplayMap.isNaturalWonder(iX, iY)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//check  to see if on coast to place the Coast discovery. Doing this before the water check, since Coast Terrain counts as water.\r\n\t\t\t\tif (\r\n\t\t\t\t\tterrainType === globals.g_CoastTerrain &&\r\n\t\t\t\t\tTerrainBuilder.getRandomNumber(100, \"Coast Check\") >= 65\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst discoveryType = DiscoveryDiceRoller();\r\n\t\t\t\t\tdiscoveryCounter++;\r\n\t\t\t\t\tif (MapConstructibles.addDiscovery(iX, iY, DiscoveryVisualTypes.IMPROVEMENT_COAST, discoveryType)) {\r\n\t\t\t\t\t\tdiscoveryPlacedCounter++;\r\n\t\t\t\t\t\tconsole.log(\"Discovery #\", discoveryCounter);\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"VALID coastal DISCOVERY SPOT FOUND!-------------------------------------\",\r\n\t\t\t\t\t\t\t\"X=\" + iLocation.x + \" Y=\" + iLocation.y,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t++totalCoastalDiscoveryNotPlaced;\r\n\t\t\t\t\t\tconsole.log(\"did not place COASTAL Discovery#: \" + discoveryCounter);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (terrainType === globals.g_OceanTerrain) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tGame.age == Database.makeHash(\"AGE_EXPLORATION\") &&\r\n\t\t\t\t\t\tTerrainBuilder.getRandomNumber(100, \"Coast Check\") >= 65\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tiX < westContinent.west ||\r\n\t\t\t\t\t\t\t(iX > westContinent.east && iX < eastContinent.west) ||\r\n\t\t\t\t\t\t\tiX > eastContinent.east\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconst discoveryType = DiscoveryDiceRoller();\r\n\t\t\t\t\t\t\tdiscoveryCounter++;\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tMapConstructibles.addDiscovery(\r\n\t\t\t\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\t\t\t\tDiscoveryVisualTypes.IMPROVEMENT_SHIPWRECK,\r\n\t\t\t\t\t\t\t\t\tdiscoveryType,\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tdiscoveryPlacedCounter++;\r\n\t\t\t\t\t\t\t\toceanDiscoveryCounter++;\r\n\t\t\t\t\t\t\t\tconsole.log(\"Discovery #\", discoveryCounter);\r\n\t\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\t\"VALID coastal DISCOVERY SPOT FOUND!-------------------------------------\",\r\n\t\t\t\t\t\t\t\t\t\"X=\" + iLocation.x + \" Y=\" + iLocation.y,\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t++totalOceanDiscoveryNotPlaced;\r\n\t\t\t\t\t\t\t\tconsole.log(\"did not place OCEAN discovery#: \" + discoveryCounter);\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// don't place on water (like in the Ocean tiles)\r\n\t\t\t\tif (GameplayMap.isWater(iX, iY)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdiscoveryCounter++;\r\n\t\t\t\tconst discoveryType = DiscoveryDiceRoller();\r\n\t\t\t\tconst discoveryTypeString = DiscoveryTypeString(discoveryType);\r\n\t\t\t\tlet discoveryHash = DiscoveryVisualTypes.INVALID;\r\n\t\t\t\tlet visualIndex = -1;\r\n\t\t\t\tif (discoveryType == DiscoveryActivationTypes.BASIC) {\r\n\t\t\t\t\tif (basicsMap.length > 0) {\r\n\t\t\t\t\t\tvisualIndex = TerrainBuilder.getRandomNumber(basicsMap.length, \"Discovery roll\");\r\n\t\t\t\t\t\tdiscoveryHash = basicsMap[visualIndex][0];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (investigationMap.length > 0) {\r\n\t\t\t\t\t\tvisualIndex = TerrainBuilder.getRandomNumber(investigationMap.length, \"Discovery roll\");\r\n\t\t\t\t\t\tdiscoveryHash = investigationMap[visualIndex][0];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst discoveryVisual = DiscoveryVisualString(discoveryHash);\r\n\t\t\t\tif (discoveryHash == DiscoveryVisualTypes.INVALID) {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"Could not find available discovery: \",\r\n\t\t\t\t\t\tdiscoveryTypeString,\r\n\t\t\t\t\t\t\"Discovery#: \",\r\n\t\t\t\t\t\tdiscoveryCounter,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t//place the discovery code:\r\n\t\t\t\tif (Game.age == Database.makeHash(\"AGE_EXPLORATION\")) {\r\n\t\t\t\t\tconsole.log(\"in exploration age\");\r\n\t\t\t\t\tconsole.log(\"Discovery #\", discoveryCounter);\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"VALID DISCOVERY SPOT FOUND-------------------------------------\",\r\n\t\t\t\t\t\t\"X=\" + iLocation.x + \" Y=\" + iLocation.y + \"  Type: \" + discoveryVisual,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (MapConstructibles.addDiscovery(iX, iY, discoveryHash, discoveryType)) {\r\n\t\t\t\t\t\tif (discoveryType == DiscoveryActivationTypes.BASIC) {\r\n\t\t\t\t\t\t\t--basicsMap[visualIndex][1];\r\n\t\t\t\t\t\t\tif (basicsMap[visualIndex][1] < 1) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"No more \", discoveryTypeString, discoveryVisual);\r\n\t\t\t\t\t\t\t\tbasicsMap.splice(visualIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t--investigationMap[visualIndex][1];\r\n\t\t\t\t\t\t\tif (investigationMap[visualIndex][1] < 1) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"No more \", discoveryTypeString, discoveryVisual);\r\n\t\t\t\t\t\t\t\tinvestigationMap.splice(visualIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdiscoveryPlacedCounter++;\r\n\t\t\t\t\t\tconst discoveryX = iX;\r\n\t\t\t\t\t\tconst discoveryY = iY;\r\n\r\n\t\t\t\t\t\tconsole.log(discoveryX, discoveryY, discoveryVisual, discoveryTypeString);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"did not place discovery#: \" +\r\n\t\t\t\t\t\t\t\tdiscoveryCounter +\r\n\t\t\t\t\t\t\t\t\" discovery visual: \" +\r\n\t\t\t\t\t\t\t\tdiscoveryVisual +\r\n\t\t\t\t\t\t\t\t\" discovery type: \" +\r\n\t\t\t\t\t\t\t\tdiscoveryTypeString,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"in antiquity age\");\r\n\t\t\t\t\tconsole.log(\"Discovery #\", discoveryCounter);\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"VALID DISCOVERY SPOT FOUND-------------------------------------\",\r\n\t\t\t\t\t\t\"X=\" + iLocation.x + \" Y=\" + iLocation.y + \"  Type: \" + discoveryVisual,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (MapConstructibles.addDiscovery(iX, iY, discoveryHash, discoveryType)) {\r\n\t\t\t\t\t\tif (discoveryType == DiscoveryActivationTypes.BASIC) {\r\n\t\t\t\t\t\t\t--basicsMap[visualIndex][1];\r\n\t\t\t\t\t\t\tif (basicsMap[visualIndex][1] < 1) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"No more \", discoveryTypeString, discoveryVisual);\r\n\t\t\t\t\t\t\t\tbasicsMap.splice(visualIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t--investigationMap[visualIndex][1];\r\n\t\t\t\t\t\t\tif (investigationMap[visualIndex][1] < 1) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"No more \", discoveryTypeString, discoveryVisual);\r\n\t\t\t\t\t\t\t\tinvestigationMap.splice(visualIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdiscoveryPlacedCounter++;\r\n\t\t\t\t\t\tconst discoveryX = iX;\r\n\t\t\t\t\t\tconst discoveryY = iY;\r\n\r\n\t\t\t\t\t\tconsole.log(discoveryX, discoveryY, discoveryVisual, discoveryTypeString);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"did not place discovery#: \" +\r\n\t\t\t\t\t\t\t\tdiscoveryCounter +\r\n\t\t\t\t\t\t\t\t\" discovery visual: \" +\r\n\t\t\t\t\t\t\t\tdiscoveryVisual +\r\n\t\t\t\t\t\t\t\t\" discovery type: \" +\r\n\t\t\t\t\t\t\t\tdiscoveryTypeString,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"Basics: \");\r\n\tfor (const [key, value] of basicsMap) {\r\n\t\tconsole.log(key, \"->\", value);\r\n\t}\r\n\tconsole.log(\"investigations: \");\r\n\tfor (const [key, value] of investigationMap) {\r\n\t\tconsole.log(key, \"->\", value);\r\n\t}\r\n\r\n\tconsole.log(\"Total Discoveries Placed: \" + discoveryPlacedCounter);\r\n\tconsole.log(\"Total ocean Discoveries Placed: \" + oceanDiscoveryCounter);\r\n\tconsole.log(\"Total Coastal Discoveries Not Placed: \" + totalCoastalDiscoveryNotPlaced);\r\n\tconsole.log(\"Total Ocean Discoveries Not Placed: \" + totalOceanDiscoveryNotPlaced);\r\n\tconsole.log(\"could not place this many discoveries: \" + (discoveryCounter - discoveryPlacedCounter));\r\n}\r\n"],"names":["globals.g_OceanWaterColumns","globals.g_RequiredDistanceFromMajorForDiscoveries","globals.g_CoastTerrain","discoveryType","globals.g_OceanTerrain"],"mappings":"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"}