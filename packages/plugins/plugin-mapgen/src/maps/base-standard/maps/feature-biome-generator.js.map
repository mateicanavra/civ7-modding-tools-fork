{"version":3,"file":"feature-biome-generator.js","sources":["../../../modules/base-standard/maps/feature-biome-generator.ts"],"sourcesContent":["import * as globals from \"#base/maps/map-globals.js\";\r\nimport * as utilities from \"#base/maps/map-utilities.js\";\r\n\r\nexport function designateBiomes(iWidth: number, iHeight: number) {\r\n\tconsole.log(\"Biomes\");\r\n\r\n\tlet iTotalLandPlots = 0;\r\n\tlet iTotalLandPlotsAbove = 0;\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst latitude: number = GameplayMap.getPlotLatitude(iX, iY);\r\n\t\t\tif (!GameplayMap.isWater(iX, iY)) {\r\n\t\t\t\tiTotalLandPlots = iTotalLandPlots + 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (!GameplayMap.isWater(iX, iY) && globals.g_PlainsLatitude < latitude) {\r\n\t\t\t\tiTotalLandPlotsAbove = iTotalLandPlotsAbove + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tlet iPlainsLowering = 0;\r\n\tlet iDesertLowering = 0;\r\n\tlet iGrassLowering = 0;\r\n\tlet iTropicalLowering = 0;\r\n\r\n\tif (Math.round((iTotalLandPlots / 5.0) * 2.0 * 0.75) > iTotalLandPlotsAbove) {\r\n\t\tiPlainsLowering += 5;\r\n\t\tiDesertLowering += 4;\r\n\t\tiGrassLowering += 4;\r\n\t\tiTropicalLowering += 2;\r\n\t\tconsole.log(\r\n\t\t\t\"Less \" + \" iTotalLandPlots: \" + iTotalLandPlots + \" iTotalLandPlotsAbove: \" + iTotalLandPlotsAbove,\r\n\t\t);\r\n\t}\r\n\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tif (GameplayMap.isWater(iX, iY)) {\r\n\t\t\t\tTerrainBuilder.setBiomeType(iX, iY, globals.g_MarineBiome);\r\n\t\t\t} else {\r\n\t\t\t\tlet latitude: number = GameplayMap.getPlotLatitude(iX, iY);\r\n\r\n\t\t\t\tif (latitude < 0) latitude = -1 * latitude;\r\n\r\n\t\t\t\tlatitude += Math.round(GameplayMap.getElevation(iX, iY) / 120.0);\r\n\r\n\t\t\t\tif (GameplayMap.isRiver(iX, iY)) {\r\n\t\t\t\t\tlatitude -= 10;\r\n\t\t\t\t} else if (GameplayMap.isAdjacentToRivers(iX, iY, 1)) {\r\n\t\t\t\t\tlatitude -= 5;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst rainfall: number = GameplayMap.getRainfall(iX, iY);\r\n\t\t\t\tif (latitude < globals.g_TropicalLatitude - iTropicalLowering && rainfall < 85) {\r\n\t\t\t\t\tTerrainBuilder.setBiomeType(iX, iY, globals.g_PlainsBiome);\r\n\t\t\t\t} else if (latitude < globals.g_TropicalLatitude - iTropicalLowering) {\r\n\t\t\t\t\tTerrainBuilder.setBiomeType(iX, iY, globals.g_TropicalBiome);\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tlatitude < globals.g_PlainsLatitude - iPlainsLowering ||\r\n\t\t\t\t\t(latitude < globals.g_TropicalLatitude - iTropicalLowering && rainfall < 85)\r\n\t\t\t\t) {\r\n\t\t\t\t\tTerrainBuilder.setBiomeType(iX, iY, globals.g_PlainsBiome);\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tlatitude < globals.g_DesertLatitude - iDesertLowering ||\r\n\t\t\t\t\t(latitude < globals.g_PlainsLatitude - iPlainsLowering && rainfall < 85)\r\n\t\t\t\t) {\r\n\t\t\t\t\tTerrainBuilder.setBiomeType(iX, iY, globals.g_DesertBiome);\r\n\t\t\t\t} else if (latitude < globals.g_GrasslandLatitude - iGrassLowering) {\r\n\t\t\t\t\tTerrainBuilder.setBiomeType(iX, iY, globals.g_GrasslandBiome);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tTerrainBuilder.setBiomeType(iX, iY, globals.g_TundraBiome);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function addFeatures(iWidth: number, iHeight: number) {\r\n\tconsole.log(\"Features\");\r\n\taddPositionalFeatures(iWidth, iHeight);\r\n\tscatterFeatures(iWidth, iHeight);\r\n\taddIce(iWidth, iHeight);\r\n\taddReefs(iWidth, iHeight);\r\n}\r\n\r\nfunction addPositionalFeatures(iWidth: number, iHeight: number) {\r\n\t// Find next specific position\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\t//let _biome: BiomeType = GameplayMap.getBiomeType(iX, iY);\r\n\t\t\tconst feature: FeatureType = GameplayMap.getFeatureType(iX, iY);\r\n\r\n\t\t\tif (\r\n\t\t\t\tGameplayMap.isWater(iX, iY) == false &&\r\n\t\t\t\tfeature == FeatureTypes.NO_FEATURE &&\r\n\t\t\t\tGameplayMap.isNavigableRiver(iX, iY) == false\r\n\t\t\t) {\r\n\t\t\t\t// Along coast?\r\n\t\t\t\tif (GameplayMap.isCoastalLand(iX, iY)) {\r\n\t\t\t\t\t// See if we can scatter a feature here\r\n\t\t\t\t\tfor (var featIdx = 0; featIdx < GameInfo.Features.length; featIdx++) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tcanAddFeature(\r\n\t\t\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\t\t\tfeatIdx,\r\n\t\t\t\t\t\t\t\tfalse /*bScatterable*/,\r\n\t\t\t\t\t\t\t\tfalse /*bRiverMouth*/,\r\n\t\t\t\t\t\t\t\ttrue /*bCoastal*/,\r\n\t\t\t\t\t\t\t\tfalse /*bNearRiver*/,\r\n\t\t\t\t\t\t\t\tfalse /*bIsolated*/,\r\n\t\t\t\t\t\t\t\tfalse /*bReef*/,\r\n\t\t\t\t\t\t\t\tfalse /*bIce*/,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconst iScatterChance = GameInfo.Features[featIdx].PlacementDensity;\r\n\t\t\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(100, \"Feature Scatter\");\r\n\t\t\t\t\t\t\tif (iRoll < iScatterChance) {\r\n\t\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\t\tFeature: featIdx,\r\n\t\t\t\t\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\t\t\t\t\tElevation: 0,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(iX, iY, featureParam);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Near multiple river hexes?\r\n\t\t\t\telse if (GameplayMap.isAdjacentToRivers(iX, iY, 2)) {\r\n\t\t\t\t\t// See if we can scatter a feature here\r\n\t\t\t\t\tfor (var featIdx = 0; featIdx < GameInfo.Features.length; featIdx++) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tcanAddFeature(\r\n\t\t\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\t\t\tfeatIdx,\r\n\t\t\t\t\t\t\t\tfalse /*bScatterable*/,\r\n\t\t\t\t\t\t\t\tfalse /*bRiverMouth*/,\r\n\t\t\t\t\t\t\t\tfalse /*bCoastal*/,\r\n\t\t\t\t\t\t\t\ttrue /*bNearRiver*/,\r\n\t\t\t\t\t\t\t\tfalse /*bIsolated*/,\r\n\t\t\t\t\t\t\t\tfalse /*bReef*/,\r\n\t\t\t\t\t\t\t\tfalse /*bIce*/,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconst iScatterChance = GameInfo.Features[featIdx].PlacementDensity;\r\n\t\t\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(100, \"Feature Scatter\");\r\n\t\t\t\t\t\t\tif (iRoll < iScatterChance) {\r\n\t\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\t\tFeature: featIdx,\r\n\t\t\t\t\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\t\t\t\t\tElevation: 0,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(iX, iY, featureParam);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Away from water?\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (GameplayMap.isAdjacentToRivers(iX, iY, 1)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} else if (GameplayMap.isCoastalLand(iX, iY)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (var featIdx = 0; featIdx < GameInfo.Features.length; featIdx++) {\r\n\t\t\t\t\t\t// Must not already be in an adjacent plot\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t!GameplayMap.isAdjacentToFeature(iX, iY, featIdx) &&\r\n\t\t\t\t\t\t\tcanAddFeature(\r\n\t\t\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\t\t\tfeatIdx,\r\n\t\t\t\t\t\t\t\tfalse /*bScatterable*/,\r\n\t\t\t\t\t\t\t\tfalse /*bRiverMouth*/,\r\n\t\t\t\t\t\t\t\tfalse /*bCoastal*/,\r\n\t\t\t\t\t\t\t\tfalse /*bNearRiver*/,\r\n\t\t\t\t\t\t\t\ttrue /*bIsolated*/,\r\n\t\t\t\t\t\t\t\tfalse /*bReef*/,\r\n\t\t\t\t\t\t\t\tfalse /*bIce*/,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconst iScatterChance = GameInfo.Features[featIdx].PlacementDensity;\r\n\t\t\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(100, \"Feature Scatter\");\r\n\t\t\t\t\t\t\tif (iRoll < iScatterChance) {\r\n\t\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\t\tFeature: featIdx,\r\n\t\t\t\t\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\t\t\t\t\tElevation: 0,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(iX, iY, featureParam);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction scatterFeatures(iWidth: number, iHeight: number) {\r\n\t// Find spots and use PlacementDensity to decide whether or not to place it\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst feature: FeatureType = GameplayMap.getFeatureType(iX, iY);\r\n\r\n\t\t\tif (\r\n\t\t\t\tGameplayMap.isWater(iX, iY) == false &&\r\n\t\t\t\tfeature == FeatureTypes.NO_FEATURE &&\r\n\t\t\t\tGameplayMap.isNavigableRiver(iX, iY) == false\r\n\t\t\t) {\r\n\t\t\t\t// See if we can scatter a feature here\r\n\t\t\t\tfor (let featIdx = 0; featIdx < GameInfo.Features.length; featIdx++) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tcanAddFeature(\r\n\t\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\t\tfeatIdx,\r\n\t\t\t\t\t\t\ttrue /*bScatterable*/,\r\n\t\t\t\t\t\t\tfalse /*bRiverMouth*/,\r\n\t\t\t\t\t\t\tfalse /*bCoastal*/,\r\n\t\t\t\t\t\t\tfalse /*bNearRiver*/,\r\n\t\t\t\t\t\t\tfalse /*bIsolated*/,\r\n\t\t\t\t\t\t\tfalse /*bReef*/,\r\n\t\t\t\t\t\t\tfalse /*bIce*/,\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tconst iScatterChance = GameInfo.Features[featIdx].PlacementDensity;\r\n\t\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(100, \"Feature Scatter\");\r\n\t\t\t\t\t\tif (iRoll < iScatterChance) {\r\n\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\tFeature: featIdx,\r\n\t\t\t\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\t\t\t\tElevation: 0,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(iX, iY, featureParam);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addReefs(iWidth: number, iHeight: number) {\r\n\t// Find spots and use PlacementDensity to decide whether or not to place it\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst feature: FeatureType = GameplayMap.getFeatureType(iX, iY);\r\n\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == true && feature == FeatureTypes.NO_FEATURE) {\r\n\t\t\t\t// See if we can scatter a feature here\r\n\t\t\t\tlet latitude: number = GameplayMap.getPlotLatitude(iX, iY);\r\n\t\t\t\tif (latitude < 0) latitude = -1 * latitude;\r\n\r\n\t\t\t\tfor (let featIdx = 0; featIdx < GameInfo.Features.length; featIdx++) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tcanAddFeature(\r\n\t\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\t\tfeatIdx,\r\n\t\t\t\t\t\t\tfalse /*bScatterable*/,\r\n\t\t\t\t\t\t\tfalse /*bRiverMouth*/,\r\n\t\t\t\t\t\t\tfalse /*bCoastal*/,\r\n\t\t\t\t\t\t\tfalse /*bNearRiver*/,\r\n\t\t\t\t\t\t\tfalse /*bIsolated*/,\r\n\t\t\t\t\t\t\ttrue /*bReef*/,\r\n\t\t\t\t\t\t\tfalse /*bIce*/,\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tGameInfo.Features[featIdx].MinLatitude <= latitude &&\r\n\t\t\t\t\t\t\tGameInfo.Features[featIdx].MaxLatitude > latitude\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconst iScatterChance = GameInfo.Features[featIdx].PlacementDensity;\r\n\t\t\t\t\t\t\tconst iWeight: number = (latitude + 50) * 2;\r\n\t\t\t\t\t\t\tconst iRoll = TerrainBuilder.getRandomNumber(iWeight, \"Feature Reef\");\r\n\t\t\t\t\t\t\tif (iRoll < iScatterChance) {\r\n\t\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\t\tFeature: featIdx,\r\n\t\t\t\t\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\t\t\t\t\tElevation: 0,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(iX, iY, featureParam);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addIce(iWidth: number, iHeight: number) {\r\n\t// Find spots and use PlacementDensity to decide whether or not to place it\r\n\tfor (let iY = 0; iY < iHeight; iY++) {\r\n\t\tfor (let iX = 0; iX < iWidth; iX++) {\r\n\t\t\tconst feature: FeatureType = GameplayMap.getFeatureType(iX, iY);\r\n\r\n\t\t\tif (GameplayMap.isWater(iX, iY) == true && feature == FeatureTypes.NO_FEATURE) {\r\n\t\t\t\t// See if we can scatter a feature here\r\n\t\t\t\tlet latitude: number = GameplayMap.getPlotLatitude(iX, iY);\r\n\t\t\t\tif (latitude < 0) latitude = -1 * latitude - 5;\r\n\r\n\t\t\t\tif (latitude > 78) {\r\n\t\t\t\t\tfor (let featIdx = 0; featIdx < GameInfo.Features.length; featIdx++) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tcanAddFeature(\r\n\t\t\t\t\t\t\t\tiX,\r\n\t\t\t\t\t\t\t\tiY,\r\n\t\t\t\t\t\t\t\tfeatIdx,\r\n\t\t\t\t\t\t\t\tfalse /*bScatterable*/,\r\n\t\t\t\t\t\t\t\tfalse /*bRiverMouth*/,\r\n\t\t\t\t\t\t\t\tfalse /*bCoastal*/,\r\n\t\t\t\t\t\t\t\tfalse /*bNearRiver*/,\r\n\t\t\t\t\t\t\t\tfalse /*bIsolated*/,\r\n\t\t\t\t\t\t\t\tfalse /*bReef*/,\r\n\t\t\t\t\t\t\t\ttrue /*bIce*/,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconst iScatterChance = GameInfo.Features[featIdx].PlacementDensity;\r\n\t\t\t\t\t\t\tlet iScore: number = TerrainBuilder.getRandomNumber(100, \"Feature Ice\");\r\n\t\t\t\t\t\t\tiScore = iScore + latitude;\r\n\r\n\t\t\t\t\t\t\tif (GameplayMap.isAdjacentToLand(iX, iY)) {\r\n\t\t\t\t\t\t\t\tiScore = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (utilities.isAdjacentToNaturalWonder(iX, iY)) {\r\n\t\t\t\t\t\t\t\tiScore = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (iScore > iScatterChance) {\r\n\t\t\t\t\t\t\t\tconst featureParam = {\r\n\t\t\t\t\t\t\t\t\tFeature: featIdx,\r\n\t\t\t\t\t\t\t\t\tDirection: -1,\r\n\t\t\t\t\t\t\t\t\tElevation: 0,\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tTerrainBuilder.setFeatureType(iX, iY, featureParam);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction canAddFeature(\r\n\tiX: number,\r\n\tiY: number,\r\n\tfeature: number,\r\n\tbScatterable: boolean,\r\n\tbRiverMouth: boolean,\r\n\tbCoastal: boolean,\r\n\tbNearRiver: boolean,\r\n\tbIsolated: boolean,\r\n\tbReef: boolean,\r\n\tbIce: boolean,\r\n): boolean {\r\n\t// Check DB to see if this is scatterable\r\n\tif (!bScatterable || GameInfo.Features[feature].PlacementClass == \"SCATTER\") {\r\n\t\tif (!bRiverMouth || GameInfo.Features[feature].PlacementClass == \"RIVERMOUTH\") {\r\n\t\t\tif (!bCoastal || GameInfo.Features[feature].PlacementClass == \"COASTAL\") {\r\n\t\t\t\tif (!bNearRiver || GameInfo.Features[feature].PlacementClass == \"NEARRIVER\") {\r\n\t\t\t\t\tif (!bIsolated || GameInfo.Features[feature].PlacementClass == \"ISOLATED\") {\r\n\t\t\t\t\t\tif (!bReef || GameInfo.Features[feature].PlacementClass == \"REEF\") {\r\n\t\t\t\t\t\t\tif (!bIce || GameInfo.Features[feature].PlacementClass == \"ICE\") {\r\n\t\t\t\t\t\t\t\treturn TerrainBuilder.canHaveFeature(iX, iY, feature);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n"],"names":["globals.g_PlainsLatitude","globals.g_MarineBiome","globals.g_TropicalLatitude","globals.g_PlainsBiome","globals.g_TropicalBiome","globals.g_DesertLatitude","globals.g_DesertBiome","globals.g_GrasslandLatitude","globals.g_GrasslandBiome","globals.g_TundraBiome","utilities.isAdjacentToNaturalWonder"],"mappings":"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"}