@use 'sass:math';
@use 'sass:string';
@use 'theme';
@use '../../utilities/utility-layout' as *;

// Utility classes
// Definitely NOT tailwindcss

// display, flex or none for gameface
.flex {
	display: flex;
}

// visibility
.visible {
	visibility: visible;
}

.invisible {
	visibility: hidden;
}

//position
.relative {
	position: relative;
}

.absolute {
	position: absolute;
}

.fixed {
	position: fixed;
}

// pointer events
.pointer-events-none {
	pointer-events: none;
}

.pointer-events-auto {
	pointer-events: auto;
}

// flex
.flex-1 {
	flex: 1 1 0%;
}

.flex-2 {
	flex: 2 2 0;
}

.flex-3 {
	flex: 3 3 0;
}

.flex-4 {
	flex: 4 4 0;
}

.flex-auto {
	flex: 1 1 auto;
}

.flex-initial {
	flex: 0 1 auto;
}

.flex-none {
	flex: none;
}

// flex grow
.grow-0 {
	flex-grow: 0;
}

.grow {
	flex-grow: 1;
}

// flex shrink
.shrink-0 {
	flex-shrink: 0;
}

.shrink {
	flex-shrink: 1;
}

// flex direction
.flex-row {
	flex-direction: row;
}

.flex-row-reverse {
	flex-direction: row-reverse;
}

.flex-col {
	flex-direction: column;
}

.flex-col-reverse {
	flex-direction: column-reverse;
}

// flex wrap
.flex-wrap {
	flex-wrap: wrap;
}

.flex-nowrap {
	flex-wrap: nowrap;
}

.flex-wrap-reverse {
	flex-wrap: wrap-reverse;
}

// z-index
.-z-1 {
	z-index: -1;
}

.z-0 {
	z-index: 0;
}

.z-1 {
	z-index: 1;
}

// cursor
.cursor-auto {
	cursor: auto;
}

.cursor-text {
	cursor: text;
}

.cursor-pointer {
	cursor: pointer;
}

.cursor-not-allowed {
	cursor: not-allowed;
}

.cursor-help {
	cursor: help;
}

.cursor-wait {
	cursor: wait;
}

// transition
.transition-opacity {
	transition: opacity theme.$transition-duration-default ease-in-out;
}

.transition-transform {
	transition: transform theme.$transition-duration-default ease-in-out;
}

.transition-color {
	transition: color theme.$transition-duration-default ease-in-out;
}

.transition-border-color {
	transition: border-color theme.$transition-duration-default ease-in-out;
}

.transition-height {
	transition: height theme.$transition-duration-default ease-in-out;
}

.transition-width {
	transition: width theme.$transition-duration-default ease-in-out;
}

.transition-top {
	transition: top theme.$transition-duration-default ease-in-out;
}

.transition-right {
	transition: right theme.$transition-duration-default ease-in-out;
}

.transition-bottom {
	transition: bottom theme.$transition-duration-default ease-in-out;
}

.transition-left {
	transition: left theme.$transition-duration-default ease-in-out;
}

.transition-all {
	transition: all theme.$transition-duration-default ease-in-out;
}

.ease-linear {
	transition-timing-function: linear;
}

.ease-in {
	transition-timing-function: ease-in;
}

.ease-out {
	transition-timing-function: ease-out;
}

.ease-in-out {
	transition-timing-function: ease-in-out;
}

// transition duration
@each $suffix, $value in theme.$transition-duration {
	.duration-#{$suffix} {
		transition-duration: $value;
	}
}

// opacity
@for $i from 0 through 20 {
	$value: $i * 5;

	.opacity-#{$value} {
		opacity: math.div(($value), 100);
	}

	.group:hover .group-hover\:opacity-#{$value},
	.hover\:opacity-#{$value}:hover {
		opacity: math.div(($value), 100);
	}

	.group:focus .group-focus\:opacity-#{$value},
	.focus\:opacity-#{$value}:focus {
		opacity: math.div(($value), 100);
	}

	.group:active .group-active\:opacity-#{$value},
	.active\:opacity-#{$value}:active {
		opacity: math.div(($value), 100);
	}
}


// transform origin
.origin-center {
	transform-origin: center;
}

.origin-top {
	transform-origin: top;
}

.origin-top-right {
	transform-origin: top right;
}

.origin-bottom-right {
	transform-origin: bottom right;
}

.origin-bottom {
	transform-origin: bottom;
}

.origin-bottom-left {
	transform-origin: bottom left;
}

.origin-left {
	transform-origin: left;
}

.origin-top-left {
	transform-origin: top left;
}

// transform translate
$translate-values: (
	0: 0,
	1\/4: 25%,
	1\/3: 33.3333%,
	1\/2: 50%,
	2\/3: 66.6667%,
	3\/4: 75%,
	full: 100%
);

@each $name, $value in $translate-values {
	.translate-x-#{$name} {
		transform: translateX($value);
	}

	.translate-y-#{$name} {
		transform: translateY($value);
	}

	@if $value !=0 {
		.-translate-x-#{$name} {
			transform: translateX(-$value);
		}

		.-translate-y-#{$name} {
			transform: translateY(-$value);
		}
	}
}

// transform scale
$scale-values: (
	0: 0,
	50: 0.5,
	90: 0.9,
	95: 0.95,
	100: 1,
	105: 1.05,
	110: 1.1,
	125: 1.25,
	150: 1.5,
	200: 2
);

@each $name, $value in $scale-values {
	.scale-#{$name} {
		transform: scale($value);
	}

	.group:hover .group-hover\:scale-#{$name},
	.hover\:scale-#{$name}:hover {
		transform: scale($value);
	}

	.group:focus .group-focus\:scale-#{$name},
	.focus\:scale-#{$name}:focus {
		transform: scale($value);
	}

	.group:active .group-active\:scale-#{$name},
	.active\:scale-#{$name}:active {
		transform: scale($value);
	}

	.scale-x-#{$name} {
		transform: scaleX($value);
	}

	.scale-y-#{$name} {
		transform: scaleY($value);
	}

	.-scale-#{$name} {
		transform: scale(-$value);
	}

	.group:hover .group-hover\:-scale-#{$name},
	.hover\:-scale-#{$name}:hover {
		transform: scale(-$value);
	}

	.group:focus .group-focus\:-scale-#{$name},
	.focus\:-scale-#{$name}:focus {
		transform: scale(-$value);
	}

	.group:active .group-active\:-scale-#{$name},
	.active\:-scale-#{$name}:active {
		transform: scale(-$value);
	}

	.-scale-x-#{$name} {
		transform: scaleX(-$value);
	}

	.-scale-y-#{$name} {
		transform: scaleY(-$value);
	}
}

// transform rotate
$rotate-values: (
	0: 0,
	45: 45deg,
	90: 90deg,
	180: 180deg
);

@each $name, $value in $rotate-values {
	.rotate-#{$name} {
		transform: rotate($value);
	}

	.-rotate-#{$name} {
		transform: rotate(-$value);
	}

	.rotate-x-#{$name} {
		transform: rotateX($value);
	}

	.-rotate-x-#{$name} {
		transform: rotateX(-$value);
	}

	.rotate-y-#{$name} {
		transform: rotateY($value);
	}

	.-rotate-y-#{$name} {
		transform: rotateY(-$value);
	}
}


/* Flex flow utilities */
.flow-column {
	display: flex;
	flex-direction: column;
	flex-wrap: nowrap;
}

.flow-column-wrap {
	display: flex;
	flex-direction: column;
	flex-wrap: wrap;
}

.flow-column-reverse {
	display: flex;
	flex-direction: column;
	flex-wrap: wrap-reverse;
}

.flow-row {
	display: flex;
	flex-direction: row;
	flex-wrap: nowrap;
}

.flow-row-wrap {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
}

.flow-row-reverse {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap-reverse;
}

/* Contain utilities */
.contain-strict {
	contain: strict;
}

.contain-content {
	contain: content;
}

.contain-none {
	contain: none;
}


@function generate-utility-name($prefix, $suffix) {
	@if $suffix =='DEFAULT' {
		@return $prefix;
	}

	@else {
		@return #{$prefix}-#{$suffix};
	}
}

@mixin utility($prefix, $suffix, $property, $value, $modifiers: false) {
	$utility-name: generate-utility-name($prefix, $suffix);

	.#{$utility-name} {
		#{$property}: $value;
	}

	@if $modifiers {

		.group:hover .group-hover\:#{$utility-name},
		.hover\:#{$utility-name}:hover {
			#{$property}: $value;
		}

		.group:focus .group-focus\:#{$utility-name},
		.focus\:#{$utility-name}:focus {
			#{$property}: $value;
		}

		.group:active .group-active\:#{$utility-name},
		.active\:#{$utility-name}:active {
			#{$property}: $value;
		}
	}

}

@mixin utility-from-map($prefix, $suffix, $map, $modifiers: false) {
	$utility-name: generate-utility-name($prefix, $suffix);

	.#{$utility-name} {
		@each $property, $value in $map {
			#{$property}: $value;
		}
	}
}

/* Border widths */
@each $suffix, $value in theme.$border-widths {
	@include utility-from-map('border', $suffix, ('border-width': $value, 'border-style': solid));
	@include utility-from-map('border-t', $suffix, ('border-top-width': $value, 'border-top-style': solid));
	@include utility-from-map('border-r', $suffix, ('border-right-width': $value, 'border-right-style': solid));
	@include utility-from-map('border-b', $suffix, ('border-bottom-width': $value, 'border-bottom-style': solid));
	@include utility-from-map('border-l', $suffix, ('border-left-width': $value, 'border-left-style': solid));
}

@each $suffix, $value in theme.$border-radius {
	@include utility('rounded', $suffix, 'border-radius', $value);
	// can be uncommented if needed
	// @include utility('rounded-tl', $suffix, 'border-top-left-radius', $value);
	// @include utility('rounded-tr', $suffix, 'border-top-right-radius', $value);
	// @include utility('rounded-br', $suffix, 'border-bottom-right-radius', $value);
	// @include utility('rounded-bl', $suffix, 'border-bottom-left-radius', $value);
}

/* Text Gradient utilities */

// This should probably be added to the theme, but it's not in the official 
.text-gradient-secondary {
	fxs-font-gradient-color: #e6dac3;
	color: theme.color('secondary-2');
}

/* Color utilities */
@each $suffix, $value in theme.$colors {

	@include utility('text', $suffix, 'color', $value, true);
	@include utility('text-gradient', $suffix, 'fxs-font-gradient-color', $value, false);
	@include utility('bg', $suffix, 'background-color', $value, true);
	@include utility('border', $suffix, 'border-color', $value, true);
	@include utility('border-t', $suffix, 'border-top-color', $value, true);
	@include utility('border-r', $suffix, 'border-right-color', $value, true);
	@include utility('border-b', $suffix, 'border-bottom-color', $value, true);
	@include utility('border-l', $suffix, 'border-left-color', $value, true);
	@include utility('tint-border', $suffix, 'fxs-border-image-tint', $value, false);
	@include utility('tint-bg', $suffix, 'fxs-background-image-tint', $value, true);
}


/* Spacing utilities */
.min-w-screen {
	min-width: 100vw;
}

.w-screen {
	width: 100vw;
}

.max-w-screen {
	max-width: 100vw;
}

.min-h-screen {
	min-height: 100vh;
}

.h-screen {
	height: 100vh;
}

.max-h-screen {
	max-height: 100vh;
}

@each $suffix, $value in theme.$spacing {

	/* top/right/bottom/left/inset utilities */
	.top-#{$suffix} {
		top: $value;
	}

	.right-#{$suffix} {
		right: $value;
	}

	.bottom-#{$suffix} {
		bottom: $value;
	}

	.left-#{$suffix} {
		left: $value;
	}

	.inset-#{$suffix} {
		top: $value;
		right: $value;
		bottom: $value;
		left: $value;
	}

	.inset-x-#{$suffix} {
		left: $value;
		right: $value;
	}

	.inset-y-#{$suffix} {
		top: $value;
		bottom: $value;
	}

	@if theme.negative-compatible($suffix) {
		.-top-#{$suffix} {
			top: -$value;
		}

		.-right-#{$suffix} {
			right: -$value;
		}

		.-bottom-#{$suffix} {
			bottom: -$value;
		}

		.-left-#{$suffix} {
			left: -$value;
		}

		.-inset-#{$suffix} {
			top: -$value;
			right: -$value;
			bottom: -$value;
			left: -$value;
		}

		.-inset-x-#{$suffix} {
			left: -$value;
			right: -$value;
		}

		.-inset-y-#{$suffix} {
			top: -$value;
			bottom: -$value;
		}
	}


	/* Width utilities */
	.w-#{$suffix} {
		width: $value;
	}

	.min-w-#{$suffix} {
		min-width: $value;
	}

	@if $suffix !='auto' {
		.max-w-#{$suffix} {
			max-width: $value;
		}
	}

	/* Height utilities */
	.h-#{$suffix} {
		height: $value;
	}

	.min-h-#{$suffix} {
		min-height: $value;
	}

	@if $suffix !='auto' {
		.max-h-#{$suffix} {
			max-height: $value;
		}
	}

	/* Size Utilities */
	.size-#{$suffix} {
		width: $value;
		height: $value;
	}

	/* Padding utilities */
	@if $suffix !='auto' {
		.p-#{$suffix} {
			padding: $value;
		}

		.px-#{$suffix} {
			padding-left: $value;
			padding-right: $value;
		}

		.py-#{$suffix} {
			padding-top: $value;
			padding-bottom: $value;
		}

		.pt-#{$suffix} {
			padding-top: $value;
		}

		.pr-#{$suffix} {
			padding-right: $value;
		}

		.pb-#{$suffix} {
			padding-bottom: $value;
		}

		.pl-#{$suffix} {
			padding-left: $value;
		}
	}

	/* Margin utilities */
	.m-#{$suffix} {
		margin: $value;
	}

	.mx-#{$suffix} {
		margin-left: $value;
		margin-right: $value;
	}

	.my-#{$suffix} {
		margin-top: $value;
		margin-bottom: $value;
	}

	.mt-#{$suffix} {
		margin-top: $value;
	}

	.mr-#{$suffix} {
		margin-right: $value;
	}

	.mb-#{$suffix} {
		margin-bottom: $value;
	}

	.ml-#{$suffix} {
		margin-left: $value;
	}

	@if theme.negative-compatible($suffix) {
		.-m-#{$suffix} {
			margin: -$value;
		}

		.-mx-#{$suffix} {
			margin-left: -$value;
			margin-right: -$value;
		}

		.-my-#{$suffix} {
			margin-top: -$value;
			margin-bottom: -$value;
		}

		.-mt-#{$suffix} {
			margin-top: -$value;
		}

		.-mr-#{$suffix} {
			margin-right: -$value;
		}

		.-mb-#{$suffix} {
			margin-bottom: -$value;
		}

		.-ml-#{$suffix} {
			margin-left: -$value;
		}
	}
}


/* Background Utilities */
.bg-none {
	background: none;
}

//background position
.bg-bottom {
	background-position: bottom;
}

.bg-center {
	background-position: center;
}

.bg-left {
	background-position: left;
}

.bg-left-bottom {
	background-position: left bottom;
}

.bg-left-top {
	background-position: left top;
}

.bg-right {
	background-position: right;
}

.bg-right-bottom {
	background-position: right bottom;
}

.bg-right-top {
	background-position: right top;
}

.bg-top {
	background-position: top;
}

//background size
.bg-auto {
	background-size: auto;
}

.bg-cover {
	background-size: cover;
}

.bg-contain {
	background-size: contain;
}

.bg-full {
	background-size: 100% 100%;
}

//background repeat
.bg-repeat {
	background-repeat: repeat;
}

.bg-no-repeat {
	background-repeat: no-repeat;
}

.bg-repeat-x {
	background-repeat: repeat-x;
}

.bg-repeat-y {
	background-repeat: repeat-y;
}

.bg-repeat-round {
	background-repeat: round;
}

/*
Not supported as of Gameface 1.56
.bg-repeat-space {
	background-repeat: space;
}
*/

/* Alignment utilities */
.justify-around {
	justify-content: space-around;
}

.justify-between {
	justify-content: space-between;
}

.justify-center {
	justify-content: center;
}

.justify-end {
	justify-content: flex-end;
}

.justify-start {
	justify-content: flex-start;
}

.items-end {
	align-items: flex-end;
}

.items-center {
	align-items: center;
}

.items-stretch {
	align-items: stretch;
}

.items-start {
	align-items: flex-start;
}

.content-start {
	align-content: flex-start;
}

.content-stretch {
	align-content: stretch;
}

.self-center {
	align-self: center;
}

.self-end {
	align-self: flex-end;
}

.self-start {
	align-self: flex-start;
}

.self-stretch {
	align-self: stretch;
}

/* Overflow Utilities */
.overflow-auto {
	overflow: auto;
}

.overflow-hidden {
	overflow: hidden;
}

.overflow-visible {
	overflow: visible;
}

.overflow-scroll {
	overflow: scroll;
}

.overflow-x-auto {
	overflow-x: auto;
}

.overflow-x-hidden {
	overflow-x: hidden;
}

.overflow-x-scroll {
	overflow-x: scroll;
}

.overflow-y-auto {
	overflow-y: auto;
}

.overflow-y-hidden {
	overflow-y: hidden;
}

.overflow-y-scroll {
	overflow-y: scroll;
}

/* Fullscreen helper */
.fullscreen {
	@extend .absolute, .inset-0, .contain-strict, .overflow-hidden;
	padding-top: var(--safezone-top);
	padding-bottom: var(--safezone-bottom);
	padding-left: var(--safezone-left);
	padding-right: var(--safezone-right);
}

.fullscreen-outside-safezone {
	top: -var(--safezone-top);
	bottom: -var(--safezone-bottom);
	left: -var(--safezone-left);
	right: -var(--safezone-right);
}

.fullscreen-outside-safezone-y {
	top: -var(--safezone-top);
	bottom: -var(--safezone-bottom);
}

.fullscreen-outside-safezone-x {
	left: -var(--safezone-left);
	right: -var(--safezone-right);
}

.fullscreen-outside-safezone-bot {
	bottom: -var(--safezone-bottom);
}

.fullscreen-outside-safezone-top {
	top: -var(--safezone-top);
}

.fullscreen-outside-safezone-x-top {
	top: -var(--safezone-top);
	left: -var(--safezone-left);
	right: -var(--safezone-right);
}

.whitespace-nowrap {
	white-space: nowrap;
}

.whitespace-normal {
	white-space: normal;
}

.hidden {
	display: none;
}

.hidden-important {
	display: none !important;
}