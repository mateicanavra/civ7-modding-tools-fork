/**
 * This file contains constants that are used in the network utilities. Do not include any imports in this file.
 * @copyright 2025, Firaxis Games
 */
// See FFireWireTypes.h, index.d.ts, and screen-mp-chat.ts
export const abandonStrToErrorBody = new Map([
    [KickReason.KICK_NO_HOST, "LOC_GAME_ABANDONED_HOST_LOSTED"],
    [KickReason.KICK_HOST, "LOC_GAME_ABANDONED_KICKED"],
    [KickReason.KICK_TIMEOUT, "LOCK_GAME_ABANDONED_HOST_LOSTED"],
    [KickReason.KICK_UNRECOGNIZED, "LOCK_GAME_ABANDONED_HOST_LOSTED"],
    [KickReason.KICK_UNAUTHORIZED, "LOCK_GAME_ABANDONED_HOST_LOSTED"],
    [KickReason.KICK_NO_ROOM, "LOC_GAME_ABANDONED_ROOM_FULL"],
    [KickReason.KICK_VERSION_MISMATCH, "LOC_GAME_ABANDONED_VERSION_MISMATCH"],
    [KickReason.KICK_MOD_ERROR, "LOC_GAME_ABANDONED_MOD_ERROR"],
    [KickReason.KICK_MOD_MISSING, "LOC_GAME_ABANDONED_MOD_MISSING"],
    [KickReason.KICK_APP_SLEPT, "LOC_GAME_ABANDONED_APP_SLEPT"],
    [KickReason.KICK_LOBBY_CONNECT, "LOC_GAME_ABANDONED_LOBBY_CONNECT"],
    [KickReason.KICK_PLATFORM_MAPSIZE, "LOC_GAME_ABANDONED_KICK_PLATFORM_MAPSIZE"],
    [KickReason.KICK_RELAY_FAIL, "LOC_UI_RELAY_FAILURE"],
    [KickReason.KICK_INVALID_SNAPSHOT, "LOC_UI_RELAY_FAILURE"],
    [KickReason.KICK_CROSSPLAY_DISABLED_HOST, "LOC_GAME_ABANDONED_CROSSPLAY_DISABLED_HOST"],
    [KickReason.KICK_CROSSPLAY_DISABLED_CLIENT, "LOC_GAME_ABANDONED_CROSSPLAY_DISABLED_CLIENT"],
    [KickReason.KICK_MATCH_DELETED, "LOC_GAME_ABANDONED_MATCH_DELETED"],
    [KickReason.KICK_GAME_STARTED, "LOC_GAME_ABANDONED_GAME_STARTED"],
    [KickReason.KICK_TOO_MANY_MATCHES, "LOC_GAME_ABANDONED_TOO_MANY_MATCHES"],
]);
export const abandonStrToErrorTitle = new Map([
    [KickReason.KICK_NO_HOST, "LOC_GAME_ABANDONED_HOST_LOSTED_TITLE"],
    [KickReason.KICK_HOST, "LOC_GAME_ABANDONED_KICKED_TITLE"],
    [KickReason.KICK_TIMEOUT, "LOC_GAME_ABANDONED_HOST_LOSTED_TITLE"],
    [KickReason.KICK_UNRECOGNIZED, "LOC_GAME_ABANDONED_HOST_LOSTED_TITLE"],
    [KickReason.KICK_UNAUTHORIZED, "LOC_GAME_ABANDONED_HOST_LOSTED_TITLE"],
    [KickReason.KICK_NO_ROOM, "LOC_GAME_ABANDONED_ROOM_FULL_TITLE"],
    [KickReason.KICK_VERSION_MISMATCH, "LOC_GAME_ABANDONED_VERSION_MISMATCH_TITLE"],
    [KickReason.KICK_MOD_ERROR, "LOC_GAME_ABANDONED_MOD_ERROR_TITLE"],
    [KickReason.KICK_MOD_MISSING, "LOC_GAME_ABANDONED_MOD_MISSING_TITLE"],
    [KickReason.KICK_APP_SLEPT, "LOC_GAME_ABANDONED_APP_SLEPT_TITLE"],
    [KickReason.KICK_LOBBY_CONNECT, "LOC_GAME_ABANDONED_LOBBY_CONNECT_TITLE"],
    [KickReason.KICK_PLATFORM_MAPSIZE, "LOC_GAME_ABANDONED_KICK_PLATFORM_MAPSIZE_TITLE"],
    [KickReason.KICK_RELAY_FAIL, "LOC_UI_RELAY_FAILURE_TITLE"],
    [KickReason.KICK_INVALID_SNAPSHOT, "LOC_UI_RELAY_FAILURE_TITLE"],
    [KickReason.KICK_CROSSPLAY_DISABLED_HOST, "LOC_GAME_ABANDONED_CROSSPLAY_DISABLED_HOST_TITLE"],
    [KickReason.KICK_CROSSPLAY_DISABLED_CLIENT, "LOC_GAME_ABANDONED_CROSSPLAY_DISABLED_CLIENT_TITLE"],
    [KickReason.KICK_MATCH_DELETED, "LOC_GAME_ABANDONED_MATCH_DELETED_TITLE"],
    [KickReason.KICK_GAME_STARTED, "LOC_GAME_ABANDONED_GAME_STARTED"],
    [KickReason.KICK_TOO_MANY_MATCHES, "LOC_GAME_ABANDONED_TOO_MANY_MATCHES"],
]);
export const gameListUpdateTypeToErrorBody = new Map([
    [GameListUpdateType.GAMELISTUPDATE_ERROR, "LOC_GAME_LIST_ERROR_GENERAL"],
]);
export const lobbyErrorTypeToErrorBody = new Map([
    [LobbyErrorType.LOBBYERROR_NO_ERROR, "LOC_LOBBY_ERROR_NO_ERROR"],
    [LobbyErrorType.LOBBYERROR_DEVICE_REMOVED, "LOC_LOBBY_ERROR_DEVICE_REMOVED"],
    [LobbyErrorType.LOBBYERROR_WIFI_OFF, "LOC_LOBBY_ERROR_WIFI_OFF"],
    [LobbyErrorType.LOBBYERROR_UNKNOWN_ERROR, "LOC_LOBBY_ERROR_UNKNOWN_ERROR"],
]);
export const joinGameErrorTypeToErrorBody = new Map([
    [JoinGameErrorType.JOINGAME_ROOM_FULL, "LOC_JOIN_GAME_ROOM_FULL"],
    [JoinGameErrorType.JOINGAME_SESSION_ERROR, "LOC_JOIN_GAME_SESSION_ERROR"],
    [JoinGameErrorType.JOINGAME_SESSION_UNEXPECTED, "LOC_JOIN_GAME_SESSION_UNEXPECTED"],
    [JoinGameErrorType.JOINGAME_MATCHMAKING_FAILED, "LOC_JOIN_GAME_MATCHMAKING_FAILED"],
    [JoinGameErrorType.JOINGAME_MATCHMAKING_TIMED_OUT, "LOC_JOIN_GAME_MATCHMAKING_TIMED_OUT"],
    [JoinGameErrorType.JOINGAME_NO_ONLINE_SUB, "LOC_JOIN_GAME_NO_ONLINE_SUB"],
    [JoinGameErrorType.JOINGAME_JOINCODE_SYNTAX, "LOC_JOIN_GAME_JOINCODE_SYNTAX"],
    [JoinGameErrorType.JOINGAME_JOINCODE_TRANSPORT, "LOC_JOIN_GAME_JOINCODE_TRANSPORT"],
    [JoinGameErrorType.JOINGAME_CONNECTION_REJECTED, "LOC_JOIN_GAME_CONNECTION_REJECTED"],
    [JoinGameErrorType.JOINGAME_INCOMPLETE_ACCOUNT, "LOC_JOIN_GAME_LINK_INCOMPLETE"],
    [JoinGameErrorType.JOINGAME_LINK_ACCOUNT, "LOC_JOIN_GAME_LINK_ACCOUNT"],
    [JoinGameErrorType.JOINGAME_CHILD_ACCOUNT, "LOC_JOIN_GAME_CHILD_ACCOUNT"],
]);
export const serverTypeToGameModeType = new Map([
    [ServerType.SERVER_TYPE_NONE, GameModeTypes.SINGLEPLAYER],
    [ServerType.SERVER_TYPE_LAN, GameModeTypes.LAN],
    [ServerType.SERVER_TYPE_WIRELESS, GameModeTypes.WIRELESS],
    [ServerType.SERVER_TYPE_INTERNET, GameModeTypes.INTERNET],
    [ServerType.SERVER_TYPE_HOTSEAT, GameModeTypes.HOTSEAT],
    [ServerType.SERVER_TYPE_FIRAXIS_CLOUD, GameModeTypes.PLAYBYCLOUD],
]);
export const multiplayerTeamColors = [
    "#000000",
    "#330000", "#993300", "#504e28", "#133300", "#002b33", "#1c538b", "#3a287e", "#620033",
    "#cc335b", "#452c00", "#b68500", "#6e9565"
];
/**
 * Values for the AccountLinkResult message.  These are mostly standard HTTP result codes, but some
 * values have different meanings (notably 400 and 409).
 */
export var LoginResults;
(function (LoginResults) {
    LoginResults[LoginResults["SUCCESS"] = 0] = "SUCCESS";
    LoginResults[LoginResults["INCORRECT_USERNAME_PWD"] = 400] = "INCORRECT_USERNAME_PWD";
    LoginResults[LoginResults["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    LoginResults[LoginResults["FORBIDDEN"] = 403] = "FORBIDDEN";
    LoginResults[LoginResults["ALREADY_LINKED"] = 409] = "ALREADY_LINKED";
    LoginResults[LoginResults["UNSUPPORTED_MEDIA"] = 415] = "UNSUPPORTED_MEDIA";
    LoginResults[LoginResults["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
    LoginResults[LoginResults["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    LoginResults[LoginResults["UNABLE_TO_LOGIN"] = 600] = "UNABLE_TO_LOGIN";
})(LoginResults || (LoginResults = {}));

//# sourceMappingURL=file:///core/ui/utilities/utilities-network-constants.js.map
